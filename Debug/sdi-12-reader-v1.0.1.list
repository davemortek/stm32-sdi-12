
sdi-12-reader-v1.0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000784c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080079e0  080079e0  000179e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ecc  08007ecc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed4  08007ed4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001dc  080080b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080080b8  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c41b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d56  00000000  00000000  0002c627  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a18  00000000  00000000  0002e380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae9a  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c4e  00000000  00000000  0004a552  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a115c  00000000  00000000  000531a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f42fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000f4378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079c4 	.word	0x080079c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080079c4 	.word	0x080079c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b0bf      	sub	sp, #252	; 0xfc
 8000f8c:	af1c      	add	r7, sp, #112	; 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fde0 	bl	8001b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f879 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 f951 	bl	800123c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f9a:	f000 f91f 	bl	80011dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f9e:	f000 f8e1 	bl	8001164 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SDI12_Init(huart1);
 8000fa2:	4c31      	ldr	r4, [pc, #196]	; (8001068 <main+0xe0>)
 8000fa4:	4668      	mov	r0, sp
 8000fa6:	f104 0310 	add.w	r3, r4, #16
 8000faa:	2270      	movs	r2, #112	; 0x70
 8000fac:	4619      	mov	r1, r3
 8000fae:	f002 ffad 	bl	8003f0c <memcpy>
 8000fb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fb6:	f000 f9a5 	bl	8001304 <SDI12_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f000 ff2c 	bl	8001e44 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f001 f897 	bl	8002128 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("\r\n************************ SDI-12 Reader v1.0.0 ************************\r\n");
 8000ffa:	481c      	ldr	r0, [pc, #112]	; (800106c <main+0xe4>)
 8000ffc:	f003 faa6 	bl	800454c <puts>

  HAL_Delay(4000);
 8001000:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001004:	f000 fe16 	bl	8001c34 <HAL_Delay>

  char sensor_rxBuffer[100];

  SDI12_GetInfo('1',(char*)sensor_rxBuffer);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	2031      	movs	r0, #49	; 0x31
 8001010:	f000 f99e 	bl	8001350 <SDI12_GetInfo>

  printf("<< SENSOR INFO: %s\r\n",sensor_rxBuffer);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <main+0xe8>)
 800101c:	f003 fa22 	bl	8004464 <iprintf>

  HAL_Delay(2000);
 8001020:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001024:	f000 fe06 	bl	8001c34 <HAL_Delay>
 // HAL_Delay(2000);

  //char vwc[10], ec[10], temperature[10], permittivity[10], period[10], voltageRatio[10];
  int32_t vwc, ec, temperature;

  SDI12_GetData('1', (int32_t*)&vwc,(int32_t*)&ec,(int32_t*)&temperature);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	f107 0208 	add.w	r2, r7, #8
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	2031      	movs	r0, #49	; 0x31
 8001034:	f000 f9dc 	bl	80013f0 <SDI12_GetData>

  printf("VWC - %l\r\n",vwc);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4619      	mov	r1, r3
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <main+0xec>)
 800103e:	f003 fa11 	bl	8004464 <iprintf>
  printf("EC - %l\r\n",ec);
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4619      	mov	r1, r3
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <main+0xf0>)
 8001048:	f003 fa0c 	bl	8004464 <iprintf>
  printf("TEMPERATURE - %l\r\n",temperature);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4619      	mov	r1, r3
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <main+0xf4>)
 8001052:	f003 fa07 	bl	8004464 <iprintf>

//  SDI12_Send_Command((uint8_t*)&SDI12_Command_GetData_0, (uint8_t*)&sensor_rxBuffer, 5000);
  //printf("<< SENSOR DATA: %s\r\n",sensor_rxBuffer);


  printf("<< Debug End\r\n");
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <main+0xf8>)
 8001058:	f003 fa78 	bl	800454c <puts>

  HAL_GPIO_WritePin(GPIOB,LD3_Pin,GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2108      	movs	r1, #8
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <main+0xfc>)
 8001062:	f001 f861 	bl	8002128 <HAL_GPIO_WritePin>

  while (1)
 8001066:	e7fe      	b.n	8001066 <main+0xde>
 8001068:	20000204 	.word	0x20000204
 800106c:	080079e0 	.word	0x080079e0
 8001070:	08007a2c 	.word	0x08007a2c
 8001074:	08007a44 	.word	0x08007a44
 8001078:	08007a50 	.word	0x08007a50
 800107c:	08007a5c 	.word	0x08007a5c
 8001080:	08007a70 	.word	0x08007a70
 8001084:	48000400 	.word	0x48000400

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0a4      	sub	sp, #144	; 0x90
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001092:	2244      	movs	r2, #68	; 0x44
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f002 ff43 	bl	8003f22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2234      	movs	r2, #52	; 0x34
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ff35 	bl	8003f22 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80010b8:	f001 f84e 	bl	8002158 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemClock_Config+0xd8>)
 80010be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c2:	4a27      	ldr	r2, [pc, #156]	; (8001160 <SystemClock_Config+0xd8>)
 80010c4:	f023 0318 	bic.w	r3, r3, #24
 80010c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d0:	f001 f860 	bl	8002194 <HAL_PWREx_ControlVoltageScaling>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x56>
  {
    Error_Handler();
 80010da:	f000 f90b 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010de:	2314      	movs	r3, #20
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e6:	2301      	movs	r3, #1
 80010e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80010ee:	23a0      	movs	r3, #160	; 0xa0
 80010f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 f8a0 	bl	8002240 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001106:	f000 f8f5 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800110e:	2300      	movs	r3, #0
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800111e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fcf1 	bl	8002b0c <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001130:	f000 f8e0 	bl	80012f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001134:	2303      	movs	r3, #3
 8001136:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fee6 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800114e:	f000 f8d1 	bl	80012f4 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001152:	f002 f865 	bl	8003220 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001156:	bf00      	nop
 8001158:	3790      	adds	r7, #144	; 0x90
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <MX_USART1_UART_Init+0x74>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 8001170:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 800118c:	220c      	movs	r2, #12
 800118e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 80011a4:	220b      	movs	r2, #11
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_SWAP_INIT;
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 80011aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 80011b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART1_UART_Init+0x70>)
 80011c0:	f002 f83e 	bl	8003240 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011ca:	f000 f893 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000204 	.word	0x20000204
 80011d8:	40013800 	.word	0x40013800

080011dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_USART2_UART_Init+0x58>)
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_USART2_UART_Init+0x5c>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_USART2_UART_Init+0x58>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_USART2_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART2_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART2_UART_Init+0x58>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART2_UART_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART2_UART_Init+0x58>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x58>)
 8001220:	f002 f80e 	bl	8003240 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800122a:	f000 f863 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000284 	.word	0x20000284
 8001238:	40004400 	.word	0x40004400

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_GPIO_Init+0x8c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_GPIO_Init+0x8c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2108      	movs	r1, #8
 800129e:	480b      	ldr	r0, [pc, #44]	; (80012cc <MX_GPIO_Init+0x90>)
 80012a0:	f000 ff42 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012a4:	2308      	movs	r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_GPIO_Init+0x90>)
 80012bc:	f000 fdc2 	bl	8001e44 <HAL_GPIO_Init>

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400

080012d0 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012de:	2201      	movs	r2, #1
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <__io_putchar+0x20>)
 80012e2:	f001 fffb 	bl	80032dc <HAL_UART_Transmit>

return ch;
 80012e6:	687b      	ldr	r3, [r7, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000284 	.word	0x20000284

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SDI12_Init>:
static SDI12_error_t getData(char address, char *resp);
static uint32_t measure(char address);
static SDI12_error_t sendCommandWithResponse(char *command, char *responseDest);

void SDI12_Init(UART_HandleTypeDef huart)
{
 8001304:	b084      	sub	sp, #16
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
 800130a:	f107 0c08 	add.w	ip, r7, #8
 800130e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sdi12.huart = huart;        		/*!< Specifies the SDI-12 uart handle */
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <SDI12_Init+0x2c>)
 8001314:	4618      	mov	r0, r3
 8001316:	f107 0108 	add.w	r1, r7, #8
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	461a      	mov	r2, r3
 800131e:	f002 fdf5 	bl	8003f0c <memcpy>
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800132a:	b004      	add	sp, #16
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000032c 	.word	0x2000032c

08001334 <sdi12_calloc_char>:

static char *sdi12_calloc_char(size_t num)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    return (char *)calloc(num, sizeof(char));
 800133c:	2101      	movs	r1, #1
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f002 fda2 	bl	8003e88 <calloc>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <SDI12_GetInfo>:

SDI12_error_t SDI12_GetInfo(char address, char *resp)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
    SDI12_error_t err = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
    char *command;
    char *response;

    command = sdi12_calloc_char(strlen(SDI12_Command_GetInfo) + 1);
 8001360:	2003      	movs	r0, #3
 8001362:	f7ff ffe7 	bl	8001334 <sdi12_calloc_char>
 8001366:	6138      	str	r0, [r7, #16]
    if (command == NULL)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <SDI12_GetInfo+0x24>
        return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e034      	b.n	80013de <SDI12_GetInfo+0x8e>
    sprintf(command, "%c%s", address, SDI12_Command_GetInfo);
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <SDI12_GetInfo+0x98>)
 8001378:	491c      	ldr	r1, [pc, #112]	; (80013ec <SDI12_GetInfo+0x9c>)
 800137a:	6938      	ldr	r0, [r7, #16]
 800137c:	f003 f904 	bl	8004588 <siprintf>

    response = sdi12_calloc_char(100); // Changed from 24 to 100 because memory overloads in sendCommandWithResponse
 8001380:	2064      	movs	r0, #100	; 0x64
 8001382:	f7ff ffd7 	bl	8001334 <sdi12_calloc_char>
 8001386:	60f8      	str	r0, [r7, #12]

    if (response == NULL)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <SDI12_GetInfo+0x4a>
    {
        free(command);
 800138e:	6938      	ldr	r0, [r7, #16]
 8001390:	f002 fdb4 	bl	8003efc <free>
        return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	e021      	b.n	80013de <SDI12_GetInfo+0x8e>
    }

    err = sendCommandWithResponse(command, response);
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f000 f951 	bl	8001644 <sendCommandWithResponse>
 80013a2:	4603      	mov	r3, r0
 80013a4:	75fb      	strb	r3, [r7, #23]
    strcpy(resp,"\0"); /* Clear char pointer */
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
    strcat(resp,response);
 80013ac:	68f9      	ldr	r1, [r7, #12]
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f003 f979 	bl	80046a6 <strcat>

    if (err != SDI12_ERROR_SUCCESS)
 80013b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <SDI12_GetInfo+0x7e>
    {
        free(command);
 80013bc:	6938      	ldr	r0, [r7, #16]
 80013be:	f002 fd9d 	bl	8003efc <free>
        free(response);
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f002 fd9a 	bl	8003efc <free>
        return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	e007      	b.n	80013de <SDI12_GetInfo+0x8e>
    }

    free(command);
 80013ce:	6938      	ldr	r0, [r7, #16]
 80013d0:	f002 fd94 	bl	8003efc <free>
    free(response);
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f002 fd91 	bl	8003efc <free>

    return err;
 80013da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	08007a80 	.word	0x08007a80
 80013ec:	08007a84 	.word	0x08007a84

080013f0 <SDI12_GetData>:
}



SDI12_error_t SDI12_GetData(char address, int32_t *vwc, int32_t *ec, int32_t *temp)
{
 80013f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013f4:	b08e      	sub	sp, #56	; 0x38
 80013f6:	af04      	add	r7, sp, #16
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
    SDI12_error_t err = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char *response;
    float a,b,c;

    HAL_Delay(measure(address)); // Take sensor measurement and wait for data to be ready
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f8c0 	bl	8001590 <measure>
 8001410:	4603      	mov	r3, r0
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fc0e 	bl	8001c34 <HAL_Delay>

    response = sdi12_calloc_char(100); // Changed from 24 to 100 because memory overloads in sendCommandWithResponse
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f7ff ff8b 	bl	8001334 <sdi12_calloc_char>
 800141e:	6238      	str	r0, [r7, #32]

    getData(address, response);
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	6a39      	ldr	r1, [r7, #32]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f845 	bl	80014b4 <getData>

    sscanf(response, "1%f%f%f",a,b,c);
 800142a:	69f8      	ldr	r0, [r7, #28]
 800142c:	f7ff f88c 	bl	8000548 <__aeabi_f2d>
 8001430:	4680      	mov	r8, r0
 8001432:	4689      	mov	r9, r1
 8001434:	69b8      	ldr	r0, [r7, #24]
 8001436:	f7ff f887 	bl	8000548 <__aeabi_f2d>
 800143a:	4604      	mov	r4, r0
 800143c:	460d      	mov	r5, r1
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800144c:	e9cd 4500 	strd	r4, r5, [sp]
 8001450:	4642      	mov	r2, r8
 8001452:	464b      	mov	r3, r9
 8001454:	4915      	ldr	r1, [pc, #84]	; (80014ac <SDI12_GetData+0xbc>)
 8001456:	6a38      	ldr	r0, [r7, #32]
 8001458:	f003 f8b6 	bl	80045c8 <siscanf>

    vwc = (int32_t)(a*1000);
 800145c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001460:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80014b0 <SDI12_GetData+0xc0>
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146c:	ee17 3a90 	vmov	r3, s15
 8001470:	60bb      	str	r3, [r7, #8]
    ec = (int32_t)(b*1000);
 8001472:	edd7 7a06 	vldr	s15, [r7, #24]
 8001476:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80014b0 <SDI12_GetData+0xc0>
 800147a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 3a90 	vmov	r3, s15
 8001486:	607b      	str	r3, [r7, #4]
    temp = (int32_t)(c*1000);
 8001488:	edd7 7a05 	vldr	s15, [r7, #20]
 800148c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80014b0 <SDI12_GetData+0xc0>
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 3a90 	vmov	r3, s15
 800149c:	603b      	str	r3, [r7, #0]
    return err;
 800149e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014ac:	08007a90 	.word	0x08007a90
 80014b0:	447a0000 	.word	0x447a0000

080014b4 <getData>:


static SDI12_error_t getData(char address, char *resp)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
    SDI12_error_t err = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]
    char *command;
    char *response;

    command = sdi12_calloc_char(strlen(SDI12_Command_GetData) + 1);
 80014c4:	2004      	movs	r0, #4
 80014c6:	f7ff ff35 	bl	8001334 <sdi12_calloc_char>
 80014ca:	6138      	str	r0, [r7, #16]
    if (command == NULL)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <getData+0x24>
        return -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e051      	b.n	800157c <getData+0xc8>
    sprintf(command, "%c%s", address, SDI12_Command_GetData);
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <getData+0xd0>)
 80014dc:	492a      	ldr	r1, [pc, #168]	; (8001588 <getData+0xd4>)
 80014de:	6938      	ldr	r0, [r7, #16]
 80014e0:	f003 f852 	bl	8004588 <siprintf>

    response = sdi12_calloc_char(100); // Changed from 24 to 100 because memory overloads in sendCommandWithResponse
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f7ff ff25 	bl	8001334 <sdi12_calloc_char>
 80014ea:	60f8      	str	r0, [r7, #12]

    if (response == NULL)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <getData+0x4a>
    {
        free(command);
 80014f2:	6938      	ldr	r0, [r7, #16]
 80014f4:	f002 fd02 	bl	8003efc <free>
        return -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	e03e      	b.n	800157c <getData+0xc8>
    }

    err = sendCommandWithResponse(command, response);
 80014fe:	68f9      	ldr	r1, [r7, #12]
 8001500:	6938      	ldr	r0, [r7, #16]
 8001502:	f000 f89f 	bl	8001644 <sendCommandWithResponse>
 8001506:	4603      	mov	r3, r0
 8001508:	75fb      	strb	r3, [r7, #23]
    strcpy(resp,"\0"); /* Clear char pointer */
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
    strcat(resp,response); /* Append data with CR LF */
 8001510:	68f9      	ldr	r1, [r7, #12]
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f003 f8c7 	bl	80046a6 <strcat>

    command = sdi12_calloc_char(strlen(SDI12_Command_GetData1) + 1);
 8001518:	2004      	movs	r0, #4
 800151a:	f7ff ff0b 	bl	8001334 <sdi12_calloc_char>
 800151e:	6138      	str	r0, [r7, #16]
    if (command == NULL)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <getData+0x78>
        return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e027      	b.n	800157c <getData+0xc8>
    sprintf(command, "%c%s", address, SDI12_Command_GetData1);
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <getData+0xd8>)
 8001530:	4915      	ldr	r1, [pc, #84]	; (8001588 <getData+0xd4>)
 8001532:	6938      	ldr	r0, [r7, #16]
 8001534:	f003 f828 	bl	8004588 <siprintf>

    response = sdi12_calloc_char(100); // Changed from 24 to 100 because memory overloads in sendCommandWithResponse
 8001538:	2064      	movs	r0, #100	; 0x64
 800153a:	f7ff fefb 	bl	8001334 <sdi12_calloc_char>
 800153e:	60f8      	str	r0, [r7, #12]

    if (response == NULL)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <getData+0x9e>
    {
        free(command);
 8001546:	6938      	ldr	r0, [r7, #16]
 8001548:	f002 fcd8 	bl	8003efc <free>
        return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e014      	b.n	800157c <getData+0xc8>
    }

//  err = sendCommandWithResponse(command, response);
//  strcat(resp,response); /* Append data with CR LF */

    if (err != SDI12_ERROR_SUCCESS)
 8001552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <getData+0xb8>
    {
        free(command);
 800155a:	6938      	ldr	r0, [r7, #16]
 800155c:	f002 fcce 	bl	8003efc <free>
        free(response);
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f002 fccb 	bl	8003efc <free>
        return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e007      	b.n	800157c <getData+0xc8>
    }

    free(command);
 800156c:	6938      	ldr	r0, [r7, #16]
 800156e:	f002 fcc5 	bl	8003efc <free>
    free(response);
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f002 fcc2 	bl	8003efc <free>

    return err;
 8001578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	08007a98 	.word	0x08007a98
 8001588:	08007a84 	.word	0x08007a84
 800158c:	08007a9c 	.word	0x08007a9c

08001590 <measure>:


static uint32_t measure(char address)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
    uint32_t dataAvailable = 0; // Time until measurement data available (ms)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
    char *command;
    char *response;

    command = sdi12_calloc_char(strlen(SDI12_Command_Measure) + 1);
 800159e:	2004      	movs	r0, #4
 80015a0:	f7ff fec8 	bl	8001334 <sdi12_calloc_char>
 80015a4:	6138      	str	r0, [r7, #16]
    if (command == NULL)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <measure+0x22>
        return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	e03b      	b.n	800162a <measure+0x9a>
    sprintf(command, "%c%s", address, SDI12_Command_Measure);
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <measure+0xa4>)
 80015b6:	4920      	ldr	r1, [pc, #128]	; (8001638 <measure+0xa8>)
 80015b8:	6938      	ldr	r0, [r7, #16]
 80015ba:	f002 ffe5 	bl	8004588 <siprintf>

    response = sdi12_calloc_char(100); // Changed from 24 to 100 because memory overloads in sendCommandWithResponse
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f7ff feb8 	bl	8001334 <sdi12_calloc_char>
 80015c4:	60f8      	str	r0, [r7, #12]

    if (response == NULL)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <measure+0x48>
    {
        free(command);
 80015cc:	6938      	ldr	r0, [r7, #16]
 80015ce:	f002 fc95 	bl	8003efc <free>
        return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e028      	b.n	800162a <measure+0x9a>
    }

    sendCommandWithResponse(command, response);
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	6938      	ldr	r0, [r7, #16]
 80015dc:	f000 f832 	bl	8001644 <sendCommandWithResponse>
    dataAvailable = (response[1] - 48) * 100000 +
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3b30      	subs	r3, #48	; 0x30
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <measure+0xac>)
 80015ea:	fb02 f203 	mul.w	r2, r2, r3
    		        (response[2] - 48) * 10000 +
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3302      	adds	r3, #2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	3b30      	subs	r3, #48	; 0x30
 80015f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
    dataAvailable = (response[1] - 48) * 100000 +
 80015fe:	441a      	add	r2, r3
					(response[3] - 48) * 1000;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3303      	adds	r3, #3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3b30      	subs	r3, #48	; 0x30
 8001608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800160c:	fb01 f303 	mul.w	r3, r1, r3
    		        (response[2] - 48) * 10000 +
 8001610:	4413      	add	r3, r2
    dataAvailable = (response[1] - 48) * 100000 +
 8001612:	617b      	str	r3, [r7, #20]

    printf("TIME - %lu\r\n",dataAvailable);
 8001614:	6979      	ldr	r1, [r7, #20]
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <measure+0xb0>)
 8001618:	f002 ff24 	bl	8004464 <iprintf>
//        free(command);
//        free(response);
//        return -1;
//    }

    free(command);
 800161c:	6938      	ldr	r0, [r7, #16]
 800161e:	f002 fc6d 	bl	8003efc <free>
    free(response);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f002 fc6a 	bl	8003efc <free>

    return dataAvailable;
 8001628:	697b      	ldr	r3, [r7, #20]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	08007aa0 	.word	0x08007aa0
 8001638:	08007a84 	.word	0x08007a84
 800163c:	000186a0 	.word	0x000186a0
 8001640:	08007aa4 	.word	0x08007aa4

08001644 <sendCommandWithResponse>:
  * @brief  Sends SDI-12 command
  * @param  command
  * @retval SDI12_OK
  */
static SDI12_error_t sendCommandWithResponse(char *command, char *responseDest)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
    uint8_t command_len = strlen(command);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe fdbe 	bl	80001d0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	77fb      	strb	r3, [r7, #31]

    if(command != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <sendCommandWithResponse+0x24>
    {
        printf("Command: %s\r\n",command);
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	484b      	ldr	r0, [pc, #300]	; (8001790 <sendCommandWithResponse+0x14c>)
 8001662:	f002 feff 	bl	8004464 <iprintf>
 8001666:	e002      	b.n	800166e <sendCommandWithResponse+0x2a>
    }
    else
    {
    	printf("Command: NULL\r\n");
 8001668:	484a      	ldr	r0, [pc, #296]	; (8001794 <sendCommandWithResponse+0x150>)
 800166a:	f002 ff6f 	bl	800454c <puts>
    }

    // Set TX Pin to Output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800167e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001682:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f000 fbd3 	bl	8001e44 <HAL_GPIO_Init>

    // Send break
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f000 fd3e 	bl	8002128 <HAL_GPIO_WritePin>
    HAL_Delay(12);
 80016ac:	200c      	movs	r0, #12
 80016ae:	f000 fac1 	bl	8001c34 <HAL_Delay>

    // Set marking
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f000 fd34 	bl	8002128 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016c4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d2:	2307      	movs	r3, #7
 80016d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f000 fbb0 	bl	8001e44 <HAL_GPIO_Init>
    HAL_Delay(7);
 80016e4:	2007      	movs	r0, #7
 80016e6:	f000 faa5 	bl	8001c34 <HAL_Delay>

    // Transmit Data
    uint8_t err = HAL_UART_Transmit(&sdi12.huart, (uint8_t *)command, command_len,1000);
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4828      	ldr	r0, [pc, #160]	; (8001798 <sendCommandWithResponse+0x154>)
 80016f6:	f001 fdf1 	bl	80032dc <HAL_UART_Transmit>
 80016fa:	4603      	mov	r3, r0
 80016fc:	77bb      	strb	r3, [r7, #30]
    if(err != HAL_OK)
 80016fe:	7fbb      	ldrb	r3, [r7, #30]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <sendCommandWithResponse+0xce>
    {
   	 printf("TX ERROR - %d\r\n",err);
 8001704:	7fbb      	ldrb	r3, [r7, #30]
 8001706:	4619      	mov	r1, r3
 8001708:	4824      	ldr	r0, [pc, #144]	; (800179c <sendCommandWithResponse+0x158>)
 800170a:	f002 feab 	bl	8004464 <iprintf>
   	 return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e03a      	b.n	8001788 <sendCommandWithResponse+0x144>
    }

    sdi12.huart.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <sendCommandWithResponse+0x154>)
 8001714:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
    err = HAL_UART_Init(&sdi12.huart);
 800171a:	481f      	ldr	r0, [pc, #124]	; (8001798 <sendCommandWithResponse+0x154>)
 800171c:	f001 fd90 	bl	8003240 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	77bb      	strb	r3, [r7, #30]
    if(err != HAL_OK)
 8001724:	7fbb      	ldrb	r3, [r7, #30]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <sendCommandWithResponse+0xf4>
    {
   	printf("INIT ERROR - %d\r\n",err);
 800172a:	7fbb      	ldrb	r3, [r7, #30]
 800172c:	4619      	mov	r1, r3
 800172e:	481c      	ldr	r0, [pc, #112]	; (80017a0 <sendCommandWithResponse+0x15c>)
 8001730:	f002 fe98 	bl	8004464 <iprintf>
   	return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e027      	b.n	8001788 <sendCommandWithResponse+0x144>
    }


    //Set uart to recieve mode
    err = HAL_UART_Receive(&sdi12.huart, (uint8_t *)responseDest, 40,1000);
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	2228      	movs	r2, #40	; 0x28
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4815      	ldr	r0, [pc, #84]	; (8001798 <sendCommandWithResponse+0x154>)
 8001742:	f001 fe5e 	bl	8003402 <HAL_UART_Receive>
 8001746:	4603      	mov	r3, r0
 8001748:	77bb      	strb	r3, [r7, #30]
    if(err != HAL_TIMEOUT)printf("RX ERROR - %d\r\n",err);
 800174a:	7fbb      	ldrb	r3, [r7, #30]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d004      	beq.n	800175a <sendCommandWithResponse+0x116>
 8001750:	7fbb      	ldrb	r3, [r7, #30]
 8001752:	4619      	mov	r1, r3
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <sendCommandWithResponse+0x160>)
 8001756:	f002 fe85 	bl	8004464 <iprintf>

    printf("<< DATA - %s\r\n",responseDest);
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	4812      	ldr	r0, [pc, #72]	; (80017a8 <sendCommandWithResponse+0x164>)
 800175e:	f002 fe81 	bl	8004464 <iprintf>

    sdi12.huart.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <sendCommandWithResponse+0x154>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
    err = HAL_UART_Init(&sdi12.huart);
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <sendCommandWithResponse+0x154>)
 800176a:	f001 fd69 	bl	8003240 <HAL_UART_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	77bb      	strb	r3, [r7, #30]
    if(err != HAL_OK)
 8001772:	7fbb      	ldrb	r3, [r7, #30]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <sendCommandWithResponse+0x142>
    {
   	printf("INIT 2 ERROR - %d\r\n",err);
 8001778:	7fbb      	ldrb	r3, [r7, #30]
 800177a:	4619      	mov	r1, r3
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <sendCommandWithResponse+0x168>)
 800177e:	f002 fe71 	bl	8004464 <iprintf>
   	return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <sendCommandWithResponse+0x144>
    }

    return SDI12_ERROR_SUCCESS;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08007ab4 	.word	0x08007ab4
 8001794:	08007ac4 	.word	0x08007ac4
 8001798:	2000032c 	.word	0x2000032c
 800179c:	08007ad4 	.word	0x08007ad4
 80017a0:	08007ae4 	.word	0x08007ae4
 80017a4:	08007af8 	.word	0x08007af8
 80017a8:	08007b08 	.word	0x08007b08
 80017ac:	08007b18 	.word	0x08007b18

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x44>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_MspInit+0x44>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6613      	str	r3, [r2, #96]	; 0x60
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x44>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x44>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_MspInit+0x44>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6593      	str	r3, [r2, #88]	; 0x58
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_MspInit+0x44>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <HAL_UART_MspInit+0x100>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12a      	bne.n	8001870 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_UART_MspInit+0x104>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	4a37      	ldr	r2, [pc, #220]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6613      	str	r3, [r2, #96]	; 0x60
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800184a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800185c:	2307      	movs	r3, #7
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f000 faeb 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800186e:	e03f      	b.n	80018f0 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a22      	ldr	r2, [pc, #136]	; (8001900 <HAL_UART_MspInit+0x108>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d13a      	bne.n	80018f0 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_UART_MspInit+0x104>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	6593      	str	r3, [r2, #88]	; 0x58
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_UART_MspInit+0x104>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_UART_MspInit+0x104>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018aa:	2304      	movs	r3, #4
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ba:	2307      	movs	r3, #7
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f000 fabc 	bl	8001e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018de:	2303      	movs	r3, #3
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f000 faaa 	bl	8001e44 <HAL_GPIO_Init>
}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	; 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40013800 	.word	0x40013800
 80018fc:	40021000 	.word	0x40021000
 8001900:	40004400 	.word	0x40004400

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 f94e 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e00a      	b.n	8001988 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001972:	f3af 8000 	nop.w
 8001976:	4601      	mov	r1, r0
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	b2ca      	uxtb	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf0      	blt.n	8001972 <_read+0x12>
	}

return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e009      	b.n	80019c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc8b 	bl	80012d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf1      	blt.n	80019ac <_write+0x12>
	}
	return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_close>:

int _close(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	return -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fa:	605a      	str	r2, [r3, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_isatty>:

int _isatty(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x50>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x16>
		heap_end = &end;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <_sbrk+0x50>)
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <_sbrk+0x54>)
 8001a50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <_sbrk+0x50>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <_sbrk+0x50>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	466a      	mov	r2, sp
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d907      	bls.n	8001a76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a66:	f002 fa17 	bl	8003e98 <__errno>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	e006      	b.n	8001a84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <_sbrk+0x50>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <_sbrk+0x50>)
 8001a80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200001f8 	.word	0x200001f8
 8001a90:	200003c0 	.word	0x200003c0

08001a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <SystemInit+0x64>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <SystemInit+0x64>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <SystemInit+0x68>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <SystemInit+0x68>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <SystemInit+0x68>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <SystemInit+0x68>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <SystemInit+0x68>)
 8001ac0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ac4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <SystemInit+0x68>)
 8001acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <SystemInit+0x68>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <SystemInit+0x68>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <SystemInit+0x68>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SystemInit+0x64>)
 8001ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aea:	609a      	str	r2, [r3, #8]
#endif
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	40021000 	.word	0x40021000

08001b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b06:	e003      	b.n	8001b10 <LoopCopyDataInit>

08001b08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b0e:	3104      	adds	r1, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b18:	d3f6      	bcc.n	8001b08 <CopyDataInit>
	ldr	r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b1c:	e002      	b.n	8001b24 <LoopFillZerobss>

08001b1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b20:	f842 3b04 	str.w	r3, [r2], #4

08001b24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <LoopForever+0x16>)
	cmp	r2, r3
 8001b26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b28:	d3f9      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b2a:	f7ff ffb3 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f002 f9b9 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b32:	f7ff fa29 	bl	8000f88 <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b38:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001b3c:	08007edc 	.word	0x08007edc
	ldr	r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b44:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001b48:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001b4c:	200003bc 	.word	0x200003bc

08001b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_2_IRQHandler>

08001b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f93d 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f80e 	bl	8001b84 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	e001      	b.n	8001b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b74:	f7ff fe1c 	bl	80017b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_InitTick+0x68>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d022      	beq.n	8001bde <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_InitTick+0x6c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_InitTick+0x68>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f93c 	bl	8001e2a <HAL_SYSTICK_Config>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	d809      	bhi.n	8001bd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc6:	f000 f914 	bl	8001df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_InitTick+0x70>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e004      	b.n	8001be2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e001      	b.n	8001be2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_IncTick+0x1c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_IncTick+0x20>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <HAL_IncTick+0x1c>)
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	200003b4 	.word	0x200003b4
 8001c18:	20000008 	.word	0x20000008

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200003b4 	.word	0x200003b4

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d004      	beq.n	8001c58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_Delay+0x40>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c58:	bf00      	nop
 8001c5a:	f7ff ffdf 	bl	8001c1c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d8f7      	bhi.n	8001c5a <HAL_Delay+0x26>
  {
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff47 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff5c 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffb0 	bl	8001d98 <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	e14e      	b.n	80020f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8140 	beq.w	80020ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d00b      	beq.n	8001e8c <HAL_GPIO_Init+0x48>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e80:	2b11      	cmp	r3, #17
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d130      	bne.n	8001eee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 0201 	and.w	r2, r3, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0xea>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d123      	bne.n	8001f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	220f      	movs	r2, #15
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	6939      	ldr	r1, [r7, #16]
 8001f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0203 	and.w	r2, r3, #3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 809a 	beq.w	80020ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb8:	4b55      	ldr	r3, [pc, #340]	; (8002110 <HAL_GPIO_Init+0x2cc>)
 8001fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbc:	4a54      	ldr	r2, [pc, #336]	; (8002110 <HAL_GPIO_Init+0x2cc>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc4:	4b52      	ldr	r3, [pc, #328]	; (8002110 <HAL_GPIO_Init+0x2cc>)
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd0:	4a50      	ldr	r2, [pc, #320]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ffa:	d013      	beq.n	8002024 <HAL_GPIO_Init+0x1e0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a46      	ldr	r2, [pc, #280]	; (8002118 <HAL_GPIO_Init+0x2d4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00d      	beq.n	8002020 <HAL_GPIO_Init+0x1dc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a45      	ldr	r2, [pc, #276]	; (800211c <HAL_GPIO_Init+0x2d8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <HAL_GPIO_Init+0x1d8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a44      	ldr	r2, [pc, #272]	; (8002120 <HAL_GPIO_Init+0x2dc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d101      	bne.n	8002018 <HAL_GPIO_Init+0x1d4>
 8002014:	2303      	movs	r3, #3
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x1e2>
 8002018:	2307      	movs	r3, #7
 800201a:	e004      	b.n	8002026 <HAL_GPIO_Init+0x1e2>
 800201c:	2302      	movs	r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x1e2>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_GPIO_Init+0x1e2>
 8002024:	2300      	movs	r3, #0
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002036:	4937      	ldr	r1, [pc, #220]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002068:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002092:	4a24      	ldr	r2, [pc, #144]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f aea9 	bne.w	8001e54 <HAL_GPIO_Init+0x10>
  }
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800
 8002120:	48000c00 	.word	0x48000c00
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002144:	e002      	b.n	800214c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40007000 	.word	0x40007000

08002178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <HAL_PWREx_GetVoltageRange+0x18>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40007000 	.word	0x40007000

08002194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a2:	d130      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d038      	beq.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ba:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2232      	movs	r2, #50	; 0x32
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9b      	lsrs	r3, r3, #18
 80021d4:	3301      	adds	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d8:	e002      	b.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ec:	d102      	bne.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f2      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d110      	bne.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e00f      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002212:	d007      	beq.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40007000 	.word	0x40007000
 8002238:	20000000 	.word	0x20000000
 800223c:	431bde83 	.word	0x431bde83

08002240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f000 bc56 	b.w	8002b00 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002254:	4ba1      	ldr	r3, [pc, #644]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225e:	4b9f      	ldr	r3, [pc, #636]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80e6 	beq.w	8002442 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_RCC_OscConfig+0x4c>
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	f040 808d 	bne.w	800239e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b01      	cmp	r3, #1
 8002288:	f040 8089 	bne.w	800239e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800228c:	4b93      	ldr	r3, [pc, #588]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_RCC_OscConfig+0x66>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f000 bc2d 	b.w	8002b00 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022aa:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <HAL_RCC_OscConfig+0x80>
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022be:	e005      	b.n	80022cc <HAL_RCC_OscConfig+0x8c>
 80022c0:	4b86      	ldr	r3, [pc, #536]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d224      	bcs.n	800231a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fdbd 	bl	8002e54 <RCC_SetFlashLatencyFromMSIRange>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f000 bc0d 	b.w	8002b00 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e6:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7c      	ldr	r2, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	4977      	ldr	r1, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002304:	4b75      	ldr	r3, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4972      	ldr	r1, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e025      	b.n	8002366 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231a:	4b70      	ldr	r3, [pc, #448]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6f      	ldr	r2, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	496a      	ldr	r1, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	4965      	ldr	r1, [pc, #404]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fd7c 	bl	8002e54 <RCC_SetFlashLatencyFromMSIRange>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3cc      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002366:	f000 fcb3 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_RCC_OscConfig+0x2a0>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	fa21 f303 	lsr.w	r3, r1, r3
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_RCC_OscConfig+0x2a4>)
 8002384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002386:	4b58      	ldr	r3, [pc, #352]	; (80024e8 <HAL_RCC_OscConfig+0x2a8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fbfa 	bl	8001b84 <HAL_InitTick>
 8002390:	4603      	mov	r3, r0
 8002392:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d052      	beq.n	8002440 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	e3b0      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d032      	beq.n	800240c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a6:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a4c      	ldr	r2, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fc33 	bl	8001c1c <HAL_GetTick>
 80023b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ba:	f7ff fc2f 	bl	8001c1c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e399      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d8:	4b40      	ldr	r3, [pc, #256]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3f      	ldr	r2, [pc, #252]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023de:	f043 0308 	orr.w	r3, r3, #8
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	493a      	ldr	r1, [pc, #232]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f6:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	4935      	ldr	r1, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
 800240a:	e01a      	b.n	8002442 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800240c:	4b33      	ldr	r3, [pc, #204]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a32      	ldr	r2, [pc, #200]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002418:	f7ff fc00 	bl	8001c1c <HAL_GetTick>
 800241c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002420:	f7ff fbfc 	bl	8001c1c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e366      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x1e0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d073      	beq.n	8002536 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x220>
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d10e      	bne.n	8002478 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d063      	beq.n	8002534 <HAL_RCC_OscConfig+0x2f4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d15f      	bne.n	8002534 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e343      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x250>
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a15      	ldr	r2, [pc, #84]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0x28c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x274>
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x28c>
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a05      	ldr	r2, [pc, #20]	; (80024dc <HAL_RCC_OscConfig+0x29c>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff fba2 	bl	8001c1c <HAL_GetTick>
 80024d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024da:	e010      	b.n	80024fe <HAL_RCC_OscConfig+0x2be>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08007b5c 	.word	0x08007b5c
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff fb96 	bl	8001c1c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e300      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fe:	4ba0      	ldr	r3, [pc, #640]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x2ac>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff fb86 	bl	8001c1c <HAL_GetTick>
 8002510:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff fb82 	bl	8001c1c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2ec      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002526:	4b96      	ldr	r3, [pc, #600]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x2d4>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d060      	beq.n	8002604 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d005      	beq.n	8002554 <HAL_RCC_OscConfig+0x314>
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d119      	bne.n	8002582 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d116      	bne.n	8002582 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002554:	4b8a      	ldr	r3, [pc, #552]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x32c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e2c9      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b84      	ldr	r3, [pc, #528]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4981      	ldr	r1, [pc, #516]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002580:	e040      	b.n	8002604 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d023      	beq.n	80025d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258a:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7c      	ldr	r2, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7ff fb41 	bl	8001c1c <HAL_GetTick>
 800259a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7ff fb3d 	bl	8001c1c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e2a7      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	496d      	ldr	r1, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
 80025d0:	e018      	b.n	8002604 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b6b      	ldr	r3, [pc, #428]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6a      	ldr	r2, [pc, #424]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80025d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7ff fb1d 	bl	8001c1c <HAL_GetTick>
 80025e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7ff fb19 	bl	8001c1c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e283      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d07f      	beq.n	8002710 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05f      	beq.n	80026d8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 800261a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	429a      	cmp	r2, r3
 800262c:	d037      	beq.n	800269e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e25c      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002650:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002660:	f7ff fadc 	bl	8001c1c <HAL_GetTick>
 8002664:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff fad8 	bl	8001c1c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b11      	cmp	r3, #17
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e242      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 800267c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002688:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 800268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268e:	f023 0210 	bic.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	493a      	ldr	r1, [pc, #232]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a4:	4a36      	ldr	r2, [pc, #216]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff fab5 	bl	8001c1c <HAL_GetTick>
 80026b2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7ff fab1 	bl	8001c1c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e21b      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ef      	beq.n	80026b6 <HAL_RCC_OscConfig+0x476>
 80026d6:	e01b      	b.n	8002710 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026de:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7ff fa98 	bl	8001c1c <HAL_GetTick>
 80026ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff fa94 	bl	8001c1c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b11      	cmp	r3, #17
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1fe      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ef      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80c1 	beq.w	80028a0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10e      	bne.n	800274e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x540>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x544>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_RCC_OscConfig+0x544>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <HAL_RCC_OscConfig+0x544>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7ff fa59 	bl	8001c1c <HAL_GetTick>
 800276a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	e00c      	b.n	8002788 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7ff fa55 	bl	8001c1c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d905      	bls.n	8002788 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1bf      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	4bb1      	ldr	r3, [pc, #708]	; (8002a50 <HAL_RCC_OscConfig+0x810>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ec      	beq.n	800276e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02c      	beq.n	80027fa <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80027a0:	4bac      	ldr	r3, [pc, #688]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	49a8      	ldr	r1, [pc, #672]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027c6:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	4aa1      	ldr	r2, [pc, #644]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027d6:	4b9f      	ldr	r3, [pc, #636]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	4a9d      	ldr	r2, [pc, #628]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e6:	e018      	b.n	800281a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027e8:	4b9a      	ldr	r3, [pc, #616]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a99      	ldr	r2, [pc, #612]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f8:	e00f      	b.n	800281a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fa:	4b96      	ldr	r3, [pc, #600]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	4a94      	ldr	r2, [pc, #592]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800280a:	4b92      	ldr	r3, [pc, #584]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	4a90      	ldr	r2, [pc, #576]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7ff f9fb 	bl	8001c1c <HAL_GetTick>
 8002826:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7ff f9f7 	bl	8001c1c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e15f      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002840:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ed      	beq.n	800282a <HAL_RCC_OscConfig+0x5ea>
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7ff f9e4 	bl	8001c1c <HAL_GetTick>
 8002854:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7ff f9e0 	bl	8001c1c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e148      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286e:	4b79      	ldr	r3, [pc, #484]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ed      	bne.n	8002858 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	4a74      	ldr	r2, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d03c      	beq.n	8002926 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01c      	beq.n	80028ee <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028b4:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80028b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ba:	4a66      	ldr	r2, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7ff f9aa 	bl	8001c1c <HAL_GetTick>
 80028c8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028cc:	f7ff f9a6 	bl	8001c1c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e110      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80028e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ef      	beq.n	80028cc <HAL_RCC_OscConfig+0x68c>
 80028ec:	e01b      	b.n	8002926 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ee:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80028f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028f4:	4a57      	ldr	r2, [pc, #348]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7ff f98d 	bl	8001c1c <HAL_GetTick>
 8002902:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002906:	f7ff f989 	bl	8001c1c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0f3      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002918:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 800291a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ef      	bne.n	8002906 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80e7 	beq.w	8002afe <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2b02      	cmp	r3, #2
 8002936:	f040 80b7 	bne.w	8002aa8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800293a:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	429a      	cmp	r2, r3
 800294c:	d124      	bne.n	8002998 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002958:	3b01      	subs	r3, #1
 800295a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d11b      	bne.n	8002998 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d113      	bne.n	8002998 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d109      	bne.n	8002998 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	3b01      	subs	r3, #1
 8002992:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d061      	beq.n	8002a5c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d056      	beq.n	8002a4c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80029a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029aa:	f7ff f937 	bl	8001c1c <HAL_GetTick>
 80029ae:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7ff f933 	bl	8001c1c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e09d      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCC_OscConfig+0x818>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ea:	0212      	lsls	r2, r2, #8
 80029ec:	4311      	orrs	r1, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029f2:	0852      	lsrs	r2, r2, #1
 80029f4:	3a01      	subs	r2, #1
 80029f6:	0552      	lsls	r2, r2, #21
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0652      	lsls	r2, r2, #25
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4913      	ldr	r1, [pc, #76]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a24:	f7ff f8fa 	bl	8001c1c <HAL_GetTick>
 8002a28:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7ff f8f6 	bl	8001c1c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e060      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_OscConfig+0x814>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4a:	e058      	b.n	8002afe <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e057      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
 8002a50:	40007000 	.word	0x40007000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d14a      	bne.n	8002afe <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a80:	f7ff f8cc 	bl	8001c1c <HAL_GetTick>
 8002a84:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7ff f8c8 	bl	8001c1c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e032      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x848>
 8002aa6:	e02a      	b.n	8002afe <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d025      	beq.n	8002afa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002ac0:	f023 0303 	bic.w	r3, r3, #3
 8002ac4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002acc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ad0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7ff f8a3 	bl	8001c1c <HAL_GetTick>
 8002ad6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7ff f89f 	bl	8001c1c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e009      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_OscConfig+0x8c8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x89a>
 8002af8:	e001      	b.n	8002afe <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0c8      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b66      	ldr	r3, [pc, #408]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d910      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	4961      	ldr	r1, [pc, #388]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0b0      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d04c      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b64:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d121      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e09e      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e092      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e086      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e07e      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bb4:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 0203 	bic.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	493f      	ldr	r1, [pc, #252]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc6:	f7ff f829 	bl	8001c1c <HAL_GetTick>
 8002bca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bce:	f7ff f825 	bl	8001c1c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e066      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 020c 	and.w	r2, r3, #12
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d1eb      	bne.n	8002bce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	492c      	ldr	r1, [pc, #176]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d210      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 0207 	bic.w	r2, r3, #7
 8002c2a:	4924      	ldr	r1, [pc, #144]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_ClockConfig+0x1b0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e036      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4918      	ldr	r1, [pc, #96]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4910      	ldr	r1, [pc, #64]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c82:	f000 f825 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c86:	4601      	mov	r1, r0
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe ff6c 	bl	8001b84 <HAL_InitTick>
 8002cac:	4603      	mov	r3, r0
 8002cae:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cb0:	7afb      	ldrb	r3, [r7, #11]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08007b5c 	.word	0x08007b5c
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce8:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d121      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d11e      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d10:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e005      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	e004      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d133      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0xaa>
 8002d72:	e005      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d76:	617b      	str	r3, [r7, #20]
      break;
 8002d78:	e005      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d7c:	617b      	str	r3, [r7, #20]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	617b      	str	r3, [r7, #20]
      break;
 8002d84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	3301      	adds	r3, #1
 8002d92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	fb02 f203 	mul.w	r2, r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0e5b      	lsrs	r3, r3, #25
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3724      	adds	r7, #36	; 0x24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08007b74 	.word	0x08007b74
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	007a1200 	.word	0x007a1200

08002de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000000 	.word	0x20000000

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e04:	4601      	mov	r1, r0
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	08007b6c 	.word	0x08007b6c

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e2c:	f7ff ffda 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e30:	4601      	mov	r1, r0
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0adb      	lsrs	r3, r3, #11
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08007b6c 	.word	0x08007b6c

08002e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e60:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e6c:	f7ff f984 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 8002e70:	6178      	str	r0, [r7, #20]
 8002e72:	e014      	b.n	8002e9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e80:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e8c:	f7ff f974 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 8002e90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea4:	d10b      	bne.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b80      	cmp	r3, #128	; 0x80
 8002eaa:	d919      	bls.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2ba0      	cmp	r3, #160	; 0xa0
 8002eb0:	d902      	bls.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	e013      	b.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eb8:	2301      	movs	r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e010      	b.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d902      	bls.n	8002eca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	e00a      	b.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d102      	bne.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	e004      	b.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b70      	cmp	r3, #112	; 0x70
 8002eda:	d101      	bne.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002edc:	2301      	movs	r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 0207 	bic.w	r2, r3, #7
 8002ee8:	4909      	ldr	r1, [pc, #36]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40022000 	.word	0x40022000

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f20:	2300      	movs	r3, #0
 8002f22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 809e 	beq.w	800306e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f36:	4b46      	ldr	r3, [pc, #280]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f68:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a39      	ldr	r2, [pc, #228]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f74:	f7fe fe52 	bl	8001c1c <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f7a:	e009      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7c:	f7fe fe4e 	bl	8001c1c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d902      	bls.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f8e:	e005      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f90:	4b30      	ldr	r3, [pc, #192]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d15a      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01e      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d019      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fca:	4b21      	ldr	r3, [pc, #132]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d016      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fe0e 	bl	8001c1c <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003002:	e00b      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fe0a 	bl	8001c1c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d902      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	74fb      	strb	r3, [r7, #19]
            break;
 800301a:	e006      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ec      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4904      	ldr	r1, [pc, #16]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003046:	e009      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	74bb      	strb	r3, [r7, #18]
 800304c:	e006      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305c:	7c7b      	ldrb	r3, [r7, #17]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b6e      	ldr	r3, [pc, #440]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	4a6d      	ldr	r2, [pc, #436]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307a:	4b68      	ldr	r3, [pc, #416]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f023 0203 	bic.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4964      	ldr	r1, [pc, #400]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309c:	4b5f      	ldr	r3, [pc, #380]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 020c 	bic.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	495c      	ldr	r1, [pc, #368]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030be:	4b57      	ldr	r3, [pc, #348]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4953      	ldr	r1, [pc, #332]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030e0:	4b4e      	ldr	r3, [pc, #312]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	494b      	ldr	r1, [pc, #300]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003102:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4942      	ldr	r1, [pc, #264]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003124:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	493a      	ldr	r1, [pc, #232]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003146:	4b35      	ldr	r3, [pc, #212]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	4931      	ldr	r1, [pc, #196]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003168:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	4929      	ldr	r1, [pc, #164]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4920      	ldr	r1, [pc, #128]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	4918      	ldr	r1, [pc, #96]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ca:	d105      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a12      	ldr	r2, [pc, #72]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003202:	d105      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a04      	ldr	r2, [pc, #16]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800320a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800320e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003210:	7cbb      	ldrb	r3, [r7, #18]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e040      	b.n	80032d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fac8 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2224      	movs	r2, #36	; 0x24
 800326c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f98c 	bl	800359c <UART_SetConfig>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e022      	b.n	80032d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fc94 	bl	8003bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fd1b 	bl	8003d08 <UART_CheckIdleState>
 80032d2:	4603      	mov	r3, r0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	f040 8081 	bne.w	80033f8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_UART_Transmit+0x26>
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e079      	b.n	80033fa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_UART_Transmit+0x38>
 8003310:	2302      	movs	r3, #2
 8003312:	e072      	b.n	80033fa <HAL_UART_Transmit+0x11e>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2221      	movs	r2, #33	; 0x21
 8003326:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003328:	f7fe fc78 	bl	8001c1c <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	d108      	bne.n	800335a <HAL_UART_Transmit+0x7e>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d104      	bne.n	800335a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e003      	b.n	8003362 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800336a:	e02d      	b.n	80033c8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2200      	movs	r2, #0
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fd0b 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e039      	b.n	80033fa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	881a      	ldrh	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	b292      	uxth	r2, r2
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	3302      	adds	r3, #2
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e008      	b.n	80033b6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b292      	uxth	r2, r2
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	3301      	adds	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1cb      	bne.n	800336c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2200      	movs	r2, #0
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fcd7 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e005      	b.n	80033fa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003416:	2b20      	cmp	r3, #32
 8003418:	f040 80bb 	bne.w	8003592 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_UART_Receive+0x26>
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b3      	b.n	8003594 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_UART_Receive+0x38>
 8003436:	2302      	movs	r3, #2
 8003438:	e0ac      	b.n	8003594 <HAL_UART_Receive+0x192>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2222      	movs	r2, #34	; 0x22
 800344c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800344e:	f7fe fbe5 	bl	8001c1c <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d10e      	bne.n	800348c <HAL_UART_Receive+0x8a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_UART_Receive+0x80>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f240 12ff 	movw	r2, #511	; 0x1ff
 800347c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003480:	e02d      	b.n	80034de <HAL_UART_Receive+0xdc>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	22ff      	movs	r2, #255	; 0xff
 8003486:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800348a:	e028      	b.n	80034de <HAL_UART_Receive+0xdc>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_UART_Receive+0xae>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <HAL_UART_Receive+0xa4>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	22ff      	movs	r2, #255	; 0xff
 80034a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034a4:	e01b      	b.n	80034de <HAL_UART_Receive+0xdc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	227f      	movs	r2, #127	; 0x7f
 80034aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ae:	e016      	b.n	80034de <HAL_UART_Receive+0xdc>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b8:	d10d      	bne.n	80034d6 <HAL_UART_Receive+0xd4>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <HAL_UART_Receive+0xca>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	227f      	movs	r2, #127	; 0x7f
 80034c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ca:	e008      	b.n	80034de <HAL_UART_Receive+0xdc>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	223f      	movs	r2, #63	; 0x3f
 80034d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034d4:	e003      	b.n	80034de <HAL_UART_Receive+0xdc>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ee:	d108      	bne.n	8003502 <HAL_UART_Receive+0x100>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e003      	b.n	800350a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003512:	e033      	b.n	800357c <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2200      	movs	r2, #0
 800351c:	2120      	movs	r1, #32
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fc37 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e032      	b.n	8003594 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10c      	bne.n	800354e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800353a:	b29a      	uxth	r2, r3
 800353c:	8a7b      	ldrh	r3, [r7, #18]
 800353e:	4013      	ands	r3, r2
 8003540:	b29a      	uxth	r2, r3
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	3302      	adds	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e00d      	b.n	800356a <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003554:	b29b      	uxth	r3, r3
 8003556:	b2da      	uxtb	r2, r3
 8003558:	8a7b      	ldrh	r3, [r7, #18]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4013      	ands	r3, r2
 800355e:	b2da      	uxtb	r2, r3
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	3301      	adds	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1c5      	bne.n	8003514 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800359c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80035a0:	b08a      	sub	sp, #40	; 0x28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4bbc      	ldr	r3, [pc, #752]	; (80038c4 <UART_SetConfig+0x328>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035da:	430b      	orrs	r3, r1
 80035dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4ab2      	ldr	r2, [pc, #712]	; (80038c8 <UART_SetConfig+0x32c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4313      	orrs	r3, r2
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4aa9      	ldr	r2, [pc, #676]	; (80038cc <UART_SetConfig+0x330>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d126      	bne.n	800367a <UART_SetConfig+0xde>
 800362c:	4ba8      	ldr	r3, [pc, #672]	; (80038d0 <UART_SetConfig+0x334>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b03      	cmp	r3, #3
 8003638:	d81a      	bhi.n	8003670 <UART_SetConfig+0xd4>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <UART_SetConfig+0xa4>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	08003661 	.word	0x08003661
 8003648:	08003659 	.word	0x08003659
 800364c:	08003669 	.word	0x08003669
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003656:	e0ab      	b.n	80037b0 <UART_SetConfig+0x214>
 8003658:	2302      	movs	r3, #2
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365e:	e0a7      	b.n	80037b0 <UART_SetConfig+0x214>
 8003660:	2304      	movs	r3, #4
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003666:	e0a3      	b.n	80037b0 <UART_SetConfig+0x214>
 8003668:	2308      	movs	r3, #8
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366e:	e09f      	b.n	80037b0 <UART_SetConfig+0x214>
 8003670:	2310      	movs	r3, #16
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	bf00      	nop
 8003678:	e09a      	b.n	80037b0 <UART_SetConfig+0x214>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a95      	ldr	r2, [pc, #596]	; (80038d4 <UART_SetConfig+0x338>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d138      	bne.n	80036f6 <UART_SetConfig+0x15a>
 8003684:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <UART_SetConfig+0x334>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d82c      	bhi.n	80036ec <UART_SetConfig+0x150>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0xfc>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036cd 	.word	0x080036cd
 800369c:	080036ed 	.word	0x080036ed
 80036a0:	080036ed 	.word	0x080036ed
 80036a4:	080036ed 	.word	0x080036ed
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036ed 	.word	0x080036ed
 80036b0:	080036ed 	.word	0x080036ed
 80036b4:	080036ed 	.word	0x080036ed
 80036b8:	080036d5 	.word	0x080036d5
 80036bc:	080036ed 	.word	0x080036ed
 80036c0:	080036ed 	.word	0x080036ed
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036e5 	.word	0x080036e5
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e06d      	b.n	80037b0 <UART_SetConfig+0x214>
 80036d4:	2302      	movs	r3, #2
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e069      	b.n	80037b0 <UART_SetConfig+0x214>
 80036dc:	2304      	movs	r3, #4
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e065      	b.n	80037b0 <UART_SetConfig+0x214>
 80036e4:	2308      	movs	r3, #8
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e061      	b.n	80037b0 <UART_SetConfig+0x214>
 80036ec:	2310      	movs	r3, #16
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f2:	bf00      	nop
 80036f4:	e05c      	b.n	80037b0 <UART_SetConfig+0x214>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a77      	ldr	r2, [pc, #476]	; (80038d8 <UART_SetConfig+0x33c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d125      	bne.n	800374c <UART_SetConfig+0x1b0>
 8003700:	4b73      	ldr	r3, [pc, #460]	; (80038d0 <UART_SetConfig+0x334>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800370a:	2b10      	cmp	r3, #16
 800370c:	d011      	beq.n	8003732 <UART_SetConfig+0x196>
 800370e:	2b10      	cmp	r3, #16
 8003710:	d802      	bhi.n	8003718 <UART_SetConfig+0x17c>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <UART_SetConfig+0x186>
 8003716:	e014      	b.n	8003742 <UART_SetConfig+0x1a6>
 8003718:	2b20      	cmp	r3, #32
 800371a:	d006      	beq.n	800372a <UART_SetConfig+0x18e>
 800371c:	2b30      	cmp	r3, #48	; 0x30
 800371e:	d00c      	beq.n	800373a <UART_SetConfig+0x19e>
 8003720:	e00f      	b.n	8003742 <UART_SetConfig+0x1a6>
 8003722:	2300      	movs	r3, #0
 8003724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003728:	e042      	b.n	80037b0 <UART_SetConfig+0x214>
 800372a:	2302      	movs	r3, #2
 800372c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003730:	e03e      	b.n	80037b0 <UART_SetConfig+0x214>
 8003732:	2304      	movs	r3, #4
 8003734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003738:	e03a      	b.n	80037b0 <UART_SetConfig+0x214>
 800373a:	2308      	movs	r3, #8
 800373c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003740:	e036      	b.n	80037b0 <UART_SetConfig+0x214>
 8003742:	2310      	movs	r3, #16
 8003744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003748:	bf00      	nop
 800374a:	e031      	b.n	80037b0 <UART_SetConfig+0x214>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <UART_SetConfig+0x32c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d129      	bne.n	80037aa <UART_SetConfig+0x20e>
 8003756:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <UART_SetConfig+0x334>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d014      	beq.n	8003790 <UART_SetConfig+0x1f4>
 8003766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376a:	d802      	bhi.n	8003772 <UART_SetConfig+0x1d6>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <UART_SetConfig+0x1e4>
 8003770:	e016      	b.n	80037a0 <UART_SetConfig+0x204>
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d007      	beq.n	8003788 <UART_SetConfig+0x1ec>
 8003778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800377c:	d00c      	beq.n	8003798 <UART_SetConfig+0x1fc>
 800377e:	e00f      	b.n	80037a0 <UART_SetConfig+0x204>
 8003780:	2300      	movs	r3, #0
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e013      	b.n	80037b0 <UART_SetConfig+0x214>
 8003788:	2302      	movs	r3, #2
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e00f      	b.n	80037b0 <UART_SetConfig+0x214>
 8003790:	2304      	movs	r3, #4
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e00b      	b.n	80037b0 <UART_SetConfig+0x214>
 8003798:	2308      	movs	r3, #8
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e007      	b.n	80037b0 <UART_SetConfig+0x214>
 80037a0:	2310      	movs	r3, #16
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <UART_SetConfig+0x214>
 80037aa:	2310      	movs	r3, #16
 80037ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a44      	ldr	r2, [pc, #272]	; (80038c8 <UART_SetConfig+0x32c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f040 80fb 	bne.w	80039b2 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d824      	bhi.n	800380e <UART_SetConfig+0x272>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <UART_SetConfig+0x230>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	0800380f 	.word	0x0800380f
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	080037ff 	.word	0x080037ff
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800380f 	.word	0x0800380f
 80037ec:	08003807 	.word	0x08003807
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7ff fb04 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 80037f4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037f6:	e00d      	b.n	8003814 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80037f8:	4b38      	ldr	r3, [pc, #224]	; (80038dc <UART_SetConfig+0x340>)
 80037fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037fc:	e00a      	b.n	8003814 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80037fe:	f7ff fa67 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003802:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003804:	e006      	b.n	8003814 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800380c:	e002      	b.n	8003814 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	76fb      	strb	r3, [r7, #27]
        break;
 8003812:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 81c8 	beq.w	8003bac <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d305      	bcc.n	8003838 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	d902      	bls.n	800383e <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	76fb      	strb	r3, [r7, #27]
 800383c:	e1b6      	b.n	8003bac <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800383e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003842:	2b08      	cmp	r3, #8
 8003844:	f200 80a2 	bhi.w	800398c <UART_SetConfig+0x3f0>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <UART_SetConfig+0x2b4>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003875 	.word	0x08003875
 8003854:	0800398d 	.word	0x0800398d
 8003858:	080038e1 	.word	0x080038e1
 800385c:	0800398d 	.word	0x0800398d
 8003860:	08003915 	.word	0x08003915
 8003864:	0800398d 	.word	0x0800398d
 8003868:	0800398d 	.word	0x0800398d
 800386c:	0800398d 	.word	0x0800398d
 8003870:	08003963 	.word	0x08003963
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003874:	f7ff fac2 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8003878:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4619      	mov	r1, r3
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	f04f 0400 	mov.w	r4, #0
 800388a:	0214      	lsls	r4, r2, #8
 800388c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003890:	020b      	lsls	r3, r1, #8
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6852      	ldr	r2, [r2, #4]
 8003896:	0852      	lsrs	r2, r2, #1
 8003898:	4611      	mov	r1, r2
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	eb13 0b01 	adds.w	fp, r3, r1
 80038a2:	eb44 0c02 	adc.w	ip, r4, r2
 80038a6:	4658      	mov	r0, fp
 80038a8:	4661      	mov	r1, ip
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f04f 0400 	mov.w	r4, #0
 80038b2:	461a      	mov	r2, r3
 80038b4:	4623      	mov	r3, r4
 80038b6:	f7fd f9e7 	bl	8000c88 <__aeabi_uldivmod>
 80038ba:	4603      	mov	r3, r0
 80038bc:	460c      	mov	r4, r1
 80038be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80038c0:	e067      	b.n	8003992 <UART_SetConfig+0x3f6>
 80038c2:	bf00      	nop
 80038c4:	efff69f3 	.word	0xefff69f3
 80038c8:	40008000 	.word	0x40008000
 80038cc:	40013800 	.word	0x40013800
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40004400 	.word	0x40004400
 80038d8:	40004800 	.word	0x40004800
 80038dc:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	f04f 0400 	mov.w	r4, #0
 80038ea:	49ae      	ldr	r1, [pc, #696]	; (8003ba4 <UART_SetConfig+0x608>)
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	eb13 0b01 	adds.w	fp, r3, r1
 80038f4:	eb44 0c02 	adc.w	ip, r4, r2
 80038f8:	4658      	mov	r0, fp
 80038fa:	4661      	mov	r1, ip
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f04f 0400 	mov.w	r4, #0
 8003904:	461a      	mov	r2, r3
 8003906:	4623      	mov	r3, r4
 8003908:	f7fd f9be 	bl	8000c88 <__aeabi_uldivmod>
 800390c:	4603      	mov	r3, r0
 800390e:	460c      	mov	r4, r1
 8003910:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003912:	e03e      	b.n	8003992 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003914:	f7ff f9dc 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003918:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	f04f 0400 	mov.w	r4, #0
 800392a:	0214      	lsls	r4, r2, #8
 800392c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003930:	020b      	lsls	r3, r1, #8
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6852      	ldr	r2, [r2, #4]
 8003936:	0852      	lsrs	r2, r2, #1
 8003938:	4611      	mov	r1, r2
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	eb13 0b01 	adds.w	fp, r3, r1
 8003942:	eb44 0c02 	adc.w	ip, r4, r2
 8003946:	4658      	mov	r0, fp
 8003948:	4661      	mov	r1, ip
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f04f 0400 	mov.w	r4, #0
 8003952:	461a      	mov	r2, r3
 8003954:	4623      	mov	r3, r4
 8003956:	f7fd f997 	bl	8000c88 <__aeabi_uldivmod>
 800395a:	4603      	mov	r3, r0
 800395c:	460c      	mov	r4, r1
 800395e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003960:	e017      	b.n	8003992 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	f04f 0400 	mov.w	r4, #0
 800396c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003970:	f144 0100 	adc.w	r1, r4, #0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	f7fd f982 	bl	8000c88 <__aeabi_uldivmod>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800398a:	e002      	b.n	8003992 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	76fb      	strb	r3, [r7, #27]
            break;
 8003990:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003998:	d308      	bcc.n	80039ac <UART_SetConfig+0x410>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a0:	d204      	bcs.n	80039ac <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	e0ff      	b.n	8003bac <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e0fc      	b.n	8003bac <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ba:	f040 8083 	bne.w	8003ac4 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80039be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d85e      	bhi.n	8003a84 <UART_SetConfig+0x4e8>
 80039c6:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <UART_SetConfig+0x430>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	08003a31 	.word	0x08003a31
 80039d8:	08003a85 	.word	0x08003a85
 80039dc:	08003a4d 	.word	0x08003a4d
 80039e0:	08003a85 	.word	0x08003a85
 80039e4:	08003a85 	.word	0x08003a85
 80039e8:	08003a85 	.word	0x08003a85
 80039ec:	08003a6d 	.word	0x08003a6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7ff fa04 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 80039f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	005a      	lsls	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a0e:	e03c      	b.n	8003a8a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7ff fa0a 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 8003a14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	005a      	lsls	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a2e:	e02c      	b.n	8003a8a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003a3a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6852      	ldr	r2, [r2, #4]
 8003a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a4a:	e01e      	b.n	8003a8a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4c:	f7ff f940 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003a50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	005a      	lsls	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a6a:	e00e      	b.n	8003a8a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a82:	e002      	b.n	8003a8a <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	76fb      	strb	r3, [r7, #27]
        break;
 8003a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b0f      	cmp	r3, #15
 8003a8e:	d916      	bls.n	8003abe <UART_SetConfig+0x522>
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a96:	d212      	bcs.n	8003abe <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f023 030f 	bic.w	r3, r3, #15
 8003aa0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	89fb      	ldrh	r3, [r7, #14]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	89fa      	ldrh	r2, [r7, #14]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	e076      	b.n	8003bac <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	76fb      	strb	r3, [r7, #27]
 8003ac2:	e073      	b.n	8003bac <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8003ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d85c      	bhi.n	8003b86 <UART_SetConfig+0x5ea>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x538>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b17 	.word	0x08003b17
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b87 	.word	0x08003b87
 8003ae4:	08003b51 	.word	0x08003b51
 8003ae8:	08003b87 	.word	0x08003b87
 8003aec:	08003b87 	.word	0x08003b87
 8003af0:	08003b87 	.word	0x08003b87
 8003af4:	08003b6f 	.word	0x08003b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7ff f980 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8003afc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	085a      	lsrs	r2, r3, #1
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b14:	e03a      	b.n	8003b8c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b16:	f7ff f987 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 8003b1a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	085a      	lsrs	r2, r3, #1
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	441a      	add	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b32:	e02b      	b.n	8003b8c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003b3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6852      	ldr	r2, [r2, #4]
 8003b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b4e:	e01d      	b.n	8003b8c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b50:	f7ff f8be 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003b54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085a      	lsrs	r2, r3, #1
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	441a      	add	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b6c:	e00e      	b.n	8003b8c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b84:	e002      	b.n	8003b8c <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	76fb      	strb	r3, [r7, #27]
        break;
 8003b8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d90a      	bls.n	8003ba8 <UART_SetConfig+0x60c>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d206      	bcs.n	8003ba8 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	e003      	b.n	8003bac <UART_SetConfig+0x610>
 8003ba4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003bb8:	7efb      	ldrb	r3, [r7, #27]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3728      	adds	r7, #40	; 0x28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01a      	beq.n	8003cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc2:	d10a      	bne.n	8003cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d16:	f7fd ff81 	bl	8001c1c <HAL_GetTick>
 8003d1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d10e      	bne.n	8003d48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f82a 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e020      	b.n	8003d8a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d10e      	bne.n	8003d74 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f814 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e00a      	b.n	8003d8a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	e05d      	b.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d059      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dac:	f7fd ff36 	bl	8001c1c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11b      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e042      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02b      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d123      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e20:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e30:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e00f      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d092      	beq.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <calloc>:
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <calloc+0xc>)
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	f000 b84f 	b.w	8003f32 <_calloc_r>
 8003e94:	2000000c 	.word	0x2000000c

08003e98 <__errno>:
 8003e98:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <__errno+0x8>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	2000000c 	.word	0x2000000c

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	4e0d      	ldr	r6, [pc, #52]	; (8003edc <__libc_init_array+0x38>)
 8003ea8:	4c0d      	ldr	r4, [pc, #52]	; (8003ee0 <__libc_init_array+0x3c>)
 8003eaa:	1ba4      	subs	r4, r4, r6
 8003eac:	10a4      	asrs	r4, r4, #2
 8003eae:	2500      	movs	r5, #0
 8003eb0:	42a5      	cmp	r5, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	4e0b      	ldr	r6, [pc, #44]	; (8003ee4 <__libc_init_array+0x40>)
 8003eb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ee8 <__libc_init_array+0x44>)
 8003eb8:	f003 fd84 	bl	80079c4 <_init>
 8003ebc:	1ba4      	subs	r4, r4, r6
 8003ebe:	10a4      	asrs	r4, r4, #2
 8003ec0:	2500      	movs	r5, #0
 8003ec2:	42a5      	cmp	r5, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ecc:	4798      	blx	r3
 8003ece:	3501      	adds	r5, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed6:	4798      	blx	r3
 8003ed8:	3501      	adds	r5, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	08007ed4 	.word	0x08007ed4
 8003ee0:	08007ed4 	.word	0x08007ed4
 8003ee4:	08007ed4 	.word	0x08007ed4
 8003ee8:	08007ed8 	.word	0x08007ed8

08003eec <malloc>:
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <malloc+0xc>)
 8003eee:	4601      	mov	r1, r0
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f000 b87b 	b.w	8003fec <_malloc_r>
 8003ef6:	bf00      	nop
 8003ef8:	2000000c 	.word	0x2000000c

08003efc <free>:
 8003efc:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <free+0xc>)
 8003efe:	4601      	mov	r1, r0
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	f000 b825 	b.w	8003f50 <_free_r>
 8003f06:	bf00      	nop
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <memcpy>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	1e43      	subs	r3, r0, #1
 8003f10:	440a      	add	r2, r1
 8003f12:	4291      	cmp	r1, r2
 8003f14:	d100      	bne.n	8003f18 <memcpy+0xc>
 8003f16:	bd10      	pop	{r4, pc}
 8003f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f20:	e7f7      	b.n	8003f12 <memcpy+0x6>

08003f22 <memset>:
 8003f22:	4402      	add	r2, r0
 8003f24:	4603      	mov	r3, r0
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d100      	bne.n	8003f2c <memset+0xa>
 8003f2a:	4770      	bx	lr
 8003f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f30:	e7f9      	b.n	8003f26 <memset+0x4>

08003f32 <_calloc_r>:
 8003f32:	b538      	push	{r3, r4, r5, lr}
 8003f34:	fb02 f401 	mul.w	r4, r2, r1
 8003f38:	4621      	mov	r1, r4
 8003f3a:	f000 f857 	bl	8003fec <_malloc_r>
 8003f3e:	4605      	mov	r5, r0
 8003f40:	b118      	cbz	r0, 8003f4a <_calloc_r+0x18>
 8003f42:	4622      	mov	r2, r4
 8003f44:	2100      	movs	r1, #0
 8003f46:	f7ff ffec 	bl	8003f22 <memset>
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003f50 <_free_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4605      	mov	r5, r0
 8003f54:	2900      	cmp	r1, #0
 8003f56:	d045      	beq.n	8003fe4 <_free_r+0x94>
 8003f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f5c:	1f0c      	subs	r4, r1, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bfb8      	it	lt
 8003f62:	18e4      	addlt	r4, r4, r3
 8003f64:	f002 f87c 	bl	8006060 <__malloc_lock>
 8003f68:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <_free_r+0x98>)
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	b933      	cbnz	r3, 8003f7e <_free_r+0x2e>
 8003f70:	6063      	str	r3, [r4, #4]
 8003f72:	6014      	str	r4, [r2, #0]
 8003f74:	4628      	mov	r0, r5
 8003f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7a:	f002 b872 	b.w	8006062 <__malloc_unlock>
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	d90c      	bls.n	8003f9c <_free_r+0x4c>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	1862      	adds	r2, r4, r1
 8003f86:	4293      	cmp	r3, r2
 8003f88:	bf04      	itt	eq
 8003f8a:	681a      	ldreq	r2, [r3, #0]
 8003f8c:	685b      	ldreq	r3, [r3, #4]
 8003f8e:	6063      	str	r3, [r4, #4]
 8003f90:	bf04      	itt	eq
 8003f92:	1852      	addeq	r2, r2, r1
 8003f94:	6022      	streq	r2, [r4, #0]
 8003f96:	6004      	str	r4, [r0, #0]
 8003f98:	e7ec      	b.n	8003f74 <_free_r+0x24>
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	b10a      	cbz	r2, 8003fa4 <_free_r+0x54>
 8003fa0:	42a2      	cmp	r2, r4
 8003fa2:	d9fa      	bls.n	8003f9a <_free_r+0x4a>
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	1858      	adds	r0, r3, r1
 8003fa8:	42a0      	cmp	r0, r4
 8003faa:	d10b      	bne.n	8003fc4 <_free_r+0x74>
 8003fac:	6820      	ldr	r0, [r4, #0]
 8003fae:	4401      	add	r1, r0
 8003fb0:	1858      	adds	r0, r3, r1
 8003fb2:	4282      	cmp	r2, r0
 8003fb4:	6019      	str	r1, [r3, #0]
 8003fb6:	d1dd      	bne.n	8003f74 <_free_r+0x24>
 8003fb8:	6810      	ldr	r0, [r2, #0]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	4401      	add	r1, r0
 8003fc0:	6019      	str	r1, [r3, #0]
 8003fc2:	e7d7      	b.n	8003f74 <_free_r+0x24>
 8003fc4:	d902      	bls.n	8003fcc <_free_r+0x7c>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	e7d3      	b.n	8003f74 <_free_r+0x24>
 8003fcc:	6820      	ldr	r0, [r4, #0]
 8003fce:	1821      	adds	r1, r4, r0
 8003fd0:	428a      	cmp	r2, r1
 8003fd2:	bf04      	itt	eq
 8003fd4:	6811      	ldreq	r1, [r2, #0]
 8003fd6:	6852      	ldreq	r2, [r2, #4]
 8003fd8:	6062      	str	r2, [r4, #4]
 8003fda:	bf04      	itt	eq
 8003fdc:	1809      	addeq	r1, r1, r0
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	605c      	str	r4, [r3, #4]
 8003fe2:	e7c7      	b.n	8003f74 <_free_r+0x24>
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200001fc 	.word	0x200001fc

08003fec <_malloc_r>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	1ccd      	adds	r5, r1, #3
 8003ff0:	f025 0503 	bic.w	r5, r5, #3
 8003ff4:	3508      	adds	r5, #8
 8003ff6:	2d0c      	cmp	r5, #12
 8003ff8:	bf38      	it	cc
 8003ffa:	250c      	movcc	r5, #12
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	4606      	mov	r6, r0
 8004000:	db01      	blt.n	8004006 <_malloc_r+0x1a>
 8004002:	42a9      	cmp	r1, r5
 8004004:	d903      	bls.n	800400e <_malloc_r+0x22>
 8004006:	230c      	movs	r3, #12
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	2000      	movs	r0, #0
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	f002 f827 	bl	8006060 <__malloc_lock>
 8004012:	4a21      	ldr	r2, [pc, #132]	; (8004098 <_malloc_r+0xac>)
 8004014:	6814      	ldr	r4, [r2, #0]
 8004016:	4621      	mov	r1, r4
 8004018:	b991      	cbnz	r1, 8004040 <_malloc_r+0x54>
 800401a:	4c20      	ldr	r4, [pc, #128]	; (800409c <_malloc_r+0xb0>)
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	b91b      	cbnz	r3, 8004028 <_malloc_r+0x3c>
 8004020:	4630      	mov	r0, r6
 8004022:	f000 fa9b 	bl	800455c <_sbrk_r>
 8004026:	6020      	str	r0, [r4, #0]
 8004028:	4629      	mov	r1, r5
 800402a:	4630      	mov	r0, r6
 800402c:	f000 fa96 	bl	800455c <_sbrk_r>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d124      	bne.n	800407e <_malloc_r+0x92>
 8004034:	230c      	movs	r3, #12
 8004036:	6033      	str	r3, [r6, #0]
 8004038:	4630      	mov	r0, r6
 800403a:	f002 f812 	bl	8006062 <__malloc_unlock>
 800403e:	e7e4      	b.n	800400a <_malloc_r+0x1e>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	1b5b      	subs	r3, r3, r5
 8004044:	d418      	bmi.n	8004078 <_malloc_r+0x8c>
 8004046:	2b0b      	cmp	r3, #11
 8004048:	d90f      	bls.n	800406a <_malloc_r+0x7e>
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	50cd      	str	r5, [r1, r3]
 800404e:	18cc      	adds	r4, r1, r3
 8004050:	4630      	mov	r0, r6
 8004052:	f002 f806 	bl	8006062 <__malloc_unlock>
 8004056:	f104 000b 	add.w	r0, r4, #11
 800405a:	1d23      	adds	r3, r4, #4
 800405c:	f020 0007 	bic.w	r0, r0, #7
 8004060:	1ac3      	subs	r3, r0, r3
 8004062:	d0d3      	beq.n	800400c <_malloc_r+0x20>
 8004064:	425a      	negs	r2, r3
 8004066:	50e2      	str	r2, [r4, r3]
 8004068:	e7d0      	b.n	800400c <_malloc_r+0x20>
 800406a:	428c      	cmp	r4, r1
 800406c:	684b      	ldr	r3, [r1, #4]
 800406e:	bf16      	itet	ne
 8004070:	6063      	strne	r3, [r4, #4]
 8004072:	6013      	streq	r3, [r2, #0]
 8004074:	460c      	movne	r4, r1
 8004076:	e7eb      	b.n	8004050 <_malloc_r+0x64>
 8004078:	460c      	mov	r4, r1
 800407a:	6849      	ldr	r1, [r1, #4]
 800407c:	e7cc      	b.n	8004018 <_malloc_r+0x2c>
 800407e:	1cc4      	adds	r4, r0, #3
 8004080:	f024 0403 	bic.w	r4, r4, #3
 8004084:	42a0      	cmp	r0, r4
 8004086:	d005      	beq.n	8004094 <_malloc_r+0xa8>
 8004088:	1a21      	subs	r1, r4, r0
 800408a:	4630      	mov	r0, r6
 800408c:	f000 fa66 	bl	800455c <_sbrk_r>
 8004090:	3001      	adds	r0, #1
 8004092:	d0cf      	beq.n	8004034 <_malloc_r+0x48>
 8004094:	6025      	str	r5, [r4, #0]
 8004096:	e7db      	b.n	8004050 <_malloc_r+0x64>
 8004098:	200001fc 	.word	0x200001fc
 800409c:	20000200 	.word	0x20000200

080040a0 <_scanf_float>:
 80040a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a4:	469a      	mov	sl, r3
 80040a6:	688b      	ldr	r3, [r1, #8]
 80040a8:	4616      	mov	r6, r2
 80040aa:	1e5a      	subs	r2, r3, #1
 80040ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040b0:	b087      	sub	sp, #28
 80040b2:	bf83      	ittte	hi
 80040b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80040b8:	189b      	addhi	r3, r3, r2
 80040ba:	9301      	strhi	r3, [sp, #4]
 80040bc:	2300      	movls	r3, #0
 80040be:	bf86      	itte	hi
 80040c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040c4:	608b      	strhi	r3, [r1, #8]
 80040c6:	9301      	strls	r3, [sp, #4]
 80040c8:	680b      	ldr	r3, [r1, #0]
 80040ca:	4688      	mov	r8, r1
 80040cc:	f04f 0b00 	mov.w	fp, #0
 80040d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80040d4:	f848 3b1c 	str.w	r3, [r8], #28
 80040d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80040dc:	4607      	mov	r7, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	4645      	mov	r5, r8
 80040e2:	465a      	mov	r2, fp
 80040e4:	46d9      	mov	r9, fp
 80040e6:	f8cd b008 	str.w	fp, [sp, #8]
 80040ea:	68a1      	ldr	r1, [r4, #8]
 80040ec:	b181      	cbz	r1, 8004110 <_scanf_float+0x70>
 80040ee:	6833      	ldr	r3, [r6, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b49      	cmp	r3, #73	; 0x49
 80040f4:	d071      	beq.n	80041da <_scanf_float+0x13a>
 80040f6:	d84d      	bhi.n	8004194 <_scanf_float+0xf4>
 80040f8:	2b39      	cmp	r3, #57	; 0x39
 80040fa:	d840      	bhi.n	800417e <_scanf_float+0xde>
 80040fc:	2b31      	cmp	r3, #49	; 0x31
 80040fe:	f080 8088 	bcs.w	8004212 <_scanf_float+0x172>
 8004102:	2b2d      	cmp	r3, #45	; 0x2d
 8004104:	f000 8090 	beq.w	8004228 <_scanf_float+0x188>
 8004108:	d815      	bhi.n	8004136 <_scanf_float+0x96>
 800410a:	2b2b      	cmp	r3, #43	; 0x2b
 800410c:	f000 808c 	beq.w	8004228 <_scanf_float+0x188>
 8004110:	f1b9 0f00 	cmp.w	r9, #0
 8004114:	d003      	beq.n	800411e <_scanf_float+0x7e>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	3a01      	subs	r2, #1
 8004120:	2a01      	cmp	r2, #1
 8004122:	f200 80ea 	bhi.w	80042fa <_scanf_float+0x25a>
 8004126:	4545      	cmp	r5, r8
 8004128:	f200 80dc 	bhi.w	80042e4 <_scanf_float+0x244>
 800412c:	2601      	movs	r6, #1
 800412e:	4630      	mov	r0, r6
 8004130:	b007      	add	sp, #28
 8004132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004136:	2b2e      	cmp	r3, #46	; 0x2e
 8004138:	f000 809f 	beq.w	800427a <_scanf_float+0x1da>
 800413c:	2b30      	cmp	r3, #48	; 0x30
 800413e:	d1e7      	bne.n	8004110 <_scanf_float+0x70>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004146:	d064      	beq.n	8004212 <_scanf_float+0x172>
 8004148:	9b01      	ldr	r3, [sp, #4]
 800414a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800414e:	6020      	str	r0, [r4, #0]
 8004150:	f109 0901 	add.w	r9, r9, #1
 8004154:	b11b      	cbz	r3, 800415e <_scanf_float+0xbe>
 8004156:	3b01      	subs	r3, #1
 8004158:	3101      	adds	r1, #1
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	60a1      	str	r1, [r4, #8]
 800415e:	68a3      	ldr	r3, [r4, #8]
 8004160:	3b01      	subs	r3, #1
 8004162:	60a3      	str	r3, [r4, #8]
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	3301      	adds	r3, #1
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	6873      	ldr	r3, [r6, #4]
 800416c:	3b01      	subs	r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	6073      	str	r3, [r6, #4]
 8004172:	f340 80ac 	ble.w	80042ce <_scanf_float+0x22e>
 8004176:	6833      	ldr	r3, [r6, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	6033      	str	r3, [r6, #0]
 800417c:	e7b5      	b.n	80040ea <_scanf_float+0x4a>
 800417e:	2b45      	cmp	r3, #69	; 0x45
 8004180:	f000 8085 	beq.w	800428e <_scanf_float+0x1ee>
 8004184:	2b46      	cmp	r3, #70	; 0x46
 8004186:	d06a      	beq.n	800425e <_scanf_float+0x1be>
 8004188:	2b41      	cmp	r3, #65	; 0x41
 800418a:	d1c1      	bne.n	8004110 <_scanf_float+0x70>
 800418c:	2a01      	cmp	r2, #1
 800418e:	d1bf      	bne.n	8004110 <_scanf_float+0x70>
 8004190:	2202      	movs	r2, #2
 8004192:	e046      	b.n	8004222 <_scanf_float+0x182>
 8004194:	2b65      	cmp	r3, #101	; 0x65
 8004196:	d07a      	beq.n	800428e <_scanf_float+0x1ee>
 8004198:	d818      	bhi.n	80041cc <_scanf_float+0x12c>
 800419a:	2b54      	cmp	r3, #84	; 0x54
 800419c:	d066      	beq.n	800426c <_scanf_float+0x1cc>
 800419e:	d811      	bhi.n	80041c4 <_scanf_float+0x124>
 80041a0:	2b4e      	cmp	r3, #78	; 0x4e
 80041a2:	d1b5      	bne.n	8004110 <_scanf_float+0x70>
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	d146      	bne.n	8004236 <_scanf_float+0x196>
 80041a8:	f1b9 0f00 	cmp.w	r9, #0
 80041ac:	d145      	bne.n	800423a <_scanf_float+0x19a>
 80041ae:	6821      	ldr	r1, [r4, #0]
 80041b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80041b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80041b8:	d13f      	bne.n	800423a <_scanf_float+0x19a>
 80041ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80041be:	6021      	str	r1, [r4, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	e02e      	b.n	8004222 <_scanf_float+0x182>
 80041c4:	2b59      	cmp	r3, #89	; 0x59
 80041c6:	d01e      	beq.n	8004206 <_scanf_float+0x166>
 80041c8:	2b61      	cmp	r3, #97	; 0x61
 80041ca:	e7de      	b.n	800418a <_scanf_float+0xea>
 80041cc:	2b6e      	cmp	r3, #110	; 0x6e
 80041ce:	d0e9      	beq.n	80041a4 <_scanf_float+0x104>
 80041d0:	d815      	bhi.n	80041fe <_scanf_float+0x15e>
 80041d2:	2b66      	cmp	r3, #102	; 0x66
 80041d4:	d043      	beq.n	800425e <_scanf_float+0x1be>
 80041d6:	2b69      	cmp	r3, #105	; 0x69
 80041d8:	d19a      	bne.n	8004110 <_scanf_float+0x70>
 80041da:	f1bb 0f00 	cmp.w	fp, #0
 80041de:	d138      	bne.n	8004252 <_scanf_float+0x1b2>
 80041e0:	f1b9 0f00 	cmp.w	r9, #0
 80041e4:	d197      	bne.n	8004116 <_scanf_float+0x76>
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80041ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80041f0:	d195      	bne.n	800411e <_scanf_float+0x7e>
 80041f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80041f6:	6021      	str	r1, [r4, #0]
 80041f8:	f04f 0b01 	mov.w	fp, #1
 80041fc:	e011      	b.n	8004222 <_scanf_float+0x182>
 80041fe:	2b74      	cmp	r3, #116	; 0x74
 8004200:	d034      	beq.n	800426c <_scanf_float+0x1cc>
 8004202:	2b79      	cmp	r3, #121	; 0x79
 8004204:	d184      	bne.n	8004110 <_scanf_float+0x70>
 8004206:	f1bb 0f07 	cmp.w	fp, #7
 800420a:	d181      	bne.n	8004110 <_scanf_float+0x70>
 800420c:	f04f 0b08 	mov.w	fp, #8
 8004210:	e007      	b.n	8004222 <_scanf_float+0x182>
 8004212:	eb12 0f0b 	cmn.w	r2, fp
 8004216:	f47f af7b 	bne.w	8004110 <_scanf_float+0x70>
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004220:	6021      	str	r1, [r4, #0]
 8004222:	702b      	strb	r3, [r5, #0]
 8004224:	3501      	adds	r5, #1
 8004226:	e79a      	b.n	800415e <_scanf_float+0xbe>
 8004228:	6821      	ldr	r1, [r4, #0]
 800422a:	0608      	lsls	r0, r1, #24
 800422c:	f57f af70 	bpl.w	8004110 <_scanf_float+0x70>
 8004230:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004234:	e7f4      	b.n	8004220 <_scanf_float+0x180>
 8004236:	2a02      	cmp	r2, #2
 8004238:	d047      	beq.n	80042ca <_scanf_float+0x22a>
 800423a:	f1bb 0f01 	cmp.w	fp, #1
 800423e:	d003      	beq.n	8004248 <_scanf_float+0x1a8>
 8004240:	f1bb 0f04 	cmp.w	fp, #4
 8004244:	f47f af64 	bne.w	8004110 <_scanf_float+0x70>
 8004248:	f10b 0b01 	add.w	fp, fp, #1
 800424c:	fa5f fb8b 	uxtb.w	fp, fp
 8004250:	e7e7      	b.n	8004222 <_scanf_float+0x182>
 8004252:	f1bb 0f03 	cmp.w	fp, #3
 8004256:	d0f7      	beq.n	8004248 <_scanf_float+0x1a8>
 8004258:	f1bb 0f05 	cmp.w	fp, #5
 800425c:	e7f2      	b.n	8004244 <_scanf_float+0x1a4>
 800425e:	f1bb 0f02 	cmp.w	fp, #2
 8004262:	f47f af55 	bne.w	8004110 <_scanf_float+0x70>
 8004266:	f04f 0b03 	mov.w	fp, #3
 800426a:	e7da      	b.n	8004222 <_scanf_float+0x182>
 800426c:	f1bb 0f06 	cmp.w	fp, #6
 8004270:	f47f af4e 	bne.w	8004110 <_scanf_float+0x70>
 8004274:	f04f 0b07 	mov.w	fp, #7
 8004278:	e7d3      	b.n	8004222 <_scanf_float+0x182>
 800427a:	6821      	ldr	r1, [r4, #0]
 800427c:	0588      	lsls	r0, r1, #22
 800427e:	f57f af47 	bpl.w	8004110 <_scanf_float+0x70>
 8004282:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004286:	6021      	str	r1, [r4, #0]
 8004288:	f8cd 9008 	str.w	r9, [sp, #8]
 800428c:	e7c9      	b.n	8004222 <_scanf_float+0x182>
 800428e:	6821      	ldr	r1, [r4, #0]
 8004290:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004294:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004298:	d006      	beq.n	80042a8 <_scanf_float+0x208>
 800429a:	0548      	lsls	r0, r1, #21
 800429c:	f57f af38 	bpl.w	8004110 <_scanf_float+0x70>
 80042a0:	f1b9 0f00 	cmp.w	r9, #0
 80042a4:	f43f af3b 	beq.w	800411e <_scanf_float+0x7e>
 80042a8:	0588      	lsls	r0, r1, #22
 80042aa:	bf58      	it	pl
 80042ac:	9802      	ldrpl	r0, [sp, #8]
 80042ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80042b2:	bf58      	it	pl
 80042b4:	eba9 0000 	subpl.w	r0, r9, r0
 80042b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80042bc:	bf58      	it	pl
 80042be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80042c2:	6021      	str	r1, [r4, #0]
 80042c4:	f04f 0900 	mov.w	r9, #0
 80042c8:	e7ab      	b.n	8004222 <_scanf_float+0x182>
 80042ca:	2203      	movs	r2, #3
 80042cc:	e7a9      	b.n	8004222 <_scanf_float+0x182>
 80042ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80042d2:	9205      	str	r2, [sp, #20]
 80042d4:	4631      	mov	r1, r6
 80042d6:	4638      	mov	r0, r7
 80042d8:	4798      	blx	r3
 80042da:	9a05      	ldr	r2, [sp, #20]
 80042dc:	2800      	cmp	r0, #0
 80042de:	f43f af04 	beq.w	80040ea <_scanf_float+0x4a>
 80042e2:	e715      	b.n	8004110 <_scanf_float+0x70>
 80042e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042ec:	4632      	mov	r2, r6
 80042ee:	4638      	mov	r0, r7
 80042f0:	4798      	blx	r3
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	e715      	b.n	8004126 <_scanf_float+0x86>
 80042fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d80a      	bhi.n	8004318 <_scanf_float+0x278>
 8004302:	f1bb 0f02 	cmp.w	fp, #2
 8004306:	d968      	bls.n	80043da <_scanf_float+0x33a>
 8004308:	f1ab 0b03 	sub.w	fp, fp, #3
 800430c:	fa5f fb8b 	uxtb.w	fp, fp
 8004310:	eba5 0b0b 	sub.w	fp, r5, fp
 8004314:	455d      	cmp	r5, fp
 8004316:	d14b      	bne.n	80043b0 <_scanf_float+0x310>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	05da      	lsls	r2, r3, #23
 800431c:	d51f      	bpl.n	800435e <_scanf_float+0x2be>
 800431e:	055b      	lsls	r3, r3, #21
 8004320:	d468      	bmi.n	80043f4 <_scanf_float+0x354>
 8004322:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	2965      	cmp	r1, #101	; 0x65
 800432a:	f103 33ff 	add.w	r3, r3, #4294967295
 800432e:	f105 3bff 	add.w	fp, r5, #4294967295
 8004332:	6123      	str	r3, [r4, #16]
 8004334:	d00d      	beq.n	8004352 <_scanf_float+0x2b2>
 8004336:	2945      	cmp	r1, #69	; 0x45
 8004338:	d00b      	beq.n	8004352 <_scanf_float+0x2b2>
 800433a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800433e:	4632      	mov	r2, r6
 8004340:	4638      	mov	r0, r7
 8004342:	4798      	blx	r3
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800434a:	3b01      	subs	r3, #1
 800434c:	f1a5 0b02 	sub.w	fp, r5, #2
 8004350:	6123      	str	r3, [r4, #16]
 8004352:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004356:	4632      	mov	r2, r6
 8004358:	4638      	mov	r0, r7
 800435a:	4798      	blx	r3
 800435c:	465d      	mov	r5, fp
 800435e:	6826      	ldr	r6, [r4, #0]
 8004360:	f016 0610 	ands.w	r6, r6, #16
 8004364:	d17a      	bne.n	800445c <_scanf_float+0x3bc>
 8004366:	702e      	strb	r6, [r5, #0]
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d142      	bne.n	80043fa <_scanf_float+0x35a>
 8004374:	9b02      	ldr	r3, [sp, #8]
 8004376:	eba9 0303 	sub.w	r3, r9, r3
 800437a:	425a      	negs	r2, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d149      	bne.n	8004414 <_scanf_float+0x374>
 8004380:	2200      	movs	r2, #0
 8004382:	4641      	mov	r1, r8
 8004384:	4638      	mov	r0, r7
 8004386:	f000 ffaf 	bl	80052e8 <_strtod_r>
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	f8da 3000 	ldr.w	r3, [sl]
 8004390:	f015 0f02 	tst.w	r5, #2
 8004394:	f103 0204 	add.w	r2, r3, #4
 8004398:	ec59 8b10 	vmov	r8, r9, d0
 800439c:	f8ca 2000 	str.w	r2, [sl]
 80043a0:	d043      	beq.n	800442a <_scanf_float+0x38a>
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	e9c3 8900 	strd	r8, r9, [r3]
 80043a8:	68e3      	ldr	r3, [r4, #12]
 80043aa:	3301      	adds	r3, #1
 80043ac:	60e3      	str	r3, [r4, #12]
 80043ae:	e6be      	b.n	800412e <_scanf_float+0x8e>
 80043b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043b8:	4632      	mov	r2, r6
 80043ba:	4638      	mov	r0, r7
 80043bc:	4798      	blx	r3
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	6123      	str	r3, [r4, #16]
 80043c4:	e7a6      	b.n	8004314 <_scanf_float+0x274>
 80043c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043ce:	4632      	mov	r2, r6
 80043d0:	4638      	mov	r0, r7
 80043d2:	4798      	blx	r3
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	4545      	cmp	r5, r8
 80043dc:	d8f3      	bhi.n	80043c6 <_scanf_float+0x326>
 80043de:	e6a5      	b.n	800412c <_scanf_float+0x8c>
 80043e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043e8:	4632      	mov	r2, r6
 80043ea:	4638      	mov	r0, r7
 80043ec:	4798      	blx	r3
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	6123      	str	r3, [r4, #16]
 80043f4:	4545      	cmp	r5, r8
 80043f6:	d8f3      	bhi.n	80043e0 <_scanf_float+0x340>
 80043f8:	e698      	b.n	800412c <_scanf_float+0x8c>
 80043fa:	9b03      	ldr	r3, [sp, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0bf      	beq.n	8004380 <_scanf_float+0x2e0>
 8004400:	9904      	ldr	r1, [sp, #16]
 8004402:	230a      	movs	r3, #10
 8004404:	4632      	mov	r2, r6
 8004406:	3101      	adds	r1, #1
 8004408:	4638      	mov	r0, r7
 800440a:	f000 fff9 	bl	8005400 <_strtol_r>
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	9d04      	ldr	r5, [sp, #16]
 8004412:	1ac2      	subs	r2, r0, r3
 8004414:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004418:	429d      	cmp	r5, r3
 800441a:	bf28      	it	cs
 800441c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004420:	490f      	ldr	r1, [pc, #60]	; (8004460 <_scanf_float+0x3c0>)
 8004422:	4628      	mov	r0, r5
 8004424:	f000 f8b0 	bl	8004588 <siprintf>
 8004428:	e7aa      	b.n	8004380 <_scanf_float+0x2e0>
 800442a:	f015 0504 	ands.w	r5, r5, #4
 800442e:	d1b8      	bne.n	80043a2 <_scanf_float+0x302>
 8004430:	681f      	ldr	r7, [r3, #0]
 8004432:	ee10 2a10 	vmov	r2, s0
 8004436:	464b      	mov	r3, r9
 8004438:	ee10 0a10 	vmov	r0, s0
 800443c:	4649      	mov	r1, r9
 800443e:	f7fc fb75 	bl	8000b2c <__aeabi_dcmpun>
 8004442:	b128      	cbz	r0, 8004450 <_scanf_float+0x3b0>
 8004444:	4628      	mov	r0, r5
 8004446:	f000 f899 	bl	800457c <nanf>
 800444a:	ed87 0a00 	vstr	s0, [r7]
 800444e:	e7ab      	b.n	80043a8 <_scanf_float+0x308>
 8004450:	4640      	mov	r0, r8
 8004452:	4649      	mov	r1, r9
 8004454:	f7fc fbc8 	bl	8000be8 <__aeabi_d2f>
 8004458:	6038      	str	r0, [r7, #0]
 800445a:	e7a5      	b.n	80043a8 <_scanf_float+0x308>
 800445c:	2600      	movs	r6, #0
 800445e:	e666      	b.n	800412e <_scanf_float+0x8e>
 8004460:	08007ba8 	.word	0x08007ba8

08004464 <iprintf>:
 8004464:	b40f      	push	{r0, r1, r2, r3}
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <iprintf+0x2c>)
 8004468:	b513      	push	{r0, r1, r4, lr}
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	b124      	cbz	r4, 8004478 <iprintf+0x14>
 800446e:	69a3      	ldr	r3, [r4, #24]
 8004470:	b913      	cbnz	r3, 8004478 <iprintf+0x14>
 8004472:	4620      	mov	r0, r4
 8004474:	f001 f9a8 	bl	80057c8 <__sinit>
 8004478:	ab05      	add	r3, sp, #20
 800447a:	9a04      	ldr	r2, [sp, #16]
 800447c:	68a1      	ldr	r1, [r4, #8]
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	4620      	mov	r0, r4
 8004482:	f002 fd15 	bl	8006eb0 <_vfiprintf_r>
 8004486:	b002      	add	sp, #8
 8004488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448c:	b004      	add	sp, #16
 800448e:	4770      	bx	lr
 8004490:	2000000c 	.word	0x2000000c

08004494 <_puts_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	460e      	mov	r6, r1
 8004498:	4605      	mov	r5, r0
 800449a:	b118      	cbz	r0, 80044a4 <_puts_r+0x10>
 800449c:	6983      	ldr	r3, [r0, #24]
 800449e:	b90b      	cbnz	r3, 80044a4 <_puts_r+0x10>
 80044a0:	f001 f992 	bl	80057c8 <__sinit>
 80044a4:	69ab      	ldr	r3, [r5, #24]
 80044a6:	68ac      	ldr	r4, [r5, #8]
 80044a8:	b913      	cbnz	r3, 80044b0 <_puts_r+0x1c>
 80044aa:	4628      	mov	r0, r5
 80044ac:	f001 f98c 	bl	80057c8 <__sinit>
 80044b0:	4b23      	ldr	r3, [pc, #140]	; (8004540 <_puts_r+0xac>)
 80044b2:	429c      	cmp	r4, r3
 80044b4:	d117      	bne.n	80044e6 <_puts_r+0x52>
 80044b6:	686c      	ldr	r4, [r5, #4]
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	071b      	lsls	r3, r3, #28
 80044bc:	d51d      	bpl.n	80044fa <_puts_r+0x66>
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	b1db      	cbz	r3, 80044fa <_puts_r+0x66>
 80044c2:	3e01      	subs	r6, #1
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044ca:	3b01      	subs	r3, #1
 80044cc:	60a3      	str	r3, [r4, #8]
 80044ce:	b9e9      	cbnz	r1, 800450c <_puts_r+0x78>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	da2e      	bge.n	8004532 <_puts_r+0x9e>
 80044d4:	4622      	mov	r2, r4
 80044d6:	210a      	movs	r1, #10
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 ffa3 	bl	8005424 <__swbuf_r>
 80044de:	3001      	adds	r0, #1
 80044e0:	d011      	beq.n	8004506 <_puts_r+0x72>
 80044e2:	200a      	movs	r0, #10
 80044e4:	e011      	b.n	800450a <_puts_r+0x76>
 80044e6:	4b17      	ldr	r3, [pc, #92]	; (8004544 <_puts_r+0xb0>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d101      	bne.n	80044f0 <_puts_r+0x5c>
 80044ec:	68ac      	ldr	r4, [r5, #8]
 80044ee:	e7e3      	b.n	80044b8 <_puts_r+0x24>
 80044f0:	4b15      	ldr	r3, [pc, #84]	; (8004548 <_puts_r+0xb4>)
 80044f2:	429c      	cmp	r4, r3
 80044f4:	bf08      	it	eq
 80044f6:	68ec      	ldreq	r4, [r5, #12]
 80044f8:	e7de      	b.n	80044b8 <_puts_r+0x24>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 fff5 	bl	80054ec <__swsetup_r>
 8004502:	2800      	cmp	r0, #0
 8004504:	d0dd      	beq.n	80044c2 <_puts_r+0x2e>
 8004506:	f04f 30ff 	mov.w	r0, #4294967295
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	2b00      	cmp	r3, #0
 800450e:	da04      	bge.n	800451a <_puts_r+0x86>
 8004510:	69a2      	ldr	r2, [r4, #24]
 8004512:	429a      	cmp	r2, r3
 8004514:	dc06      	bgt.n	8004524 <_puts_r+0x90>
 8004516:	290a      	cmp	r1, #10
 8004518:	d004      	beq.n	8004524 <_puts_r+0x90>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	6022      	str	r2, [r4, #0]
 8004520:	7019      	strb	r1, [r3, #0]
 8004522:	e7cf      	b.n	80044c4 <_puts_r+0x30>
 8004524:	4622      	mov	r2, r4
 8004526:	4628      	mov	r0, r5
 8004528:	f000 ff7c 	bl	8005424 <__swbuf_r>
 800452c:	3001      	adds	r0, #1
 800452e:	d1c9      	bne.n	80044c4 <_puts_r+0x30>
 8004530:	e7e9      	b.n	8004506 <_puts_r+0x72>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	200a      	movs	r0, #10
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	6022      	str	r2, [r4, #0]
 800453a:	7018      	strb	r0, [r3, #0]
 800453c:	e7e5      	b.n	800450a <_puts_r+0x76>
 800453e:	bf00      	nop
 8004540:	08007c30 	.word	0x08007c30
 8004544:	08007c50 	.word	0x08007c50
 8004548:	08007c10 	.word	0x08007c10

0800454c <puts>:
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <puts+0xc>)
 800454e:	4601      	mov	r1, r0
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f7ff bf9f 	b.w	8004494 <_puts_r>
 8004556:	bf00      	nop
 8004558:	2000000c 	.word	0x2000000c

0800455c <_sbrk_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4c06      	ldr	r4, [pc, #24]	; (8004578 <_sbrk_r+0x1c>)
 8004560:	2300      	movs	r3, #0
 8004562:	4605      	mov	r5, r0
 8004564:	4608      	mov	r0, r1
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	f7fd fa68 	bl	8001a3c <_sbrk>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_sbrk_r+0x1a>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	b103      	cbz	r3, 8004576 <_sbrk_r+0x1a>
 8004574:	602b      	str	r3, [r5, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	200003b8 	.word	0x200003b8

0800457c <nanf>:
 800457c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004584 <nanf+0x8>
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	7fc00000 	.word	0x7fc00000

08004588 <siprintf>:
 8004588:	b40e      	push	{r1, r2, r3}
 800458a:	b500      	push	{lr}
 800458c:	b09c      	sub	sp, #112	; 0x70
 800458e:	ab1d      	add	r3, sp, #116	; 0x74
 8004590:	9002      	str	r0, [sp, #8]
 8004592:	9006      	str	r0, [sp, #24]
 8004594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004598:	4809      	ldr	r0, [pc, #36]	; (80045c0 <siprintf+0x38>)
 800459a:	9107      	str	r1, [sp, #28]
 800459c:	9104      	str	r1, [sp, #16]
 800459e:	4909      	ldr	r1, [pc, #36]	; (80045c4 <siprintf+0x3c>)
 80045a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a4:	9105      	str	r1, [sp, #20]
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	a902      	add	r1, sp, #8
 80045ac:	f002 f9b4 	bl	8006918 <_svfiprintf_r>
 80045b0:	9b02      	ldr	r3, [sp, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	b01c      	add	sp, #112	; 0x70
 80045b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045bc:	b003      	add	sp, #12
 80045be:	4770      	bx	lr
 80045c0:	2000000c 	.word	0x2000000c
 80045c4:	ffff0208 	.word	0xffff0208

080045c8 <siscanf>:
 80045c8:	b40e      	push	{r1, r2, r3}
 80045ca:	b530      	push	{r4, r5, lr}
 80045cc:	b09c      	sub	sp, #112	; 0x70
 80045ce:	ac1f      	add	r4, sp, #124	; 0x7c
 80045d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80045d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80045d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80045dc:	9002      	str	r0, [sp, #8]
 80045de:	9006      	str	r0, [sp, #24]
 80045e0:	f7fb fdf6 	bl	80001d0 <strlen>
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <siscanf+0x4c>)
 80045e6:	9003      	str	r0, [sp, #12]
 80045e8:	9007      	str	r0, [sp, #28]
 80045ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80045ec:	480a      	ldr	r0, [pc, #40]	; (8004618 <siscanf+0x50>)
 80045ee:	9401      	str	r4, [sp, #4]
 80045f0:	2300      	movs	r3, #0
 80045f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80045f4:	9314      	str	r3, [sp, #80]	; 0x50
 80045f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045fe:	462a      	mov	r2, r5
 8004600:	4623      	mov	r3, r4
 8004602:	a902      	add	r1, sp, #8
 8004604:	6800      	ldr	r0, [r0, #0]
 8004606:	f002 fad9 	bl	8006bbc <__ssvfiscanf_r>
 800460a:	b01c      	add	sp, #112	; 0x70
 800460c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004610:	b003      	add	sp, #12
 8004612:	4770      	bx	lr
 8004614:	0800463f 	.word	0x0800463f
 8004618:	2000000c 	.word	0x2000000c

0800461c <__sread>:
 800461c:	b510      	push	{r4, lr}
 800461e:	460c      	mov	r4, r1
 8004620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004624:	f003 f83a 	bl	800769c <_read_r>
 8004628:	2800      	cmp	r0, #0
 800462a:	bfab      	itete	ge
 800462c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800462e:	89a3      	ldrhlt	r3, [r4, #12]
 8004630:	181b      	addge	r3, r3, r0
 8004632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004636:	bfac      	ite	ge
 8004638:	6563      	strge	r3, [r4, #84]	; 0x54
 800463a:	81a3      	strhlt	r3, [r4, #12]
 800463c:	bd10      	pop	{r4, pc}

0800463e <__seofread>:
 800463e:	2000      	movs	r0, #0
 8004640:	4770      	bx	lr

08004642 <__swrite>:
 8004642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004646:	461f      	mov	r7, r3
 8004648:	898b      	ldrh	r3, [r1, #12]
 800464a:	05db      	lsls	r3, r3, #23
 800464c:	4605      	mov	r5, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4616      	mov	r6, r2
 8004652:	d505      	bpl.n	8004660 <__swrite+0x1e>
 8004654:	2302      	movs	r3, #2
 8004656:	2200      	movs	r2, #0
 8004658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465c:	f001 fc78 	bl	8005f50 <_lseek_r>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	4632      	mov	r2, r6
 800466e:	463b      	mov	r3, r7
 8004670:	4628      	mov	r0, r5
 8004672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004676:	f000 bf27 	b.w	80054c8 <_write_r>

0800467a <__sseek>:
 800467a:	b510      	push	{r4, lr}
 800467c:	460c      	mov	r4, r1
 800467e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004682:	f001 fc65 	bl	8005f50 <_lseek_r>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	bf15      	itete	ne
 800468c:	6560      	strne	r0, [r4, #84]	; 0x54
 800468e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004696:	81a3      	strheq	r3, [r4, #12]
 8004698:	bf18      	it	ne
 800469a:	81a3      	strhne	r3, [r4, #12]
 800469c:	bd10      	pop	{r4, pc}

0800469e <__sclose>:
 800469e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a2:	f000 bf91 	b.w	80055c8 <_close_r>

080046a6 <strcat>:
 80046a6:	b510      	push	{r4, lr}
 80046a8:	4603      	mov	r3, r0
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	1c5c      	adds	r4, r3, #1
 80046ae:	b93a      	cbnz	r2, 80046c0 <strcat+0x1a>
 80046b0:	3b01      	subs	r3, #1
 80046b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d1f9      	bne.n	80046b2 <strcat+0xc>
 80046be:	bd10      	pop	{r4, pc}
 80046c0:	4623      	mov	r3, r4
 80046c2:	e7f2      	b.n	80046aa <strcat+0x4>

080046c4 <sulp>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4604      	mov	r4, r0
 80046c8:	460d      	mov	r5, r1
 80046ca:	ec45 4b10 	vmov	d0, r4, r5
 80046ce:	4616      	mov	r6, r2
 80046d0:	f001 ff94 	bl	80065fc <__ulp>
 80046d4:	ec51 0b10 	vmov	r0, r1, d0
 80046d8:	b17e      	cbz	r6, 80046fa <sulp+0x36>
 80046da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80046de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	dd09      	ble.n	80046fa <sulp+0x36>
 80046e6:	051b      	lsls	r3, r3, #20
 80046e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80046ec:	2400      	movs	r4, #0
 80046ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80046f2:	4622      	mov	r2, r4
 80046f4:	462b      	mov	r3, r5
 80046f6:	f7fb ff7f 	bl	80005f8 <__aeabi_dmul>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	0000      	movs	r0, r0
	...

08004700 <_strtod_l>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	461f      	mov	r7, r3
 8004706:	b0a1      	sub	sp, #132	; 0x84
 8004708:	2300      	movs	r3, #0
 800470a:	4681      	mov	r9, r0
 800470c:	4638      	mov	r0, r7
 800470e:	460e      	mov	r6, r1
 8004710:	9217      	str	r2, [sp, #92]	; 0x5c
 8004712:	931c      	str	r3, [sp, #112]	; 0x70
 8004714:	f001 fc1a 	bl	8005f4c <__localeconv_l>
 8004718:	4680      	mov	r8, r0
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	f7fb fd58 	bl	80001d0 <strlen>
 8004720:	f04f 0a00 	mov.w	sl, #0
 8004724:	4604      	mov	r4, r0
 8004726:	f04f 0b00 	mov.w	fp, #0
 800472a:	961b      	str	r6, [sp, #108]	; 0x6c
 800472c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	2a0d      	cmp	r2, #13
 8004732:	d832      	bhi.n	800479a <_strtod_l+0x9a>
 8004734:	2a09      	cmp	r2, #9
 8004736:	d236      	bcs.n	80047a6 <_strtod_l+0xa6>
 8004738:	2a00      	cmp	r2, #0
 800473a:	d03e      	beq.n	80047ba <_strtod_l+0xba>
 800473c:	2300      	movs	r3, #0
 800473e:	930d      	str	r3, [sp, #52]	; 0x34
 8004740:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004742:	782b      	ldrb	r3, [r5, #0]
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	f040 80ac 	bne.w	80048a2 <_strtod_l+0x1a2>
 800474a:	786b      	ldrb	r3, [r5, #1]
 800474c:	2b58      	cmp	r3, #88	; 0x58
 800474e:	d001      	beq.n	8004754 <_strtod_l+0x54>
 8004750:	2b78      	cmp	r3, #120	; 0x78
 8004752:	d167      	bne.n	8004824 <_strtod_l+0x124>
 8004754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	ab1c      	add	r3, sp, #112	; 0x70
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	9702      	str	r7, [sp, #8]
 800475e:	ab1d      	add	r3, sp, #116	; 0x74
 8004760:	4a88      	ldr	r2, [pc, #544]	; (8004984 <_strtod_l+0x284>)
 8004762:	a91b      	add	r1, sp, #108	; 0x6c
 8004764:	4648      	mov	r0, r9
 8004766:	f001 f908 	bl	800597a <__gethex>
 800476a:	f010 0407 	ands.w	r4, r0, #7
 800476e:	4606      	mov	r6, r0
 8004770:	d005      	beq.n	800477e <_strtod_l+0x7e>
 8004772:	2c06      	cmp	r4, #6
 8004774:	d12b      	bne.n	80047ce <_strtod_l+0xce>
 8004776:	3501      	adds	r5, #1
 8004778:	2300      	movs	r3, #0
 800477a:	951b      	str	r5, [sp, #108]	; 0x6c
 800477c:	930d      	str	r3, [sp, #52]	; 0x34
 800477e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 859a 	bne.w	80052ba <_strtod_l+0xbba>
 8004786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004788:	b1e3      	cbz	r3, 80047c4 <_strtod_l+0xc4>
 800478a:	4652      	mov	r2, sl
 800478c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004790:	ec43 2b10 	vmov	d0, r2, r3
 8004794:	b021      	add	sp, #132	; 0x84
 8004796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479a:	2a2b      	cmp	r2, #43	; 0x2b
 800479c:	d015      	beq.n	80047ca <_strtod_l+0xca>
 800479e:	2a2d      	cmp	r2, #45	; 0x2d
 80047a0:	d004      	beq.n	80047ac <_strtod_l+0xac>
 80047a2:	2a20      	cmp	r2, #32
 80047a4:	d1ca      	bne.n	800473c <_strtod_l+0x3c>
 80047a6:	3301      	adds	r3, #1
 80047a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80047aa:	e7bf      	b.n	800472c <_strtod_l+0x2c>
 80047ac:	2201      	movs	r2, #1
 80047ae:	920d      	str	r2, [sp, #52]	; 0x34
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1c2      	bne.n	8004740 <_strtod_l+0x40>
 80047ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 8579 	bne.w	80052b6 <_strtod_l+0xbb6>
 80047c4:	4652      	mov	r2, sl
 80047c6:	465b      	mov	r3, fp
 80047c8:	e7e2      	b.n	8004790 <_strtod_l+0x90>
 80047ca:	2200      	movs	r2, #0
 80047cc:	e7ef      	b.n	80047ae <_strtod_l+0xae>
 80047ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80047d0:	b13a      	cbz	r2, 80047e2 <_strtod_l+0xe2>
 80047d2:	2135      	movs	r1, #53	; 0x35
 80047d4:	a81e      	add	r0, sp, #120	; 0x78
 80047d6:	f002 f809 	bl	80067ec <__copybits>
 80047da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80047dc:	4648      	mov	r0, r9
 80047de:	f001 fc75 	bl	80060cc <_Bfree>
 80047e2:	3c01      	subs	r4, #1
 80047e4:	2c04      	cmp	r4, #4
 80047e6:	d806      	bhi.n	80047f6 <_strtod_l+0xf6>
 80047e8:	e8df f004 	tbb	[pc, r4]
 80047ec:	1714030a 	.word	0x1714030a
 80047f0:	0a          	.byte	0x0a
 80047f1:	00          	.byte	0x00
 80047f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80047f6:	0730      	lsls	r0, r6, #28
 80047f8:	d5c1      	bpl.n	800477e <_strtod_l+0x7e>
 80047fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80047fe:	e7be      	b.n	800477e <_strtod_l+0x7e>
 8004800:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004804:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004806:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800480a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800480e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004812:	e7f0      	b.n	80047f6 <_strtod_l+0xf6>
 8004814:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004988 <_strtod_l+0x288>
 8004818:	e7ed      	b.n	80047f6 <_strtod_l+0xf6>
 800481a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800481e:	f04f 3aff 	mov.w	sl, #4294967295
 8004822:	e7e8      	b.n	80047f6 <_strtod_l+0xf6>
 8004824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	921b      	str	r2, [sp, #108]	; 0x6c
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d0f9      	beq.n	8004824 <_strtod_l+0x124>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0a4      	beq.n	800477e <_strtod_l+0x7e>
 8004834:	2301      	movs	r3, #1
 8004836:	2500      	movs	r5, #0
 8004838:	9306      	str	r3, [sp, #24]
 800483a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800483c:	9308      	str	r3, [sp, #32]
 800483e:	9507      	str	r5, [sp, #28]
 8004840:	9505      	str	r5, [sp, #20]
 8004842:	220a      	movs	r2, #10
 8004844:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004846:	7807      	ldrb	r7, [r0, #0]
 8004848:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800484c:	b2d9      	uxtb	r1, r3
 800484e:	2909      	cmp	r1, #9
 8004850:	d929      	bls.n	80048a6 <_strtod_l+0x1a6>
 8004852:	4622      	mov	r2, r4
 8004854:	f8d8 1000 	ldr.w	r1, [r8]
 8004858:	f002 ff64 	bl	8007724 <strncmp>
 800485c:	2800      	cmp	r0, #0
 800485e:	d031      	beq.n	80048c4 <_strtod_l+0x1c4>
 8004860:	2000      	movs	r0, #0
 8004862:	9c05      	ldr	r4, [sp, #20]
 8004864:	9004      	str	r0, [sp, #16]
 8004866:	463b      	mov	r3, r7
 8004868:	4602      	mov	r2, r0
 800486a:	2b65      	cmp	r3, #101	; 0x65
 800486c:	d001      	beq.n	8004872 <_strtod_l+0x172>
 800486e:	2b45      	cmp	r3, #69	; 0x45
 8004870:	d114      	bne.n	800489c <_strtod_l+0x19c>
 8004872:	b924      	cbnz	r4, 800487e <_strtod_l+0x17e>
 8004874:	b910      	cbnz	r0, 800487c <_strtod_l+0x17c>
 8004876:	9b06      	ldr	r3, [sp, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d09e      	beq.n	80047ba <_strtod_l+0xba>
 800487c:	2400      	movs	r4, #0
 800487e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004880:	1c73      	adds	r3, r6, #1
 8004882:	931b      	str	r3, [sp, #108]	; 0x6c
 8004884:	7873      	ldrb	r3, [r6, #1]
 8004886:	2b2b      	cmp	r3, #43	; 0x2b
 8004888:	d078      	beq.n	800497c <_strtod_l+0x27c>
 800488a:	2b2d      	cmp	r3, #45	; 0x2d
 800488c:	d070      	beq.n	8004970 <_strtod_l+0x270>
 800488e:	f04f 0c00 	mov.w	ip, #0
 8004892:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004896:	2f09      	cmp	r7, #9
 8004898:	d97c      	bls.n	8004994 <_strtod_l+0x294>
 800489a:	961b      	str	r6, [sp, #108]	; 0x6c
 800489c:	f04f 0e00 	mov.w	lr, #0
 80048a0:	e09a      	b.n	80049d8 <_strtod_l+0x2d8>
 80048a2:	2300      	movs	r3, #0
 80048a4:	e7c7      	b.n	8004836 <_strtod_l+0x136>
 80048a6:	9905      	ldr	r1, [sp, #20]
 80048a8:	2908      	cmp	r1, #8
 80048aa:	bfdd      	ittte	le
 80048ac:	9907      	ldrle	r1, [sp, #28]
 80048ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80048b2:	9307      	strle	r3, [sp, #28]
 80048b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80048b8:	9b05      	ldr	r3, [sp, #20]
 80048ba:	3001      	adds	r0, #1
 80048bc:	3301      	adds	r3, #1
 80048be:	9305      	str	r3, [sp, #20]
 80048c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80048c2:	e7bf      	b.n	8004844 <_strtod_l+0x144>
 80048c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048c6:	191a      	adds	r2, r3, r4
 80048c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80048ca:	9a05      	ldr	r2, [sp, #20]
 80048cc:	5d1b      	ldrb	r3, [r3, r4]
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	d037      	beq.n	8004942 <_strtod_l+0x242>
 80048d2:	9c05      	ldr	r4, [sp, #20]
 80048d4:	4602      	mov	r2, r0
 80048d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80048da:	2909      	cmp	r1, #9
 80048dc:	d913      	bls.n	8004906 <_strtod_l+0x206>
 80048de:	2101      	movs	r1, #1
 80048e0:	9104      	str	r1, [sp, #16]
 80048e2:	e7c2      	b.n	800486a <_strtod_l+0x16a>
 80048e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	3001      	adds	r0, #1
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	d0f8      	beq.n	80048e4 <_strtod_l+0x1e4>
 80048f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80048f6:	2a08      	cmp	r2, #8
 80048f8:	f200 84e4 	bhi.w	80052c4 <_strtod_l+0xbc4>
 80048fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80048fe:	9208      	str	r2, [sp, #32]
 8004900:	4602      	mov	r2, r0
 8004902:	2000      	movs	r0, #0
 8004904:	4604      	mov	r4, r0
 8004906:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800490a:	f100 0101 	add.w	r1, r0, #1
 800490e:	d012      	beq.n	8004936 <_strtod_l+0x236>
 8004910:	440a      	add	r2, r1
 8004912:	eb00 0c04 	add.w	ip, r0, r4
 8004916:	4621      	mov	r1, r4
 8004918:	270a      	movs	r7, #10
 800491a:	458c      	cmp	ip, r1
 800491c:	d113      	bne.n	8004946 <_strtod_l+0x246>
 800491e:	1821      	adds	r1, r4, r0
 8004920:	2908      	cmp	r1, #8
 8004922:	f104 0401 	add.w	r4, r4, #1
 8004926:	4404      	add	r4, r0
 8004928:	dc19      	bgt.n	800495e <_strtod_l+0x25e>
 800492a:	9b07      	ldr	r3, [sp, #28]
 800492c:	210a      	movs	r1, #10
 800492e:	fb01 e303 	mla	r3, r1, r3, lr
 8004932:	9307      	str	r3, [sp, #28]
 8004934:	2100      	movs	r1, #0
 8004936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004938:	1c58      	adds	r0, r3, #1
 800493a:	901b      	str	r0, [sp, #108]	; 0x6c
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	4608      	mov	r0, r1
 8004940:	e7c9      	b.n	80048d6 <_strtod_l+0x1d6>
 8004942:	9805      	ldr	r0, [sp, #20]
 8004944:	e7d3      	b.n	80048ee <_strtod_l+0x1ee>
 8004946:	2908      	cmp	r1, #8
 8004948:	f101 0101 	add.w	r1, r1, #1
 800494c:	dc03      	bgt.n	8004956 <_strtod_l+0x256>
 800494e:	9b07      	ldr	r3, [sp, #28]
 8004950:	437b      	muls	r3, r7
 8004952:	9307      	str	r3, [sp, #28]
 8004954:	e7e1      	b.n	800491a <_strtod_l+0x21a>
 8004956:	2910      	cmp	r1, #16
 8004958:	bfd8      	it	le
 800495a:	437d      	mulle	r5, r7
 800495c:	e7dd      	b.n	800491a <_strtod_l+0x21a>
 800495e:	2c10      	cmp	r4, #16
 8004960:	bfdc      	itt	le
 8004962:	210a      	movle	r1, #10
 8004964:	fb01 e505 	mlale	r5, r1, r5, lr
 8004968:	e7e4      	b.n	8004934 <_strtod_l+0x234>
 800496a:	2301      	movs	r3, #1
 800496c:	9304      	str	r3, [sp, #16]
 800496e:	e781      	b.n	8004874 <_strtod_l+0x174>
 8004970:	f04f 0c01 	mov.w	ip, #1
 8004974:	1cb3      	adds	r3, r6, #2
 8004976:	931b      	str	r3, [sp, #108]	; 0x6c
 8004978:	78b3      	ldrb	r3, [r6, #2]
 800497a:	e78a      	b.n	8004892 <_strtod_l+0x192>
 800497c:	f04f 0c00 	mov.w	ip, #0
 8004980:	e7f8      	b.n	8004974 <_strtod_l+0x274>
 8004982:	bf00      	nop
 8004984:	08007bbc 	.word	0x08007bbc
 8004988:	7ff00000 	.word	0x7ff00000
 800498c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800498e:	1c5f      	adds	r7, r3, #1
 8004990:	971b      	str	r7, [sp, #108]	; 0x6c
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	2b30      	cmp	r3, #48	; 0x30
 8004996:	d0f9      	beq.n	800498c <_strtod_l+0x28c>
 8004998:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800499c:	2f08      	cmp	r7, #8
 800499e:	f63f af7d 	bhi.w	800489c <_strtod_l+0x19c>
 80049a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80049a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049a8:	930a      	str	r3, [sp, #40]	; 0x28
 80049aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049ac:	1c5f      	adds	r7, r3, #1
 80049ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80049b6:	f1b8 0f09 	cmp.w	r8, #9
 80049ba:	d937      	bls.n	8004a2c <_strtod_l+0x32c>
 80049bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80049be:	1a7f      	subs	r7, r7, r1
 80049c0:	2f08      	cmp	r7, #8
 80049c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80049c6:	dc37      	bgt.n	8004a38 <_strtod_l+0x338>
 80049c8:	45be      	cmp	lr, r7
 80049ca:	bfa8      	it	ge
 80049cc:	46be      	movge	lr, r7
 80049ce:	f1bc 0f00 	cmp.w	ip, #0
 80049d2:	d001      	beq.n	80049d8 <_strtod_l+0x2d8>
 80049d4:	f1ce 0e00 	rsb	lr, lr, #0
 80049d8:	2c00      	cmp	r4, #0
 80049da:	d151      	bne.n	8004a80 <_strtod_l+0x380>
 80049dc:	2800      	cmp	r0, #0
 80049de:	f47f aece 	bne.w	800477e <_strtod_l+0x7e>
 80049e2:	9a06      	ldr	r2, [sp, #24]
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	f47f aeca 	bne.w	800477e <_strtod_l+0x7e>
 80049ea:	9a04      	ldr	r2, [sp, #16]
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	f47f aee4 	bne.w	80047ba <_strtod_l+0xba>
 80049f2:	2b4e      	cmp	r3, #78	; 0x4e
 80049f4:	d027      	beq.n	8004a46 <_strtod_l+0x346>
 80049f6:	dc21      	bgt.n	8004a3c <_strtod_l+0x33c>
 80049f8:	2b49      	cmp	r3, #73	; 0x49
 80049fa:	f47f aede 	bne.w	80047ba <_strtod_l+0xba>
 80049fe:	49a0      	ldr	r1, [pc, #640]	; (8004c80 <_strtod_l+0x580>)
 8004a00:	a81b      	add	r0, sp, #108	; 0x6c
 8004a02:	f001 f9ed 	bl	8005de0 <__match>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	f43f aed7 	beq.w	80047ba <_strtod_l+0xba>
 8004a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a0e:	499d      	ldr	r1, [pc, #628]	; (8004c84 <_strtod_l+0x584>)
 8004a10:	3b01      	subs	r3, #1
 8004a12:	a81b      	add	r0, sp, #108	; 0x6c
 8004a14:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a16:	f001 f9e3 	bl	8005de0 <__match>
 8004a1a:	b910      	cbnz	r0, 8004a22 <_strtod_l+0x322>
 8004a1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a1e:	3301      	adds	r3, #1
 8004a20:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a22:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004c98 <_strtod_l+0x598>
 8004a26:	f04f 0a00 	mov.w	sl, #0
 8004a2a:	e6a8      	b.n	800477e <_strtod_l+0x7e>
 8004a2c:	210a      	movs	r1, #10
 8004a2e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004a32:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004a36:	e7b8      	b.n	80049aa <_strtod_l+0x2aa>
 8004a38:	46be      	mov	lr, r7
 8004a3a:	e7c8      	b.n	80049ce <_strtod_l+0x2ce>
 8004a3c:	2b69      	cmp	r3, #105	; 0x69
 8004a3e:	d0de      	beq.n	80049fe <_strtod_l+0x2fe>
 8004a40:	2b6e      	cmp	r3, #110	; 0x6e
 8004a42:	f47f aeba 	bne.w	80047ba <_strtod_l+0xba>
 8004a46:	4990      	ldr	r1, [pc, #576]	; (8004c88 <_strtod_l+0x588>)
 8004a48:	a81b      	add	r0, sp, #108	; 0x6c
 8004a4a:	f001 f9c9 	bl	8005de0 <__match>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	f43f aeb3 	beq.w	80047ba <_strtod_l+0xba>
 8004a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b28      	cmp	r3, #40	; 0x28
 8004a5a:	d10e      	bne.n	8004a7a <_strtod_l+0x37a>
 8004a5c:	aa1e      	add	r2, sp, #120	; 0x78
 8004a5e:	498b      	ldr	r1, [pc, #556]	; (8004c8c <_strtod_l+0x58c>)
 8004a60:	a81b      	add	r0, sp, #108	; 0x6c
 8004a62:	f001 f9d1 	bl	8005e08 <__hexnan>
 8004a66:	2805      	cmp	r0, #5
 8004a68:	d107      	bne.n	8004a7a <_strtod_l+0x37a>
 8004a6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a6c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004a70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004a74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004a78:	e681      	b.n	800477e <_strtod_l+0x7e>
 8004a7a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004ca0 <_strtod_l+0x5a0>
 8004a7e:	e7d2      	b.n	8004a26 <_strtod_l+0x326>
 8004a80:	ebae 0302 	sub.w	r3, lr, r2
 8004a84:	9306      	str	r3, [sp, #24]
 8004a86:	9b05      	ldr	r3, [sp, #20]
 8004a88:	9807      	ldr	r0, [sp, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf08      	it	eq
 8004a8e:	4623      	moveq	r3, r4
 8004a90:	2c10      	cmp	r4, #16
 8004a92:	9305      	str	r3, [sp, #20]
 8004a94:	46a0      	mov	r8, r4
 8004a96:	bfa8      	it	ge
 8004a98:	f04f 0810 	movge.w	r8, #16
 8004a9c:	f7fb fd32 	bl	8000504 <__aeabi_ui2d>
 8004aa0:	2c09      	cmp	r4, #9
 8004aa2:	4682      	mov	sl, r0
 8004aa4:	468b      	mov	fp, r1
 8004aa6:	dc13      	bgt.n	8004ad0 <_strtod_l+0x3d0>
 8004aa8:	9b06      	ldr	r3, [sp, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f43f ae67 	beq.w	800477e <_strtod_l+0x7e>
 8004ab0:	9b06      	ldr	r3, [sp, #24]
 8004ab2:	dd7a      	ble.n	8004baa <_strtod_l+0x4aa>
 8004ab4:	2b16      	cmp	r3, #22
 8004ab6:	dc61      	bgt.n	8004b7c <_strtod_l+0x47c>
 8004ab8:	4a75      	ldr	r2, [pc, #468]	; (8004c90 <_strtod_l+0x590>)
 8004aba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004abe:	e9de 0100 	ldrd	r0, r1, [lr]
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	f7fb fd97 	bl	80005f8 <__aeabi_dmul>
 8004aca:	4682      	mov	sl, r0
 8004acc:	468b      	mov	fp, r1
 8004ace:	e656      	b.n	800477e <_strtod_l+0x7e>
 8004ad0:	4b6f      	ldr	r3, [pc, #444]	; (8004c90 <_strtod_l+0x590>)
 8004ad2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004ad6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004ada:	f7fb fd8d 	bl	80005f8 <__aeabi_dmul>
 8004ade:	4606      	mov	r6, r0
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	460f      	mov	r7, r1
 8004ae4:	f7fb fd0e 	bl	8000504 <__aeabi_ui2d>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4630      	mov	r0, r6
 8004aee:	4639      	mov	r1, r7
 8004af0:	f7fb fbcc 	bl	800028c <__adddf3>
 8004af4:	2c0f      	cmp	r4, #15
 8004af6:	4682      	mov	sl, r0
 8004af8:	468b      	mov	fp, r1
 8004afa:	ddd5      	ble.n	8004aa8 <_strtod_l+0x3a8>
 8004afc:	9b06      	ldr	r3, [sp, #24]
 8004afe:	eba4 0808 	sub.w	r8, r4, r8
 8004b02:	4498      	add	r8, r3
 8004b04:	f1b8 0f00 	cmp.w	r8, #0
 8004b08:	f340 8096 	ble.w	8004c38 <_strtod_l+0x538>
 8004b0c:	f018 030f 	ands.w	r3, r8, #15
 8004b10:	d00a      	beq.n	8004b28 <_strtod_l+0x428>
 8004b12:	495f      	ldr	r1, [pc, #380]	; (8004c90 <_strtod_l+0x590>)
 8004b14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b18:	4652      	mov	r2, sl
 8004b1a:	465b      	mov	r3, fp
 8004b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b20:	f7fb fd6a 	bl	80005f8 <__aeabi_dmul>
 8004b24:	4682      	mov	sl, r0
 8004b26:	468b      	mov	fp, r1
 8004b28:	f038 080f 	bics.w	r8, r8, #15
 8004b2c:	d073      	beq.n	8004c16 <_strtod_l+0x516>
 8004b2e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004b32:	dd47      	ble.n	8004bc4 <_strtod_l+0x4c4>
 8004b34:	2400      	movs	r4, #0
 8004b36:	46a0      	mov	r8, r4
 8004b38:	9407      	str	r4, [sp, #28]
 8004b3a:	9405      	str	r4, [sp, #20]
 8004b3c:	2322      	movs	r3, #34	; 0x22
 8004b3e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004c98 <_strtod_l+0x598>
 8004b42:	f8c9 3000 	str.w	r3, [r9]
 8004b46:	f04f 0a00 	mov.w	sl, #0
 8004b4a:	9b07      	ldr	r3, [sp, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f43f ae16 	beq.w	800477e <_strtod_l+0x7e>
 8004b52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b54:	4648      	mov	r0, r9
 8004b56:	f001 fab9 	bl	80060cc <_Bfree>
 8004b5a:	9905      	ldr	r1, [sp, #20]
 8004b5c:	4648      	mov	r0, r9
 8004b5e:	f001 fab5 	bl	80060cc <_Bfree>
 8004b62:	4641      	mov	r1, r8
 8004b64:	4648      	mov	r0, r9
 8004b66:	f001 fab1 	bl	80060cc <_Bfree>
 8004b6a:	9907      	ldr	r1, [sp, #28]
 8004b6c:	4648      	mov	r0, r9
 8004b6e:	f001 faad 	bl	80060cc <_Bfree>
 8004b72:	4621      	mov	r1, r4
 8004b74:	4648      	mov	r0, r9
 8004b76:	f001 faa9 	bl	80060cc <_Bfree>
 8004b7a:	e600      	b.n	800477e <_strtod_l+0x7e>
 8004b7c:	9a06      	ldr	r2, [sp, #24]
 8004b7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004b82:	4293      	cmp	r3, r2
 8004b84:	dbba      	blt.n	8004afc <_strtod_l+0x3fc>
 8004b86:	4d42      	ldr	r5, [pc, #264]	; (8004c90 <_strtod_l+0x590>)
 8004b88:	f1c4 040f 	rsb	r4, r4, #15
 8004b8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004b90:	4652      	mov	r2, sl
 8004b92:	465b      	mov	r3, fp
 8004b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b98:	f7fb fd2e 	bl	80005f8 <__aeabi_dmul>
 8004b9c:	9b06      	ldr	r3, [sp, #24]
 8004b9e:	1b1c      	subs	r4, r3, r4
 8004ba0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004ba4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ba8:	e78d      	b.n	8004ac6 <_strtod_l+0x3c6>
 8004baa:	f113 0f16 	cmn.w	r3, #22
 8004bae:	dba5      	blt.n	8004afc <_strtod_l+0x3fc>
 8004bb0:	4a37      	ldr	r2, [pc, #220]	; (8004c90 <_strtod_l+0x590>)
 8004bb2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004bb6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004bba:	4650      	mov	r0, sl
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	f7fb fe45 	bl	800084c <__aeabi_ddiv>
 8004bc2:	e782      	b.n	8004aca <_strtod_l+0x3ca>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4e33      	ldr	r6, [pc, #204]	; (8004c94 <_strtod_l+0x594>)
 8004bc8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004bcc:	4650      	mov	r0, sl
 8004bce:	4659      	mov	r1, fp
 8004bd0:	461d      	mov	r5, r3
 8004bd2:	f1b8 0f01 	cmp.w	r8, #1
 8004bd6:	dc21      	bgt.n	8004c1c <_strtod_l+0x51c>
 8004bd8:	b10b      	cbz	r3, 8004bde <_strtod_l+0x4de>
 8004bda:	4682      	mov	sl, r0
 8004bdc:	468b      	mov	fp, r1
 8004bde:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <_strtod_l+0x594>)
 8004be0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004be4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004be8:	4652      	mov	r2, sl
 8004bea:	465b      	mov	r3, fp
 8004bec:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004bf0:	f7fb fd02 	bl	80005f8 <__aeabi_dmul>
 8004bf4:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <_strtod_l+0x598>)
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	400b      	ands	r3, r1
 8004bfa:	4928      	ldr	r1, [pc, #160]	; (8004c9c <_strtod_l+0x59c>)
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	4682      	mov	sl, r0
 8004c00:	d898      	bhi.n	8004b34 <_strtod_l+0x434>
 8004c02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004c06:	428b      	cmp	r3, r1
 8004c08:	bf86      	itte	hi
 8004c0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004ca4 <_strtod_l+0x5a4>
 8004c0e:	f04f 3aff 	movhi.w	sl, #4294967295
 8004c12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004c16:	2300      	movs	r3, #0
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	e077      	b.n	8004d0c <_strtod_l+0x60c>
 8004c1c:	f018 0f01 	tst.w	r8, #1
 8004c20:	d006      	beq.n	8004c30 <_strtod_l+0x530>
 8004c22:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb fce5 	bl	80005f8 <__aeabi_dmul>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	3501      	adds	r5, #1
 8004c32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004c36:	e7cc      	b.n	8004bd2 <_strtod_l+0x4d2>
 8004c38:	d0ed      	beq.n	8004c16 <_strtod_l+0x516>
 8004c3a:	f1c8 0800 	rsb	r8, r8, #0
 8004c3e:	f018 020f 	ands.w	r2, r8, #15
 8004c42:	d00a      	beq.n	8004c5a <_strtod_l+0x55a>
 8004c44:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <_strtod_l+0x590>)
 8004c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c4a:	4650      	mov	r0, sl
 8004c4c:	4659      	mov	r1, fp
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f7fb fdfb 	bl	800084c <__aeabi_ddiv>
 8004c56:	4682      	mov	sl, r0
 8004c58:	468b      	mov	fp, r1
 8004c5a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004c5e:	d0da      	beq.n	8004c16 <_strtod_l+0x516>
 8004c60:	f1b8 0f1f 	cmp.w	r8, #31
 8004c64:	dd20      	ble.n	8004ca8 <_strtod_l+0x5a8>
 8004c66:	2400      	movs	r4, #0
 8004c68:	46a0      	mov	r8, r4
 8004c6a:	9407      	str	r4, [sp, #28]
 8004c6c:	9405      	str	r4, [sp, #20]
 8004c6e:	2322      	movs	r3, #34	; 0x22
 8004c70:	f04f 0a00 	mov.w	sl, #0
 8004c74:	f04f 0b00 	mov.w	fp, #0
 8004c78:	f8c9 3000 	str.w	r3, [r9]
 8004c7c:	e765      	b.n	8004b4a <_strtod_l+0x44a>
 8004c7e:	bf00      	nop
 8004c80:	08007bad 	.word	0x08007bad
 8004c84:	08007bb0 	.word	0x08007bb0
 8004c88:	08007bb6 	.word	0x08007bb6
 8004c8c:	08007bd0 	.word	0x08007bd0
 8004c90:	08007ca8 	.word	0x08007ca8
 8004c94:	08007c80 	.word	0x08007c80
 8004c98:	7ff00000 	.word	0x7ff00000
 8004c9c:	7ca00000 	.word	0x7ca00000
 8004ca0:	fff80000 	.word	0xfff80000
 8004ca4:	7fefffff 	.word	0x7fefffff
 8004ca8:	f018 0310 	ands.w	r3, r8, #16
 8004cac:	bf18      	it	ne
 8004cae:	236a      	movne	r3, #106	; 0x6a
 8004cb0:	4da0      	ldr	r5, [pc, #640]	; (8004f34 <_strtod_l+0x834>)
 8004cb2:	9304      	str	r3, [sp, #16]
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f1b8 0f00 	cmp.w	r8, #0
 8004cbe:	f300 810a 	bgt.w	8004ed6 <_strtod_l+0x7d6>
 8004cc2:	b10b      	cbz	r3, 8004cc8 <_strtod_l+0x5c8>
 8004cc4:	4682      	mov	sl, r0
 8004cc6:	468b      	mov	fp, r1
 8004cc8:	9b04      	ldr	r3, [sp, #16]
 8004cca:	b1bb      	cbz	r3, 8004cfc <_strtod_l+0x5fc>
 8004ccc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004cd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	dd10      	ble.n	8004cfc <_strtod_l+0x5fc>
 8004cda:	2b1f      	cmp	r3, #31
 8004cdc:	f340 8107 	ble.w	8004eee <_strtod_l+0x7ee>
 8004ce0:	2b34      	cmp	r3, #52	; 0x34
 8004ce2:	bfde      	ittt	le
 8004ce4:	3b20      	suble	r3, #32
 8004ce6:	f04f 32ff 	movle.w	r2, #4294967295
 8004cea:	fa02 f303 	lslle.w	r3, r2, r3
 8004cee:	f04f 0a00 	mov.w	sl, #0
 8004cf2:	bfcc      	ite	gt
 8004cf4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004cf8:	ea03 0b01 	andle.w	fp, r3, r1
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2300      	movs	r3, #0
 8004d00:	4650      	mov	r0, sl
 8004d02:	4659      	mov	r1, fp
 8004d04:	f7fb fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d1ac      	bne.n	8004c66 <_strtod_l+0x566>
 8004d0c:	9b07      	ldr	r3, [sp, #28]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	9a05      	ldr	r2, [sp, #20]
 8004d12:	9908      	ldr	r1, [sp, #32]
 8004d14:	4623      	mov	r3, r4
 8004d16:	4648      	mov	r0, r9
 8004d18:	f001 fa2a 	bl	8006170 <__s2b>
 8004d1c:	9007      	str	r0, [sp, #28]
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f43f af08 	beq.w	8004b34 <_strtod_l+0x434>
 8004d24:	9a06      	ldr	r2, [sp, #24]
 8004d26:	9b06      	ldr	r3, [sp, #24]
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	f1c3 0300 	rsb	r3, r3, #0
 8004d2e:	bfa8      	it	ge
 8004d30:	2300      	movge	r3, #0
 8004d32:	930e      	str	r3, [sp, #56]	; 0x38
 8004d34:	2400      	movs	r4, #0
 8004d36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004d3a:	9316      	str	r3, [sp, #88]	; 0x58
 8004d3c:	46a0      	mov	r8, r4
 8004d3e:	9b07      	ldr	r3, [sp, #28]
 8004d40:	4648      	mov	r0, r9
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	f001 f98e 	bl	8006064 <_Balloc>
 8004d48:	9005      	str	r0, [sp, #20]
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	f43f aef6 	beq.w	8004b3c <_strtod_l+0x43c>
 8004d50:	9b07      	ldr	r3, [sp, #28]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	3202      	adds	r2, #2
 8004d56:	f103 010c 	add.w	r1, r3, #12
 8004d5a:	0092      	lsls	r2, r2, #2
 8004d5c:	300c      	adds	r0, #12
 8004d5e:	f7ff f8d5 	bl	8003f0c <memcpy>
 8004d62:	aa1e      	add	r2, sp, #120	; 0x78
 8004d64:	a91d      	add	r1, sp, #116	; 0x74
 8004d66:	ec4b ab10 	vmov	d0, sl, fp
 8004d6a:	4648      	mov	r0, r9
 8004d6c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004d70:	f001 fcba 	bl	80066e8 <__d2b>
 8004d74:	901c      	str	r0, [sp, #112]	; 0x70
 8004d76:	2800      	cmp	r0, #0
 8004d78:	f43f aee0 	beq.w	8004b3c <_strtod_l+0x43c>
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4648      	mov	r0, r9
 8004d80:	f001 fa82 	bl	8006288 <__i2b>
 8004d84:	4680      	mov	r8, r0
 8004d86:	2800      	cmp	r0, #0
 8004d88:	f43f aed8 	beq.w	8004b3c <_strtod_l+0x43c>
 8004d8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004d8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d90:	2e00      	cmp	r6, #0
 8004d92:	bfab      	itete	ge
 8004d94:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004d96:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004d98:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004d9a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004d9c:	bfac      	ite	ge
 8004d9e:	18f7      	addge	r7, r6, r3
 8004da0:	1b9d      	sublt	r5, r3, r6
 8004da2:	9b04      	ldr	r3, [sp, #16]
 8004da4:	1af6      	subs	r6, r6, r3
 8004da6:	4416      	add	r6, r2
 8004da8:	4b63      	ldr	r3, [pc, #396]	; (8004f38 <_strtod_l+0x838>)
 8004daa:	3e01      	subs	r6, #1
 8004dac:	429e      	cmp	r6, r3
 8004dae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004db2:	f280 80af 	bge.w	8004f14 <_strtod_l+0x814>
 8004db6:	1b9b      	subs	r3, r3, r6
 8004db8:	2b1f      	cmp	r3, #31
 8004dba:	eba2 0203 	sub.w	r2, r2, r3
 8004dbe:	f04f 0101 	mov.w	r1, #1
 8004dc2:	f300 809b 	bgt.w	8004efc <_strtod_l+0x7fc>
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dcc:	2300      	movs	r3, #0
 8004dce:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd0:	18be      	adds	r6, r7, r2
 8004dd2:	9b04      	ldr	r3, [sp, #16]
 8004dd4:	42b7      	cmp	r7, r6
 8004dd6:	4415      	add	r5, r2
 8004dd8:	441d      	add	r5, r3
 8004dda:	463b      	mov	r3, r7
 8004ddc:	bfa8      	it	ge
 8004dde:	4633      	movge	r3, r6
 8004de0:	42ab      	cmp	r3, r5
 8004de2:	bfa8      	it	ge
 8004de4:	462b      	movge	r3, r5
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfc2      	ittt	gt
 8004dea:	1af6      	subgt	r6, r6, r3
 8004dec:	1aed      	subgt	r5, r5, r3
 8004dee:	1aff      	subgt	r7, r7, r3
 8004df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df2:	b1bb      	cbz	r3, 8004e24 <_strtod_l+0x724>
 8004df4:	4641      	mov	r1, r8
 8004df6:	461a      	mov	r2, r3
 8004df8:	4648      	mov	r0, r9
 8004dfa:	f001 fae5 	bl	80063c8 <__pow5mult>
 8004dfe:	4680      	mov	r8, r0
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f43f ae9b 	beq.w	8004b3c <_strtod_l+0x43c>
 8004e06:	4601      	mov	r1, r0
 8004e08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004e0a:	4648      	mov	r0, r9
 8004e0c:	f001 fa45 	bl	800629a <__multiply>
 8004e10:	900c      	str	r0, [sp, #48]	; 0x30
 8004e12:	2800      	cmp	r0, #0
 8004e14:	f43f ae92 	beq.w	8004b3c <_strtod_l+0x43c>
 8004e18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e1a:	4648      	mov	r0, r9
 8004e1c:	f001 f956 	bl	80060cc <_Bfree>
 8004e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e22:	931c      	str	r3, [sp, #112]	; 0x70
 8004e24:	2e00      	cmp	r6, #0
 8004e26:	dc7a      	bgt.n	8004f1e <_strtod_l+0x81e>
 8004e28:	9b06      	ldr	r3, [sp, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	dd08      	ble.n	8004e40 <_strtod_l+0x740>
 8004e2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004e30:	9905      	ldr	r1, [sp, #20]
 8004e32:	4648      	mov	r0, r9
 8004e34:	f001 fac8 	bl	80063c8 <__pow5mult>
 8004e38:	9005      	str	r0, [sp, #20]
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	f43f ae7e 	beq.w	8004b3c <_strtod_l+0x43c>
 8004e40:	2d00      	cmp	r5, #0
 8004e42:	dd08      	ble.n	8004e56 <_strtod_l+0x756>
 8004e44:	462a      	mov	r2, r5
 8004e46:	9905      	ldr	r1, [sp, #20]
 8004e48:	4648      	mov	r0, r9
 8004e4a:	f001 fb0b 	bl	8006464 <__lshift>
 8004e4e:	9005      	str	r0, [sp, #20]
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f43f ae73 	beq.w	8004b3c <_strtod_l+0x43c>
 8004e56:	2f00      	cmp	r7, #0
 8004e58:	dd08      	ble.n	8004e6c <_strtod_l+0x76c>
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	463a      	mov	r2, r7
 8004e5e:	4648      	mov	r0, r9
 8004e60:	f001 fb00 	bl	8006464 <__lshift>
 8004e64:	4680      	mov	r8, r0
 8004e66:	2800      	cmp	r0, #0
 8004e68:	f43f ae68 	beq.w	8004b3c <_strtod_l+0x43c>
 8004e6c:	9a05      	ldr	r2, [sp, #20]
 8004e6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e70:	4648      	mov	r0, r9
 8004e72:	f001 fb65 	bl	8006540 <__mdiff>
 8004e76:	4604      	mov	r4, r0
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	f43f ae5f 	beq.w	8004b3c <_strtod_l+0x43c>
 8004e7e:	68c3      	ldr	r3, [r0, #12]
 8004e80:	930c      	str	r3, [sp, #48]	; 0x30
 8004e82:	2300      	movs	r3, #0
 8004e84:	60c3      	str	r3, [r0, #12]
 8004e86:	4641      	mov	r1, r8
 8004e88:	f001 fb40 	bl	800650c <__mcmp>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	da55      	bge.n	8004f3c <_strtod_l+0x83c>
 8004e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e92:	b9e3      	cbnz	r3, 8004ece <_strtod_l+0x7ce>
 8004e94:	f1ba 0f00 	cmp.w	sl, #0
 8004e98:	d119      	bne.n	8004ece <_strtod_l+0x7ce>
 8004e9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e9e:	b9b3      	cbnz	r3, 8004ece <_strtod_l+0x7ce>
 8004ea0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ea4:	0d1b      	lsrs	r3, r3, #20
 8004ea6:	051b      	lsls	r3, r3, #20
 8004ea8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004eac:	d90f      	bls.n	8004ece <_strtod_l+0x7ce>
 8004eae:	6963      	ldr	r3, [r4, #20]
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_strtod_l+0x7b8>
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	dd0a      	ble.n	8004ece <_strtod_l+0x7ce>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4648      	mov	r0, r9
 8004ebe:	f001 fad1 	bl	8006464 <__lshift>
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	f001 fb21 	bl	800650c <__mcmp>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	dc67      	bgt.n	8004f9e <_strtod_l+0x89e>
 8004ece:	9b04      	ldr	r3, [sp, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d171      	bne.n	8004fb8 <_strtod_l+0x8b8>
 8004ed4:	e63d      	b.n	8004b52 <_strtod_l+0x452>
 8004ed6:	f018 0f01 	tst.w	r8, #1
 8004eda:	d004      	beq.n	8004ee6 <_strtod_l+0x7e6>
 8004edc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ee0:	f7fb fb8a 	bl	80005f8 <__aeabi_dmul>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004eea:	3508      	adds	r5, #8
 8004eec:	e6e5      	b.n	8004cba <_strtod_l+0x5ba>
 8004eee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	ea03 0a0a 	and.w	sl, r3, sl
 8004efa:	e6ff      	b.n	8004cfc <_strtod_l+0x5fc>
 8004efc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004f00:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004f04:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004f08:	36e2      	adds	r6, #226	; 0xe2
 8004f0a:	fa01 f306 	lsl.w	r3, r1, r6
 8004f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f10:	910f      	str	r1, [sp, #60]	; 0x3c
 8004f12:	e75d      	b.n	8004dd0 <_strtod_l+0x6d0>
 8004f14:	2300      	movs	r3, #0
 8004f16:	930a      	str	r3, [sp, #40]	; 0x28
 8004f18:	2301      	movs	r3, #1
 8004f1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f1c:	e758      	b.n	8004dd0 <_strtod_l+0x6d0>
 8004f1e:	4632      	mov	r2, r6
 8004f20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f22:	4648      	mov	r0, r9
 8004f24:	f001 fa9e 	bl	8006464 <__lshift>
 8004f28:	901c      	str	r0, [sp, #112]	; 0x70
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f47f af7c 	bne.w	8004e28 <_strtod_l+0x728>
 8004f30:	e604      	b.n	8004b3c <_strtod_l+0x43c>
 8004f32:	bf00      	nop
 8004f34:	08007be8 	.word	0x08007be8
 8004f38:	fffffc02 	.word	0xfffffc02
 8004f3c:	465d      	mov	r5, fp
 8004f3e:	f040 8086 	bne.w	800504e <_strtod_l+0x94e>
 8004f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f48:	b32a      	cbz	r2, 8004f96 <_strtod_l+0x896>
 8004f4a:	4aaf      	ldr	r2, [pc, #700]	; (8005208 <_strtod_l+0xb08>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d153      	bne.n	8004ff8 <_strtod_l+0x8f8>
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	4650      	mov	r0, sl
 8004f54:	b1d3      	cbz	r3, 8004f8c <_strtod_l+0x88c>
 8004f56:	4aad      	ldr	r2, [pc, #692]	; (800520c <_strtod_l+0xb0c>)
 8004f58:	402a      	ands	r2, r5
 8004f5a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f62:	d816      	bhi.n	8004f92 <_strtod_l+0x892>
 8004f64:	0d12      	lsrs	r2, r2, #20
 8004f66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	d142      	bne.n	8004ff8 <_strtod_l+0x8f8>
 8004f72:	4ba7      	ldr	r3, [pc, #668]	; (8005210 <_strtod_l+0xb10>)
 8004f74:	429d      	cmp	r5, r3
 8004f76:	d102      	bne.n	8004f7e <_strtod_l+0x87e>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f addf 	beq.w	8004b3c <_strtod_l+0x43c>
 8004f7e:	4ba3      	ldr	r3, [pc, #652]	; (800520c <_strtod_l+0xb0c>)
 8004f80:	402b      	ands	r3, r5
 8004f82:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004f86:	f04f 0a00 	mov.w	sl, #0
 8004f8a:	e7a0      	b.n	8004ece <_strtod_l+0x7ce>
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	e7ed      	b.n	8004f6e <_strtod_l+0x86e>
 8004f92:	460b      	mov	r3, r1
 8004f94:	e7eb      	b.n	8004f6e <_strtod_l+0x86e>
 8004f96:	bb7b      	cbnz	r3, 8004ff8 <_strtod_l+0x8f8>
 8004f98:	f1ba 0f00 	cmp.w	sl, #0
 8004f9c:	d12c      	bne.n	8004ff8 <_strtod_l+0x8f8>
 8004f9e:	9904      	ldr	r1, [sp, #16]
 8004fa0:	4a9a      	ldr	r2, [pc, #616]	; (800520c <_strtod_l+0xb0c>)
 8004fa2:	465b      	mov	r3, fp
 8004fa4:	b1f1      	cbz	r1, 8004fe4 <_strtod_l+0x8e4>
 8004fa6:	ea02 010b 	and.w	r1, r2, fp
 8004faa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004fae:	dc19      	bgt.n	8004fe4 <_strtod_l+0x8e4>
 8004fb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004fb4:	f77f ae5b 	ble.w	8004c6e <_strtod_l+0x56e>
 8004fb8:	4a96      	ldr	r2, [pc, #600]	; (8005214 <_strtod_l+0xb14>)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	4659      	mov	r1, fp
 8004fc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004fc8:	f7fb fb16 	bl	80005f8 <__aeabi_dmul>
 8004fcc:	4682      	mov	sl, r0
 8004fce:	468b      	mov	fp, r1
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	f47f adbe 	bne.w	8004b52 <_strtod_l+0x452>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	f47f adbb 	bne.w	8004b52 <_strtod_l+0x452>
 8004fdc:	2322      	movs	r3, #34	; 0x22
 8004fde:	f8c9 3000 	str.w	r3, [r9]
 8004fe2:	e5b6      	b.n	8004b52 <_strtod_l+0x452>
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004fea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004fee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004ff2:	f04f 3aff 	mov.w	sl, #4294967295
 8004ff6:	e76a      	b.n	8004ece <_strtod_l+0x7ce>
 8004ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ffa:	b193      	cbz	r3, 8005022 <_strtod_l+0x922>
 8004ffc:	422b      	tst	r3, r5
 8004ffe:	f43f af66 	beq.w	8004ece <_strtod_l+0x7ce>
 8005002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005004:	9a04      	ldr	r2, [sp, #16]
 8005006:	4650      	mov	r0, sl
 8005008:	4659      	mov	r1, fp
 800500a:	b173      	cbz	r3, 800502a <_strtod_l+0x92a>
 800500c:	f7ff fb5a 	bl	80046c4 <sulp>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005018:	f7fb f938 	bl	800028c <__adddf3>
 800501c:	4682      	mov	sl, r0
 800501e:	468b      	mov	fp, r1
 8005020:	e755      	b.n	8004ece <_strtod_l+0x7ce>
 8005022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005024:	ea13 0f0a 	tst.w	r3, sl
 8005028:	e7e9      	b.n	8004ffe <_strtod_l+0x8fe>
 800502a:	f7ff fb4b 	bl	80046c4 <sulp>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005036:	f7fb f927 	bl	8000288 <__aeabi_dsub>
 800503a:	2200      	movs	r2, #0
 800503c:	2300      	movs	r3, #0
 800503e:	4682      	mov	sl, r0
 8005040:	468b      	mov	fp, r1
 8005042:	f7fb fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 8005046:	2800      	cmp	r0, #0
 8005048:	f47f ae11 	bne.w	8004c6e <_strtod_l+0x56e>
 800504c:	e73f      	b.n	8004ece <_strtod_l+0x7ce>
 800504e:	4641      	mov	r1, r8
 8005050:	4620      	mov	r0, r4
 8005052:	f001 fb98 	bl	8006786 <__ratio>
 8005056:	ec57 6b10 	vmov	r6, r7, d0
 800505a:	2200      	movs	r2, #0
 800505c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005060:	ee10 0a10 	vmov	r0, s0
 8005064:	4639      	mov	r1, r7
 8005066:	f7fb fd43 	bl	8000af0 <__aeabi_dcmple>
 800506a:	2800      	cmp	r0, #0
 800506c:	d077      	beq.n	800515e <_strtod_l+0xa5e>
 800506e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005070:	2b00      	cmp	r3, #0
 8005072:	d04a      	beq.n	800510a <_strtod_l+0xa0a>
 8005074:	4b68      	ldr	r3, [pc, #416]	; (8005218 <_strtod_l+0xb18>)
 8005076:	2200      	movs	r2, #0
 8005078:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800507c:	4f66      	ldr	r7, [pc, #408]	; (8005218 <_strtod_l+0xb18>)
 800507e:	2600      	movs	r6, #0
 8005080:	4b62      	ldr	r3, [pc, #392]	; (800520c <_strtod_l+0xb0c>)
 8005082:	402b      	ands	r3, r5
 8005084:	930f      	str	r3, [sp, #60]	; 0x3c
 8005086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005088:	4b64      	ldr	r3, [pc, #400]	; (800521c <_strtod_l+0xb1c>)
 800508a:	429a      	cmp	r2, r3
 800508c:	f040 80ce 	bne.w	800522c <_strtod_l+0xb2c>
 8005090:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005094:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005098:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800509c:	ec4b ab10 	vmov	d0, sl, fp
 80050a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80050a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050a8:	f001 faa8 	bl	80065fc <__ulp>
 80050ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050b0:	ec53 2b10 	vmov	r2, r3, d0
 80050b4:	f7fb faa0 	bl	80005f8 <__aeabi_dmul>
 80050b8:	4652      	mov	r2, sl
 80050ba:	465b      	mov	r3, fp
 80050bc:	f7fb f8e6 	bl	800028c <__adddf3>
 80050c0:	460b      	mov	r3, r1
 80050c2:	4952      	ldr	r1, [pc, #328]	; (800520c <_strtod_l+0xb0c>)
 80050c4:	4a56      	ldr	r2, [pc, #344]	; (8005220 <_strtod_l+0xb20>)
 80050c6:	4019      	ands	r1, r3
 80050c8:	4291      	cmp	r1, r2
 80050ca:	4682      	mov	sl, r0
 80050cc:	d95b      	bls.n	8005186 <_strtod_l+0xa86>
 80050ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d103      	bne.n	80050e0 <_strtod_l+0x9e0>
 80050d8:	9b08      	ldr	r3, [sp, #32]
 80050da:	3301      	adds	r3, #1
 80050dc:	f43f ad2e 	beq.w	8004b3c <_strtod_l+0x43c>
 80050e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005210 <_strtod_l+0xb10>
 80050e4:	f04f 3aff 	mov.w	sl, #4294967295
 80050e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050ea:	4648      	mov	r0, r9
 80050ec:	f000 ffee 	bl	80060cc <_Bfree>
 80050f0:	9905      	ldr	r1, [sp, #20]
 80050f2:	4648      	mov	r0, r9
 80050f4:	f000 ffea 	bl	80060cc <_Bfree>
 80050f8:	4641      	mov	r1, r8
 80050fa:	4648      	mov	r0, r9
 80050fc:	f000 ffe6 	bl	80060cc <_Bfree>
 8005100:	4621      	mov	r1, r4
 8005102:	4648      	mov	r0, r9
 8005104:	f000 ffe2 	bl	80060cc <_Bfree>
 8005108:	e619      	b.n	8004d3e <_strtod_l+0x63e>
 800510a:	f1ba 0f00 	cmp.w	sl, #0
 800510e:	d11a      	bne.n	8005146 <_strtod_l+0xa46>
 8005110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005114:	b9eb      	cbnz	r3, 8005152 <_strtod_l+0xa52>
 8005116:	2200      	movs	r2, #0
 8005118:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <_strtod_l+0xb18>)
 800511a:	4630      	mov	r0, r6
 800511c:	4639      	mov	r1, r7
 800511e:	f7fb fcdd 	bl	8000adc <__aeabi_dcmplt>
 8005122:	b9c8      	cbnz	r0, 8005158 <_strtod_l+0xa58>
 8005124:	4630      	mov	r0, r6
 8005126:	4639      	mov	r1, r7
 8005128:	2200      	movs	r2, #0
 800512a:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <_strtod_l+0xb24>)
 800512c:	f7fb fa64 	bl	80005f8 <__aeabi_dmul>
 8005130:	4606      	mov	r6, r0
 8005132:	460f      	mov	r7, r1
 8005134:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005138:	9618      	str	r6, [sp, #96]	; 0x60
 800513a:	9319      	str	r3, [sp, #100]	; 0x64
 800513c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005140:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005144:	e79c      	b.n	8005080 <_strtod_l+0x980>
 8005146:	f1ba 0f01 	cmp.w	sl, #1
 800514a:	d102      	bne.n	8005152 <_strtod_l+0xa52>
 800514c:	2d00      	cmp	r5, #0
 800514e:	f43f ad8e 	beq.w	8004c6e <_strtod_l+0x56e>
 8005152:	2200      	movs	r2, #0
 8005154:	4b34      	ldr	r3, [pc, #208]	; (8005228 <_strtod_l+0xb28>)
 8005156:	e78f      	b.n	8005078 <_strtod_l+0x978>
 8005158:	2600      	movs	r6, #0
 800515a:	4f32      	ldr	r7, [pc, #200]	; (8005224 <_strtod_l+0xb24>)
 800515c:	e7ea      	b.n	8005134 <_strtod_l+0xa34>
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <_strtod_l+0xb24>)
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	2200      	movs	r2, #0
 8005166:	f7fb fa47 	bl	80005f8 <__aeabi_dmul>
 800516a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800516c:	4606      	mov	r6, r0
 800516e:	460f      	mov	r7, r1
 8005170:	b933      	cbnz	r3, 8005180 <_strtod_l+0xa80>
 8005172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005176:	9010      	str	r0, [sp, #64]	; 0x40
 8005178:	9311      	str	r3, [sp, #68]	; 0x44
 800517a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800517e:	e7df      	b.n	8005140 <_strtod_l+0xa40>
 8005180:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005184:	e7f9      	b.n	800517a <_strtod_l+0xa7a>
 8005186:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800518a:	9b04      	ldr	r3, [sp, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ab      	bne.n	80050e8 <_strtod_l+0x9e8>
 8005190:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005194:	0d1b      	lsrs	r3, r3, #20
 8005196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005198:	051b      	lsls	r3, r3, #20
 800519a:	429a      	cmp	r2, r3
 800519c:	465d      	mov	r5, fp
 800519e:	d1a3      	bne.n	80050e8 <_strtod_l+0x9e8>
 80051a0:	4639      	mov	r1, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	f7fb fcd8 	bl	8000b58 <__aeabi_d2iz>
 80051a8:	f7fb f9bc 	bl	8000524 <__aeabi_i2d>
 80051ac:	460b      	mov	r3, r1
 80051ae:	4602      	mov	r2, r0
 80051b0:	4639      	mov	r1, r7
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7fb f868 	bl	8000288 <__aeabi_dsub>
 80051b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051ba:	4606      	mov	r6, r0
 80051bc:	460f      	mov	r7, r1
 80051be:	b933      	cbnz	r3, 80051ce <_strtod_l+0xace>
 80051c0:	f1ba 0f00 	cmp.w	sl, #0
 80051c4:	d103      	bne.n	80051ce <_strtod_l+0xace>
 80051c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	d06d      	beq.n	80052aa <_strtod_l+0xbaa>
 80051ce:	a30a      	add	r3, pc, #40	; (adr r3, 80051f8 <_strtod_l+0xaf8>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb fc80 	bl	8000adc <__aeabi_dcmplt>
 80051dc:	2800      	cmp	r0, #0
 80051de:	f47f acb8 	bne.w	8004b52 <_strtod_l+0x452>
 80051e2:	a307      	add	r3, pc, #28	; (adr r3, 8005200 <_strtod_l+0xb00>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	f7fb fc94 	bl	8000b18 <__aeabi_dcmpgt>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	f43f af79 	beq.w	80050e8 <_strtod_l+0x9e8>
 80051f6:	e4ac      	b.n	8004b52 <_strtod_l+0x452>
 80051f8:	94a03595 	.word	0x94a03595
 80051fc:	3fdfffff 	.word	0x3fdfffff
 8005200:	35afe535 	.word	0x35afe535
 8005204:	3fe00000 	.word	0x3fe00000
 8005208:	000fffff 	.word	0x000fffff
 800520c:	7ff00000 	.word	0x7ff00000
 8005210:	7fefffff 	.word	0x7fefffff
 8005214:	39500000 	.word	0x39500000
 8005218:	3ff00000 	.word	0x3ff00000
 800521c:	7fe00000 	.word	0x7fe00000
 8005220:	7c9fffff 	.word	0x7c9fffff
 8005224:	3fe00000 	.word	0x3fe00000
 8005228:	bff00000 	.word	0xbff00000
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	b333      	cbz	r3, 800527e <_strtod_l+0xb7e>
 8005230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005232:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005236:	d822      	bhi.n	800527e <_strtod_l+0xb7e>
 8005238:	a327      	add	r3, pc, #156	; (adr r3, 80052d8 <_strtod_l+0xbd8>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	4630      	mov	r0, r6
 8005240:	4639      	mov	r1, r7
 8005242:	f7fb fc55 	bl	8000af0 <__aeabi_dcmple>
 8005246:	b1a0      	cbz	r0, 8005272 <_strtod_l+0xb72>
 8005248:	4639      	mov	r1, r7
 800524a:	4630      	mov	r0, r6
 800524c:	f7fb fcac 	bl	8000ba8 <__aeabi_d2uiz>
 8005250:	2800      	cmp	r0, #0
 8005252:	bf08      	it	eq
 8005254:	2001      	moveq	r0, #1
 8005256:	f7fb f955 	bl	8000504 <__aeabi_ui2d>
 800525a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800525c:	4606      	mov	r6, r0
 800525e:	460f      	mov	r7, r1
 8005260:	bb03      	cbnz	r3, 80052a4 <_strtod_l+0xba4>
 8005262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005266:	9012      	str	r0, [sp, #72]	; 0x48
 8005268:	9313      	str	r3, [sp, #76]	; 0x4c
 800526a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800526e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005276:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	930b      	str	r3, [sp, #44]	; 0x2c
 800527e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005282:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005286:	f001 f9b9 	bl	80065fc <__ulp>
 800528a:	4650      	mov	r0, sl
 800528c:	ec53 2b10 	vmov	r2, r3, d0
 8005290:	4659      	mov	r1, fp
 8005292:	f7fb f9b1 	bl	80005f8 <__aeabi_dmul>
 8005296:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800529a:	f7fa fff7 	bl	800028c <__adddf3>
 800529e:	4682      	mov	sl, r0
 80052a0:	468b      	mov	fp, r1
 80052a2:	e772      	b.n	800518a <_strtod_l+0xa8a>
 80052a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80052a8:	e7df      	b.n	800526a <_strtod_l+0xb6a>
 80052aa:	a30d      	add	r3, pc, #52	; (adr r3, 80052e0 <_strtod_l+0xbe0>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fb fc14 	bl	8000adc <__aeabi_dcmplt>
 80052b4:	e79c      	b.n	80051f0 <_strtod_l+0xaf0>
 80052b6:	2300      	movs	r3, #0
 80052b8:	930d      	str	r3, [sp, #52]	; 0x34
 80052ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80052bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	f7ff ba61 	b.w	8004786 <_strtod_l+0x86>
 80052c4:	2b65      	cmp	r3, #101	; 0x65
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f43f ab4e 	beq.w	800496a <_strtod_l+0x26a>
 80052ce:	2101      	movs	r1, #1
 80052d0:	4614      	mov	r4, r2
 80052d2:	9104      	str	r1, [sp, #16]
 80052d4:	f7ff bacb 	b.w	800486e <_strtod_l+0x16e>
 80052d8:	ffc00000 	.word	0xffc00000
 80052dc:	41dfffff 	.word	0x41dfffff
 80052e0:	94a03595 	.word	0x94a03595
 80052e4:	3fcfffff 	.word	0x3fcfffff

080052e8 <_strtod_r>:
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <_strtod_r+0x18>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	b410      	push	{r4}
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4c04      	ldr	r4, [pc, #16]	; (8005304 <_strtod_r+0x1c>)
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bf08      	it	eq
 80052f6:	4623      	moveq	r3, r4
 80052f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052fc:	f7ff ba00 	b.w	8004700 <_strtod_l>
 8005300:	2000000c 	.word	0x2000000c
 8005304:	20000070 	.word	0x20000070

08005308 <_strtol_l.isra.0>:
 8005308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800530c:	4680      	mov	r8, r0
 800530e:	4689      	mov	r9, r1
 8005310:	4692      	mov	sl, r2
 8005312:	461e      	mov	r6, r3
 8005314:	460f      	mov	r7, r1
 8005316:	463d      	mov	r5, r7
 8005318:	9808      	ldr	r0, [sp, #32]
 800531a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800531e:	f000 fe03 	bl	8005f28 <__locale_ctype_ptr_l>
 8005322:	4420      	add	r0, r4
 8005324:	7843      	ldrb	r3, [r0, #1]
 8005326:	f013 0308 	ands.w	r3, r3, #8
 800532a:	d132      	bne.n	8005392 <_strtol_l.isra.0+0x8a>
 800532c:	2c2d      	cmp	r4, #45	; 0x2d
 800532e:	d132      	bne.n	8005396 <_strtol_l.isra.0+0x8e>
 8005330:	787c      	ldrb	r4, [r7, #1]
 8005332:	1cbd      	adds	r5, r7, #2
 8005334:	2201      	movs	r2, #1
 8005336:	2e00      	cmp	r6, #0
 8005338:	d05d      	beq.n	80053f6 <_strtol_l.isra.0+0xee>
 800533a:	2e10      	cmp	r6, #16
 800533c:	d109      	bne.n	8005352 <_strtol_l.isra.0+0x4a>
 800533e:	2c30      	cmp	r4, #48	; 0x30
 8005340:	d107      	bne.n	8005352 <_strtol_l.isra.0+0x4a>
 8005342:	782b      	ldrb	r3, [r5, #0]
 8005344:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005348:	2b58      	cmp	r3, #88	; 0x58
 800534a:	d14f      	bne.n	80053ec <_strtol_l.isra.0+0xe4>
 800534c:	786c      	ldrb	r4, [r5, #1]
 800534e:	2610      	movs	r6, #16
 8005350:	3502      	adds	r5, #2
 8005352:	2a00      	cmp	r2, #0
 8005354:	bf14      	ite	ne
 8005356:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800535a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800535e:	2700      	movs	r7, #0
 8005360:	fbb1 fcf6 	udiv	ip, r1, r6
 8005364:	4638      	mov	r0, r7
 8005366:	fb06 1e1c 	mls	lr, r6, ip, r1
 800536a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800536e:	2b09      	cmp	r3, #9
 8005370:	d817      	bhi.n	80053a2 <_strtol_l.isra.0+0x9a>
 8005372:	461c      	mov	r4, r3
 8005374:	42a6      	cmp	r6, r4
 8005376:	dd23      	ble.n	80053c0 <_strtol_l.isra.0+0xb8>
 8005378:	1c7b      	adds	r3, r7, #1
 800537a:	d007      	beq.n	800538c <_strtol_l.isra.0+0x84>
 800537c:	4584      	cmp	ip, r0
 800537e:	d31c      	bcc.n	80053ba <_strtol_l.isra.0+0xb2>
 8005380:	d101      	bne.n	8005386 <_strtol_l.isra.0+0x7e>
 8005382:	45a6      	cmp	lr, r4
 8005384:	db19      	blt.n	80053ba <_strtol_l.isra.0+0xb2>
 8005386:	fb00 4006 	mla	r0, r0, r6, r4
 800538a:	2701      	movs	r7, #1
 800538c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005390:	e7eb      	b.n	800536a <_strtol_l.isra.0+0x62>
 8005392:	462f      	mov	r7, r5
 8005394:	e7bf      	b.n	8005316 <_strtol_l.isra.0+0xe>
 8005396:	2c2b      	cmp	r4, #43	; 0x2b
 8005398:	bf04      	itt	eq
 800539a:	1cbd      	addeq	r5, r7, #2
 800539c:	787c      	ldrbeq	r4, [r7, #1]
 800539e:	461a      	mov	r2, r3
 80053a0:	e7c9      	b.n	8005336 <_strtol_l.isra.0+0x2e>
 80053a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80053a6:	2b19      	cmp	r3, #25
 80053a8:	d801      	bhi.n	80053ae <_strtol_l.isra.0+0xa6>
 80053aa:	3c37      	subs	r4, #55	; 0x37
 80053ac:	e7e2      	b.n	8005374 <_strtol_l.isra.0+0x6c>
 80053ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80053b2:	2b19      	cmp	r3, #25
 80053b4:	d804      	bhi.n	80053c0 <_strtol_l.isra.0+0xb8>
 80053b6:	3c57      	subs	r4, #87	; 0x57
 80053b8:	e7dc      	b.n	8005374 <_strtol_l.isra.0+0x6c>
 80053ba:	f04f 37ff 	mov.w	r7, #4294967295
 80053be:	e7e5      	b.n	800538c <_strtol_l.isra.0+0x84>
 80053c0:	1c7b      	adds	r3, r7, #1
 80053c2:	d108      	bne.n	80053d6 <_strtol_l.isra.0+0xce>
 80053c4:	2322      	movs	r3, #34	; 0x22
 80053c6:	f8c8 3000 	str.w	r3, [r8]
 80053ca:	4608      	mov	r0, r1
 80053cc:	f1ba 0f00 	cmp.w	sl, #0
 80053d0:	d107      	bne.n	80053e2 <_strtol_l.isra.0+0xda>
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	b102      	cbz	r2, 80053da <_strtol_l.isra.0+0xd2>
 80053d8:	4240      	negs	r0, r0
 80053da:	f1ba 0f00 	cmp.w	sl, #0
 80053de:	d0f8      	beq.n	80053d2 <_strtol_l.isra.0+0xca>
 80053e0:	b10f      	cbz	r7, 80053e6 <_strtol_l.isra.0+0xde>
 80053e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80053e6:	f8ca 9000 	str.w	r9, [sl]
 80053ea:	e7f2      	b.n	80053d2 <_strtol_l.isra.0+0xca>
 80053ec:	2430      	movs	r4, #48	; 0x30
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	d1af      	bne.n	8005352 <_strtol_l.isra.0+0x4a>
 80053f2:	2608      	movs	r6, #8
 80053f4:	e7ad      	b.n	8005352 <_strtol_l.isra.0+0x4a>
 80053f6:	2c30      	cmp	r4, #48	; 0x30
 80053f8:	d0a3      	beq.n	8005342 <_strtol_l.isra.0+0x3a>
 80053fa:	260a      	movs	r6, #10
 80053fc:	e7a9      	b.n	8005352 <_strtol_l.isra.0+0x4a>
	...

08005400 <_strtol_r>:
 8005400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005402:	4c06      	ldr	r4, [pc, #24]	; (800541c <_strtol_r+0x1c>)
 8005404:	4d06      	ldr	r5, [pc, #24]	; (8005420 <_strtol_r+0x20>)
 8005406:	6824      	ldr	r4, [r4, #0]
 8005408:	6a24      	ldr	r4, [r4, #32]
 800540a:	2c00      	cmp	r4, #0
 800540c:	bf08      	it	eq
 800540e:	462c      	moveq	r4, r5
 8005410:	9400      	str	r4, [sp, #0]
 8005412:	f7ff ff79 	bl	8005308 <_strtol_l.isra.0>
 8005416:	b003      	add	sp, #12
 8005418:	bd30      	pop	{r4, r5, pc}
 800541a:	bf00      	nop
 800541c:	2000000c 	.word	0x2000000c
 8005420:	20000070 	.word	0x20000070

08005424 <__swbuf_r>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	460e      	mov	r6, r1
 8005428:	4614      	mov	r4, r2
 800542a:	4605      	mov	r5, r0
 800542c:	b118      	cbz	r0, 8005436 <__swbuf_r+0x12>
 800542e:	6983      	ldr	r3, [r0, #24]
 8005430:	b90b      	cbnz	r3, 8005436 <__swbuf_r+0x12>
 8005432:	f000 f9c9 	bl	80057c8 <__sinit>
 8005436:	4b21      	ldr	r3, [pc, #132]	; (80054bc <__swbuf_r+0x98>)
 8005438:	429c      	cmp	r4, r3
 800543a:	d12a      	bne.n	8005492 <__swbuf_r+0x6e>
 800543c:	686c      	ldr	r4, [r5, #4]
 800543e:	69a3      	ldr	r3, [r4, #24]
 8005440:	60a3      	str	r3, [r4, #8]
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	071a      	lsls	r2, r3, #28
 8005446:	d52e      	bpl.n	80054a6 <__swbuf_r+0x82>
 8005448:	6923      	ldr	r3, [r4, #16]
 800544a:	b363      	cbz	r3, 80054a6 <__swbuf_r+0x82>
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	6820      	ldr	r0, [r4, #0]
 8005450:	1ac0      	subs	r0, r0, r3
 8005452:	6963      	ldr	r3, [r4, #20]
 8005454:	b2f6      	uxtb	r6, r6
 8005456:	4283      	cmp	r3, r0
 8005458:	4637      	mov	r7, r6
 800545a:	dc04      	bgt.n	8005466 <__swbuf_r+0x42>
 800545c:	4621      	mov	r1, r4
 800545e:	4628      	mov	r0, r5
 8005460:	f000 f948 	bl	80056f4 <_fflush_r>
 8005464:	bb28      	cbnz	r0, 80054b2 <__swbuf_r+0x8e>
 8005466:	68a3      	ldr	r3, [r4, #8]
 8005468:	3b01      	subs	r3, #1
 800546a:	60a3      	str	r3, [r4, #8]
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	6022      	str	r2, [r4, #0]
 8005472:	701e      	strb	r6, [r3, #0]
 8005474:	6963      	ldr	r3, [r4, #20]
 8005476:	3001      	adds	r0, #1
 8005478:	4283      	cmp	r3, r0
 800547a:	d004      	beq.n	8005486 <__swbuf_r+0x62>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	07db      	lsls	r3, r3, #31
 8005480:	d519      	bpl.n	80054b6 <__swbuf_r+0x92>
 8005482:	2e0a      	cmp	r6, #10
 8005484:	d117      	bne.n	80054b6 <__swbuf_r+0x92>
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f933 	bl	80056f4 <_fflush_r>
 800548e:	b190      	cbz	r0, 80054b6 <__swbuf_r+0x92>
 8005490:	e00f      	b.n	80054b2 <__swbuf_r+0x8e>
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <__swbuf_r+0x9c>)
 8005494:	429c      	cmp	r4, r3
 8005496:	d101      	bne.n	800549c <__swbuf_r+0x78>
 8005498:	68ac      	ldr	r4, [r5, #8]
 800549a:	e7d0      	b.n	800543e <__swbuf_r+0x1a>
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <__swbuf_r+0xa0>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	bf08      	it	eq
 80054a2:	68ec      	ldreq	r4, [r5, #12]
 80054a4:	e7cb      	b.n	800543e <__swbuf_r+0x1a>
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 f81f 	bl	80054ec <__swsetup_r>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d0cc      	beq.n	800544c <__swbuf_r+0x28>
 80054b2:	f04f 37ff 	mov.w	r7, #4294967295
 80054b6:	4638      	mov	r0, r7
 80054b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ba:	bf00      	nop
 80054bc:	08007c30 	.word	0x08007c30
 80054c0:	08007c50 	.word	0x08007c50
 80054c4:	08007c10 	.word	0x08007c10

080054c8 <_write_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4c07      	ldr	r4, [pc, #28]	; (80054e8 <_write_r+0x20>)
 80054cc:	4605      	mov	r5, r0
 80054ce:	4608      	mov	r0, r1
 80054d0:	4611      	mov	r1, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	6022      	str	r2, [r4, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7fc fa5f 	bl	800199a <_write>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_write_r+0x1e>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_write_r+0x1e>
 80054e4:	602b      	str	r3, [r5, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200003b8 	.word	0x200003b8

080054ec <__swsetup_r>:
 80054ec:	4b32      	ldr	r3, [pc, #200]	; (80055b8 <__swsetup_r+0xcc>)
 80054ee:	b570      	push	{r4, r5, r6, lr}
 80054f0:	681d      	ldr	r5, [r3, #0]
 80054f2:	4606      	mov	r6, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	b125      	cbz	r5, 8005502 <__swsetup_r+0x16>
 80054f8:	69ab      	ldr	r3, [r5, #24]
 80054fa:	b913      	cbnz	r3, 8005502 <__swsetup_r+0x16>
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f963 	bl	80057c8 <__sinit>
 8005502:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <__swsetup_r+0xd0>)
 8005504:	429c      	cmp	r4, r3
 8005506:	d10f      	bne.n	8005528 <__swsetup_r+0x3c>
 8005508:	686c      	ldr	r4, [r5, #4]
 800550a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550e:	b29a      	uxth	r2, r3
 8005510:	0715      	lsls	r5, r2, #28
 8005512:	d42c      	bmi.n	800556e <__swsetup_r+0x82>
 8005514:	06d0      	lsls	r0, r2, #27
 8005516:	d411      	bmi.n	800553c <__swsetup_r+0x50>
 8005518:	2209      	movs	r2, #9
 800551a:	6032      	str	r2, [r6, #0]
 800551c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	e03e      	b.n	80055a6 <__swsetup_r+0xba>
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <__swsetup_r+0xd4>)
 800552a:	429c      	cmp	r4, r3
 800552c:	d101      	bne.n	8005532 <__swsetup_r+0x46>
 800552e:	68ac      	ldr	r4, [r5, #8]
 8005530:	e7eb      	b.n	800550a <__swsetup_r+0x1e>
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <__swsetup_r+0xd8>)
 8005534:	429c      	cmp	r4, r3
 8005536:	bf08      	it	eq
 8005538:	68ec      	ldreq	r4, [r5, #12]
 800553a:	e7e6      	b.n	800550a <__swsetup_r+0x1e>
 800553c:	0751      	lsls	r1, r2, #29
 800553e:	d512      	bpl.n	8005566 <__swsetup_r+0x7a>
 8005540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005542:	b141      	cbz	r1, 8005556 <__swsetup_r+0x6a>
 8005544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005548:	4299      	cmp	r1, r3
 800554a:	d002      	beq.n	8005552 <__swsetup_r+0x66>
 800554c:	4630      	mov	r0, r6
 800554e:	f7fe fcff 	bl	8003f50 <_free_r>
 8005552:	2300      	movs	r3, #0
 8005554:	6363      	str	r3, [r4, #52]	; 0x34
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	2300      	movs	r3, #0
 8005560:	6063      	str	r3, [r4, #4]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f043 0308 	orr.w	r3, r3, #8
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	b94b      	cbnz	r3, 8005586 <__swsetup_r+0x9a>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557c:	d003      	beq.n	8005586 <__swsetup_r+0x9a>
 800557e:	4621      	mov	r1, r4
 8005580:	4630      	mov	r0, r6
 8005582:	f000 fd1b 	bl	8005fbc <__smakebuf_r>
 8005586:	89a2      	ldrh	r2, [r4, #12]
 8005588:	f012 0301 	ands.w	r3, r2, #1
 800558c:	d00c      	beq.n	80055a8 <__swsetup_r+0xbc>
 800558e:	2300      	movs	r3, #0
 8005590:	60a3      	str	r3, [r4, #8]
 8005592:	6963      	ldr	r3, [r4, #20]
 8005594:	425b      	negs	r3, r3
 8005596:	61a3      	str	r3, [r4, #24]
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	b953      	cbnz	r3, 80055b2 <__swsetup_r+0xc6>
 800559c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80055a4:	d1ba      	bne.n	800551c <__swsetup_r+0x30>
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	0792      	lsls	r2, r2, #30
 80055aa:	bf58      	it	pl
 80055ac:	6963      	ldrpl	r3, [r4, #20]
 80055ae:	60a3      	str	r3, [r4, #8]
 80055b0:	e7f2      	b.n	8005598 <__swsetup_r+0xac>
 80055b2:	2000      	movs	r0, #0
 80055b4:	e7f7      	b.n	80055a6 <__swsetup_r+0xba>
 80055b6:	bf00      	nop
 80055b8:	2000000c 	.word	0x2000000c
 80055bc:	08007c30 	.word	0x08007c30
 80055c0:	08007c50 	.word	0x08007c50
 80055c4:	08007c10 	.word	0x08007c10

080055c8 <_close_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4c06      	ldr	r4, [pc, #24]	; (80055e4 <_close_r+0x1c>)
 80055cc:	2300      	movs	r3, #0
 80055ce:	4605      	mov	r5, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	6023      	str	r3, [r4, #0]
 80055d4:	f7fc f9fd 	bl	80019d2 <_close>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_close_r+0x1a>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_close_r+0x1a>
 80055e0:	602b      	str	r3, [r5, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	200003b8 	.word	0x200003b8

080055e8 <__sflush_r>:
 80055e8:	898a      	ldrh	r2, [r1, #12]
 80055ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ee:	4605      	mov	r5, r0
 80055f0:	0710      	lsls	r0, r2, #28
 80055f2:	460c      	mov	r4, r1
 80055f4:	d458      	bmi.n	80056a8 <__sflush_r+0xc0>
 80055f6:	684b      	ldr	r3, [r1, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dc05      	bgt.n	8005608 <__sflush_r+0x20>
 80055fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	dc02      	bgt.n	8005608 <__sflush_r+0x20>
 8005602:	2000      	movs	r0, #0
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800560a:	2e00      	cmp	r6, #0
 800560c:	d0f9      	beq.n	8005602 <__sflush_r+0x1a>
 800560e:	2300      	movs	r3, #0
 8005610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005614:	682f      	ldr	r7, [r5, #0]
 8005616:	6a21      	ldr	r1, [r4, #32]
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	d032      	beq.n	8005682 <__sflush_r+0x9a>
 800561c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	075a      	lsls	r2, r3, #29
 8005622:	d505      	bpl.n	8005630 <__sflush_r+0x48>
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	1ac0      	subs	r0, r0, r3
 8005628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800562a:	b10b      	cbz	r3, 8005630 <__sflush_r+0x48>
 800562c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800562e:	1ac0      	subs	r0, r0, r3
 8005630:	2300      	movs	r3, #0
 8005632:	4602      	mov	r2, r0
 8005634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005636:	6a21      	ldr	r1, [r4, #32]
 8005638:	4628      	mov	r0, r5
 800563a:	47b0      	blx	r6
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	d106      	bne.n	8005650 <__sflush_r+0x68>
 8005642:	6829      	ldr	r1, [r5, #0]
 8005644:	291d      	cmp	r1, #29
 8005646:	d848      	bhi.n	80056da <__sflush_r+0xf2>
 8005648:	4a29      	ldr	r2, [pc, #164]	; (80056f0 <__sflush_r+0x108>)
 800564a:	40ca      	lsrs	r2, r1
 800564c:	07d6      	lsls	r6, r2, #31
 800564e:	d544      	bpl.n	80056da <__sflush_r+0xf2>
 8005650:	2200      	movs	r2, #0
 8005652:	6062      	str	r2, [r4, #4]
 8005654:	04d9      	lsls	r1, r3, #19
 8005656:	6922      	ldr	r2, [r4, #16]
 8005658:	6022      	str	r2, [r4, #0]
 800565a:	d504      	bpl.n	8005666 <__sflush_r+0x7e>
 800565c:	1c42      	adds	r2, r0, #1
 800565e:	d101      	bne.n	8005664 <__sflush_r+0x7c>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b903      	cbnz	r3, 8005666 <__sflush_r+0x7e>
 8005664:	6560      	str	r0, [r4, #84]	; 0x54
 8005666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005668:	602f      	str	r7, [r5, #0]
 800566a:	2900      	cmp	r1, #0
 800566c:	d0c9      	beq.n	8005602 <__sflush_r+0x1a>
 800566e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005672:	4299      	cmp	r1, r3
 8005674:	d002      	beq.n	800567c <__sflush_r+0x94>
 8005676:	4628      	mov	r0, r5
 8005678:	f7fe fc6a 	bl	8003f50 <_free_r>
 800567c:	2000      	movs	r0, #0
 800567e:	6360      	str	r0, [r4, #52]	; 0x34
 8005680:	e7c0      	b.n	8005604 <__sflush_r+0x1c>
 8005682:	2301      	movs	r3, #1
 8005684:	4628      	mov	r0, r5
 8005686:	47b0      	blx	r6
 8005688:	1c41      	adds	r1, r0, #1
 800568a:	d1c8      	bne.n	800561e <__sflush_r+0x36>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0c5      	beq.n	800561e <__sflush_r+0x36>
 8005692:	2b1d      	cmp	r3, #29
 8005694:	d001      	beq.n	800569a <__sflush_r+0xb2>
 8005696:	2b16      	cmp	r3, #22
 8005698:	d101      	bne.n	800569e <__sflush_r+0xb6>
 800569a:	602f      	str	r7, [r5, #0]
 800569c:	e7b1      	b.n	8005602 <__sflush_r+0x1a>
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a4:	81a3      	strh	r3, [r4, #12]
 80056a6:	e7ad      	b.n	8005604 <__sflush_r+0x1c>
 80056a8:	690f      	ldr	r7, [r1, #16]
 80056aa:	2f00      	cmp	r7, #0
 80056ac:	d0a9      	beq.n	8005602 <__sflush_r+0x1a>
 80056ae:	0793      	lsls	r3, r2, #30
 80056b0:	680e      	ldr	r6, [r1, #0]
 80056b2:	bf08      	it	eq
 80056b4:	694b      	ldreq	r3, [r1, #20]
 80056b6:	600f      	str	r7, [r1, #0]
 80056b8:	bf18      	it	ne
 80056ba:	2300      	movne	r3, #0
 80056bc:	eba6 0807 	sub.w	r8, r6, r7
 80056c0:	608b      	str	r3, [r1, #8]
 80056c2:	f1b8 0f00 	cmp.w	r8, #0
 80056c6:	dd9c      	ble.n	8005602 <__sflush_r+0x1a>
 80056c8:	4643      	mov	r3, r8
 80056ca:	463a      	mov	r2, r7
 80056cc:	6a21      	ldr	r1, [r4, #32]
 80056ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b0      	blx	r6
 80056d4:	2800      	cmp	r0, #0
 80056d6:	dc06      	bgt.n	80056e6 <__sflush_r+0xfe>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	f04f 30ff 	mov.w	r0, #4294967295
 80056e4:	e78e      	b.n	8005604 <__sflush_r+0x1c>
 80056e6:	4407      	add	r7, r0
 80056e8:	eba8 0800 	sub.w	r8, r8, r0
 80056ec:	e7e9      	b.n	80056c2 <__sflush_r+0xda>
 80056ee:	bf00      	nop
 80056f0:	20400001 	.word	0x20400001

080056f4 <_fflush_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	690b      	ldr	r3, [r1, #16]
 80056f8:	4605      	mov	r5, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	b1db      	cbz	r3, 8005736 <_fflush_r+0x42>
 80056fe:	b118      	cbz	r0, 8005708 <_fflush_r+0x14>
 8005700:	6983      	ldr	r3, [r0, #24]
 8005702:	b90b      	cbnz	r3, 8005708 <_fflush_r+0x14>
 8005704:	f000 f860 	bl	80057c8 <__sinit>
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <_fflush_r+0x48>)
 800570a:	429c      	cmp	r4, r3
 800570c:	d109      	bne.n	8005722 <_fflush_r+0x2e>
 800570e:	686c      	ldr	r4, [r5, #4]
 8005710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005714:	b17b      	cbz	r3, 8005736 <_fflush_r+0x42>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571e:	f7ff bf63 	b.w	80055e8 <__sflush_r>
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <_fflush_r+0x4c>)
 8005724:	429c      	cmp	r4, r3
 8005726:	d101      	bne.n	800572c <_fflush_r+0x38>
 8005728:	68ac      	ldr	r4, [r5, #8]
 800572a:	e7f1      	b.n	8005710 <_fflush_r+0x1c>
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <_fflush_r+0x50>)
 800572e:	429c      	cmp	r4, r3
 8005730:	bf08      	it	eq
 8005732:	68ec      	ldreq	r4, [r5, #12]
 8005734:	e7ec      	b.n	8005710 <_fflush_r+0x1c>
 8005736:	2000      	movs	r0, #0
 8005738:	bd38      	pop	{r3, r4, r5, pc}
 800573a:	bf00      	nop
 800573c:	08007c30 	.word	0x08007c30
 8005740:	08007c50 	.word	0x08007c50
 8005744:	08007c10 	.word	0x08007c10

08005748 <std>:
 8005748:	2300      	movs	r3, #0
 800574a:	b510      	push	{r4, lr}
 800574c:	4604      	mov	r4, r0
 800574e:	e9c0 3300 	strd	r3, r3, [r0]
 8005752:	6083      	str	r3, [r0, #8]
 8005754:	8181      	strh	r1, [r0, #12]
 8005756:	6643      	str	r3, [r0, #100]	; 0x64
 8005758:	81c2      	strh	r2, [r0, #14]
 800575a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800575e:	6183      	str	r3, [r0, #24]
 8005760:	4619      	mov	r1, r3
 8005762:	2208      	movs	r2, #8
 8005764:	305c      	adds	r0, #92	; 0x5c
 8005766:	f7fe fbdc 	bl	8003f22 <memset>
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <std+0x38>)
 800576c:	6263      	str	r3, [r4, #36]	; 0x24
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <std+0x3c>)
 8005770:	62a3      	str	r3, [r4, #40]	; 0x28
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <std+0x40>)
 8005774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <std+0x44>)
 8005778:	6224      	str	r4, [r4, #32]
 800577a:	6323      	str	r3, [r4, #48]	; 0x30
 800577c:	bd10      	pop	{r4, pc}
 800577e:	bf00      	nop
 8005780:	0800461d 	.word	0x0800461d
 8005784:	08004643 	.word	0x08004643
 8005788:	0800467b 	.word	0x0800467b
 800578c:	0800469f 	.word	0x0800469f

08005790 <_cleanup_r>:
 8005790:	4901      	ldr	r1, [pc, #4]	; (8005798 <_cleanup_r+0x8>)
 8005792:	f000 b885 	b.w	80058a0 <_fwalk_reent>
 8005796:	bf00      	nop
 8005798:	080056f5 	.word	0x080056f5

0800579c <__sfmoreglue>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	1e4a      	subs	r2, r1, #1
 80057a0:	2568      	movs	r5, #104	; 0x68
 80057a2:	4355      	muls	r5, r2
 80057a4:	460e      	mov	r6, r1
 80057a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057aa:	f7fe fc1f 	bl	8003fec <_malloc_r>
 80057ae:	4604      	mov	r4, r0
 80057b0:	b140      	cbz	r0, 80057c4 <__sfmoreglue+0x28>
 80057b2:	2100      	movs	r1, #0
 80057b4:	e9c0 1600 	strd	r1, r6, [r0]
 80057b8:	300c      	adds	r0, #12
 80057ba:	60a0      	str	r0, [r4, #8]
 80057bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057c0:	f7fe fbaf 	bl	8003f22 <memset>
 80057c4:	4620      	mov	r0, r4
 80057c6:	bd70      	pop	{r4, r5, r6, pc}

080057c8 <__sinit>:
 80057c8:	6983      	ldr	r3, [r0, #24]
 80057ca:	b510      	push	{r4, lr}
 80057cc:	4604      	mov	r4, r0
 80057ce:	bb33      	cbnz	r3, 800581e <__sinit+0x56>
 80057d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80057d4:	6503      	str	r3, [r0, #80]	; 0x50
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <__sinit+0x58>)
 80057d8:	4a12      	ldr	r2, [pc, #72]	; (8005824 <__sinit+0x5c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6282      	str	r2, [r0, #40]	; 0x28
 80057de:	4298      	cmp	r0, r3
 80057e0:	bf04      	itt	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	6183      	streq	r3, [r0, #24]
 80057e6:	f000 f81f 	bl	8005828 <__sfp>
 80057ea:	6060      	str	r0, [r4, #4]
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 f81b 	bl	8005828 <__sfp>
 80057f2:	60a0      	str	r0, [r4, #8]
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 f817 	bl	8005828 <__sfp>
 80057fa:	2200      	movs	r2, #0
 80057fc:	60e0      	str	r0, [r4, #12]
 80057fe:	2104      	movs	r1, #4
 8005800:	6860      	ldr	r0, [r4, #4]
 8005802:	f7ff ffa1 	bl	8005748 <std>
 8005806:	2201      	movs	r2, #1
 8005808:	2109      	movs	r1, #9
 800580a:	68a0      	ldr	r0, [r4, #8]
 800580c:	f7ff ff9c 	bl	8005748 <std>
 8005810:	2202      	movs	r2, #2
 8005812:	2112      	movs	r1, #18
 8005814:	68e0      	ldr	r0, [r4, #12]
 8005816:	f7ff ff97 	bl	8005748 <std>
 800581a:	2301      	movs	r3, #1
 800581c:	61a3      	str	r3, [r4, #24]
 800581e:	bd10      	pop	{r4, pc}
 8005820:	08007ba4 	.word	0x08007ba4
 8005824:	08005791 	.word	0x08005791

08005828 <__sfp>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <__sfp+0x70>)
 800582c:	681e      	ldr	r6, [r3, #0]
 800582e:	69b3      	ldr	r3, [r6, #24]
 8005830:	4607      	mov	r7, r0
 8005832:	b913      	cbnz	r3, 800583a <__sfp+0x12>
 8005834:	4630      	mov	r0, r6
 8005836:	f7ff ffc7 	bl	80057c8 <__sinit>
 800583a:	3648      	adds	r6, #72	; 0x48
 800583c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005840:	3b01      	subs	r3, #1
 8005842:	d503      	bpl.n	800584c <__sfp+0x24>
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	b133      	cbz	r3, 8005856 <__sfp+0x2e>
 8005848:	6836      	ldr	r6, [r6, #0]
 800584a:	e7f7      	b.n	800583c <__sfp+0x14>
 800584c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005850:	b16d      	cbz	r5, 800586e <__sfp+0x46>
 8005852:	3468      	adds	r4, #104	; 0x68
 8005854:	e7f4      	b.n	8005840 <__sfp+0x18>
 8005856:	2104      	movs	r1, #4
 8005858:	4638      	mov	r0, r7
 800585a:	f7ff ff9f 	bl	800579c <__sfmoreglue>
 800585e:	6030      	str	r0, [r6, #0]
 8005860:	2800      	cmp	r0, #0
 8005862:	d1f1      	bne.n	8005848 <__sfp+0x20>
 8005864:	230c      	movs	r3, #12
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4604      	mov	r4, r0
 800586a:	4620      	mov	r0, r4
 800586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <__sfp+0x74>)
 8005870:	6665      	str	r5, [r4, #100]	; 0x64
 8005872:	e9c4 5500 	strd	r5, r5, [r4]
 8005876:	60a5      	str	r5, [r4, #8]
 8005878:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800587c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005880:	2208      	movs	r2, #8
 8005882:	4629      	mov	r1, r5
 8005884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005888:	f7fe fb4b 	bl	8003f22 <memset>
 800588c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005894:	e7e9      	b.n	800586a <__sfp+0x42>
 8005896:	bf00      	nop
 8005898:	08007ba4 	.word	0x08007ba4
 800589c:	ffff0001 	.word	0xffff0001

080058a0 <_fwalk_reent>:
 80058a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a4:	4680      	mov	r8, r0
 80058a6:	4689      	mov	r9, r1
 80058a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058ac:	2600      	movs	r6, #0
 80058ae:	b914      	cbnz	r4, 80058b6 <_fwalk_reent+0x16>
 80058b0:	4630      	mov	r0, r6
 80058b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80058ba:	3f01      	subs	r7, #1
 80058bc:	d501      	bpl.n	80058c2 <_fwalk_reent+0x22>
 80058be:	6824      	ldr	r4, [r4, #0]
 80058c0:	e7f5      	b.n	80058ae <_fwalk_reent+0xe>
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d907      	bls.n	80058d8 <_fwalk_reent+0x38>
 80058c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058cc:	3301      	adds	r3, #1
 80058ce:	d003      	beq.n	80058d8 <_fwalk_reent+0x38>
 80058d0:	4629      	mov	r1, r5
 80058d2:	4640      	mov	r0, r8
 80058d4:	47c8      	blx	r9
 80058d6:	4306      	orrs	r6, r0
 80058d8:	3568      	adds	r5, #104	; 0x68
 80058da:	e7ee      	b.n	80058ba <_fwalk_reent+0x1a>

080058dc <rshift>:
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	6906      	ldr	r6, [r0, #16]
 80058e0:	114b      	asrs	r3, r1, #5
 80058e2:	429e      	cmp	r6, r3
 80058e4:	f100 0414 	add.w	r4, r0, #20
 80058e8:	dd30      	ble.n	800594c <rshift+0x70>
 80058ea:	f011 011f 	ands.w	r1, r1, #31
 80058ee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80058f2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80058f6:	d108      	bne.n	800590a <rshift+0x2e>
 80058f8:	4621      	mov	r1, r4
 80058fa:	42b2      	cmp	r2, r6
 80058fc:	460b      	mov	r3, r1
 80058fe:	d211      	bcs.n	8005924 <rshift+0x48>
 8005900:	f852 3b04 	ldr.w	r3, [r2], #4
 8005904:	f841 3b04 	str.w	r3, [r1], #4
 8005908:	e7f7      	b.n	80058fa <rshift+0x1e>
 800590a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800590e:	f1c1 0c20 	rsb	ip, r1, #32
 8005912:	40cd      	lsrs	r5, r1
 8005914:	3204      	adds	r2, #4
 8005916:	4623      	mov	r3, r4
 8005918:	42b2      	cmp	r2, r6
 800591a:	4617      	mov	r7, r2
 800591c:	d30c      	bcc.n	8005938 <rshift+0x5c>
 800591e:	601d      	str	r5, [r3, #0]
 8005920:	b105      	cbz	r5, 8005924 <rshift+0x48>
 8005922:	3304      	adds	r3, #4
 8005924:	1b1a      	subs	r2, r3, r4
 8005926:	42a3      	cmp	r3, r4
 8005928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800592c:	bf08      	it	eq
 800592e:	2300      	moveq	r3, #0
 8005930:	6102      	str	r2, [r0, #16]
 8005932:	bf08      	it	eq
 8005934:	6143      	streq	r3, [r0, #20]
 8005936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005938:	683f      	ldr	r7, [r7, #0]
 800593a:	fa07 f70c 	lsl.w	r7, r7, ip
 800593e:	433d      	orrs	r5, r7
 8005940:	f843 5b04 	str.w	r5, [r3], #4
 8005944:	f852 5b04 	ldr.w	r5, [r2], #4
 8005948:	40cd      	lsrs	r5, r1
 800594a:	e7e5      	b.n	8005918 <rshift+0x3c>
 800594c:	4623      	mov	r3, r4
 800594e:	e7e9      	b.n	8005924 <rshift+0x48>

08005950 <__hexdig_fun>:
 8005950:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005954:	2b09      	cmp	r3, #9
 8005956:	d802      	bhi.n	800595e <__hexdig_fun+0xe>
 8005958:	3820      	subs	r0, #32
 800595a:	b2c0      	uxtb	r0, r0
 800595c:	4770      	bx	lr
 800595e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005962:	2b05      	cmp	r3, #5
 8005964:	d801      	bhi.n	800596a <__hexdig_fun+0x1a>
 8005966:	3847      	subs	r0, #71	; 0x47
 8005968:	e7f7      	b.n	800595a <__hexdig_fun+0xa>
 800596a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800596e:	2b05      	cmp	r3, #5
 8005970:	d801      	bhi.n	8005976 <__hexdig_fun+0x26>
 8005972:	3827      	subs	r0, #39	; 0x27
 8005974:	e7f1      	b.n	800595a <__hexdig_fun+0xa>
 8005976:	2000      	movs	r0, #0
 8005978:	4770      	bx	lr

0800597a <__gethex>:
 800597a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597e:	b08b      	sub	sp, #44	; 0x2c
 8005980:	468a      	mov	sl, r1
 8005982:	9002      	str	r0, [sp, #8]
 8005984:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005986:	9306      	str	r3, [sp, #24]
 8005988:	4690      	mov	r8, r2
 800598a:	f000 fadf 	bl	8005f4c <__localeconv_l>
 800598e:	6803      	ldr	r3, [r0, #0]
 8005990:	9303      	str	r3, [sp, #12]
 8005992:	4618      	mov	r0, r3
 8005994:	f7fa fc1c 	bl	80001d0 <strlen>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	9001      	str	r0, [sp, #4]
 800599c:	4403      	add	r3, r0
 800599e:	f04f 0b00 	mov.w	fp, #0
 80059a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80059a6:	9307      	str	r3, [sp, #28]
 80059a8:	f8da 3000 	ldr.w	r3, [sl]
 80059ac:	3302      	adds	r3, #2
 80059ae:	461f      	mov	r7, r3
 80059b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80059b4:	2830      	cmp	r0, #48	; 0x30
 80059b6:	d06c      	beq.n	8005a92 <__gethex+0x118>
 80059b8:	f7ff ffca 	bl	8005950 <__hexdig_fun>
 80059bc:	4604      	mov	r4, r0
 80059be:	2800      	cmp	r0, #0
 80059c0:	d16a      	bne.n	8005a98 <__gethex+0x11e>
 80059c2:	9a01      	ldr	r2, [sp, #4]
 80059c4:	9903      	ldr	r1, [sp, #12]
 80059c6:	4638      	mov	r0, r7
 80059c8:	f001 feac 	bl	8007724 <strncmp>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d166      	bne.n	8005a9e <__gethex+0x124>
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	5cf8      	ldrb	r0, [r7, r3]
 80059d4:	18fe      	adds	r6, r7, r3
 80059d6:	f7ff ffbb 	bl	8005950 <__hexdig_fun>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d062      	beq.n	8005aa4 <__gethex+0x12a>
 80059de:	4633      	mov	r3, r6
 80059e0:	7818      	ldrb	r0, [r3, #0]
 80059e2:	2830      	cmp	r0, #48	; 0x30
 80059e4:	461f      	mov	r7, r3
 80059e6:	f103 0301 	add.w	r3, r3, #1
 80059ea:	d0f9      	beq.n	80059e0 <__gethex+0x66>
 80059ec:	f7ff ffb0 	bl	8005950 <__hexdig_fun>
 80059f0:	fab0 f580 	clz	r5, r0
 80059f4:	096d      	lsrs	r5, r5, #5
 80059f6:	4634      	mov	r4, r6
 80059f8:	f04f 0b01 	mov.w	fp, #1
 80059fc:	463a      	mov	r2, r7
 80059fe:	4616      	mov	r6, r2
 8005a00:	3201      	adds	r2, #1
 8005a02:	7830      	ldrb	r0, [r6, #0]
 8005a04:	f7ff ffa4 	bl	8005950 <__hexdig_fun>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d1f8      	bne.n	80059fe <__gethex+0x84>
 8005a0c:	9a01      	ldr	r2, [sp, #4]
 8005a0e:	9903      	ldr	r1, [sp, #12]
 8005a10:	4630      	mov	r0, r6
 8005a12:	f001 fe87 	bl	8007724 <strncmp>
 8005a16:	b950      	cbnz	r0, 8005a2e <__gethex+0xb4>
 8005a18:	b954      	cbnz	r4, 8005a30 <__gethex+0xb6>
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	18f4      	adds	r4, r6, r3
 8005a1e:	4622      	mov	r2, r4
 8005a20:	4616      	mov	r6, r2
 8005a22:	3201      	adds	r2, #1
 8005a24:	7830      	ldrb	r0, [r6, #0]
 8005a26:	f7ff ff93 	bl	8005950 <__hexdig_fun>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1f8      	bne.n	8005a20 <__gethex+0xa6>
 8005a2e:	b10c      	cbz	r4, 8005a34 <__gethex+0xba>
 8005a30:	1ba4      	subs	r4, r4, r6
 8005a32:	00a4      	lsls	r4, r4, #2
 8005a34:	7833      	ldrb	r3, [r6, #0]
 8005a36:	2b50      	cmp	r3, #80	; 0x50
 8005a38:	d001      	beq.n	8005a3e <__gethex+0xc4>
 8005a3a:	2b70      	cmp	r3, #112	; 0x70
 8005a3c:	d140      	bne.n	8005ac0 <__gethex+0x146>
 8005a3e:	7873      	ldrb	r3, [r6, #1]
 8005a40:	2b2b      	cmp	r3, #43	; 0x2b
 8005a42:	d031      	beq.n	8005aa8 <__gethex+0x12e>
 8005a44:	2b2d      	cmp	r3, #45	; 0x2d
 8005a46:	d033      	beq.n	8005ab0 <__gethex+0x136>
 8005a48:	1c71      	adds	r1, r6, #1
 8005a4a:	f04f 0900 	mov.w	r9, #0
 8005a4e:	7808      	ldrb	r0, [r1, #0]
 8005a50:	f7ff ff7e 	bl	8005950 <__hexdig_fun>
 8005a54:	1e43      	subs	r3, r0, #1
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b18      	cmp	r3, #24
 8005a5a:	d831      	bhi.n	8005ac0 <__gethex+0x146>
 8005a5c:	f1a0 0210 	sub.w	r2, r0, #16
 8005a60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005a64:	f7ff ff74 	bl	8005950 <__hexdig_fun>
 8005a68:	1e43      	subs	r3, r0, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b18      	cmp	r3, #24
 8005a6e:	d922      	bls.n	8005ab6 <__gethex+0x13c>
 8005a70:	f1b9 0f00 	cmp.w	r9, #0
 8005a74:	d000      	beq.n	8005a78 <__gethex+0xfe>
 8005a76:	4252      	negs	r2, r2
 8005a78:	4414      	add	r4, r2
 8005a7a:	f8ca 1000 	str.w	r1, [sl]
 8005a7e:	b30d      	cbz	r5, 8005ac4 <__gethex+0x14a>
 8005a80:	f1bb 0f00 	cmp.w	fp, #0
 8005a84:	bf0c      	ite	eq
 8005a86:	2706      	moveq	r7, #6
 8005a88:	2700      	movne	r7, #0
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	b00b      	add	sp, #44	; 0x2c
 8005a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a92:	f10b 0b01 	add.w	fp, fp, #1
 8005a96:	e78a      	b.n	80059ae <__gethex+0x34>
 8005a98:	2500      	movs	r5, #0
 8005a9a:	462c      	mov	r4, r5
 8005a9c:	e7ae      	b.n	80059fc <__gethex+0x82>
 8005a9e:	463e      	mov	r6, r7
 8005aa0:	2501      	movs	r5, #1
 8005aa2:	e7c7      	b.n	8005a34 <__gethex+0xba>
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	e7fb      	b.n	8005aa0 <__gethex+0x126>
 8005aa8:	f04f 0900 	mov.w	r9, #0
 8005aac:	1cb1      	adds	r1, r6, #2
 8005aae:	e7ce      	b.n	8005a4e <__gethex+0xd4>
 8005ab0:	f04f 0901 	mov.w	r9, #1
 8005ab4:	e7fa      	b.n	8005aac <__gethex+0x132>
 8005ab6:	230a      	movs	r3, #10
 8005ab8:	fb03 0202 	mla	r2, r3, r2, r0
 8005abc:	3a10      	subs	r2, #16
 8005abe:	e7cf      	b.n	8005a60 <__gethex+0xe6>
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	e7da      	b.n	8005a7a <__gethex+0x100>
 8005ac4:	1bf3      	subs	r3, r6, r7
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	4629      	mov	r1, r5
 8005aca:	2b07      	cmp	r3, #7
 8005acc:	dc49      	bgt.n	8005b62 <__gethex+0x1e8>
 8005ace:	9802      	ldr	r0, [sp, #8]
 8005ad0:	f000 fac8 	bl	8006064 <_Balloc>
 8005ad4:	9b01      	ldr	r3, [sp, #4]
 8005ad6:	f100 0914 	add.w	r9, r0, #20
 8005ada:	f04f 0b00 	mov.w	fp, #0
 8005ade:	f1c3 0301 	rsb	r3, r3, #1
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	f8cd 9010 	str.w	r9, [sp, #16]
 8005ae8:	46da      	mov	sl, fp
 8005aea:	9308      	str	r3, [sp, #32]
 8005aec:	42b7      	cmp	r7, r6
 8005aee:	d33b      	bcc.n	8005b68 <__gethex+0x1ee>
 8005af0:	9804      	ldr	r0, [sp, #16]
 8005af2:	f840 ab04 	str.w	sl, [r0], #4
 8005af6:	eba0 0009 	sub.w	r0, r0, r9
 8005afa:	1080      	asrs	r0, r0, #2
 8005afc:	6128      	str	r0, [r5, #16]
 8005afe:	0147      	lsls	r7, r0, #5
 8005b00:	4650      	mov	r0, sl
 8005b02:	f000 fb73 	bl	80061ec <__hi0bits>
 8005b06:	f8d8 6000 	ldr.w	r6, [r8]
 8005b0a:	1a3f      	subs	r7, r7, r0
 8005b0c:	42b7      	cmp	r7, r6
 8005b0e:	dd64      	ble.n	8005bda <__gethex+0x260>
 8005b10:	1bbf      	subs	r7, r7, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 fe83 	bl	8006820 <__any_on>
 8005b1a:	4682      	mov	sl, r0
 8005b1c:	b178      	cbz	r0, 8005b3e <__gethex+0x1c4>
 8005b1e:	1e7b      	subs	r3, r7, #1
 8005b20:	1159      	asrs	r1, r3, #5
 8005b22:	f003 021f 	and.w	r2, r3, #31
 8005b26:	f04f 0a01 	mov.w	sl, #1
 8005b2a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005b2e:	fa0a f202 	lsl.w	r2, sl, r2
 8005b32:	420a      	tst	r2, r1
 8005b34:	d003      	beq.n	8005b3e <__gethex+0x1c4>
 8005b36:	4553      	cmp	r3, sl
 8005b38:	dc46      	bgt.n	8005bc8 <__gethex+0x24e>
 8005b3a:	f04f 0a02 	mov.w	sl, #2
 8005b3e:	4639      	mov	r1, r7
 8005b40:	4628      	mov	r0, r5
 8005b42:	f7ff fecb 	bl	80058dc <rshift>
 8005b46:	443c      	add	r4, r7
 8005b48:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	da52      	bge.n	8005bf6 <__gethex+0x27c>
 8005b50:	4629      	mov	r1, r5
 8005b52:	9802      	ldr	r0, [sp, #8]
 8005b54:	f000 faba 	bl	80060cc <_Bfree>
 8005b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	27a3      	movs	r7, #163	; 0xa3
 8005b60:	e793      	b.n	8005a8a <__gethex+0x110>
 8005b62:	3101      	adds	r1, #1
 8005b64:	105b      	asrs	r3, r3, #1
 8005b66:	e7b0      	b.n	8005aca <__gethex+0x150>
 8005b68:	1e73      	subs	r3, r6, #1
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	9a07      	ldr	r2, [sp, #28]
 8005b6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d018      	beq.n	8005ba8 <__gethex+0x22e>
 8005b76:	f1bb 0f20 	cmp.w	fp, #32
 8005b7a:	d107      	bne.n	8005b8c <__gethex+0x212>
 8005b7c:	9b04      	ldr	r3, [sp, #16]
 8005b7e:	f8c3 a000 	str.w	sl, [r3]
 8005b82:	3304      	adds	r3, #4
 8005b84:	f04f 0a00 	mov.w	sl, #0
 8005b88:	9304      	str	r3, [sp, #16]
 8005b8a:	46d3      	mov	fp, sl
 8005b8c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005b90:	f7ff fede 	bl	8005950 <__hexdig_fun>
 8005b94:	f000 000f 	and.w	r0, r0, #15
 8005b98:	fa00 f00b 	lsl.w	r0, r0, fp
 8005b9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005ba0:	f10b 0b04 	add.w	fp, fp, #4
 8005ba4:	9b05      	ldr	r3, [sp, #20]
 8005ba6:	e00d      	b.n	8005bc4 <__gethex+0x24a>
 8005ba8:	9b05      	ldr	r3, [sp, #20]
 8005baa:	9a08      	ldr	r2, [sp, #32]
 8005bac:	4413      	add	r3, r2
 8005bae:	42bb      	cmp	r3, r7
 8005bb0:	d3e1      	bcc.n	8005b76 <__gethex+0x1fc>
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	9a01      	ldr	r2, [sp, #4]
 8005bb6:	9903      	ldr	r1, [sp, #12]
 8005bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bba:	f001 fdb3 	bl	8007724 <strncmp>
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d1d8      	bne.n	8005b76 <__gethex+0x1fc>
 8005bc4:	461e      	mov	r6, r3
 8005bc6:	e791      	b.n	8005aec <__gethex+0x172>
 8005bc8:	1eb9      	subs	r1, r7, #2
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f000 fe28 	bl	8006820 <__any_on>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d0b2      	beq.n	8005b3a <__gethex+0x1c0>
 8005bd4:	f04f 0a03 	mov.w	sl, #3
 8005bd8:	e7b1      	b.n	8005b3e <__gethex+0x1c4>
 8005bda:	da09      	bge.n	8005bf0 <__gethex+0x276>
 8005bdc:	1bf7      	subs	r7, r6, r7
 8005bde:	4629      	mov	r1, r5
 8005be0:	463a      	mov	r2, r7
 8005be2:	9802      	ldr	r0, [sp, #8]
 8005be4:	f000 fc3e 	bl	8006464 <__lshift>
 8005be8:	1be4      	subs	r4, r4, r7
 8005bea:	4605      	mov	r5, r0
 8005bec:	f100 0914 	add.w	r9, r0, #20
 8005bf0:	f04f 0a00 	mov.w	sl, #0
 8005bf4:	e7a8      	b.n	8005b48 <__gethex+0x1ce>
 8005bf6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005bfa:	42a0      	cmp	r0, r4
 8005bfc:	dd6a      	ble.n	8005cd4 <__gethex+0x35a>
 8005bfe:	1b04      	subs	r4, r0, r4
 8005c00:	42a6      	cmp	r6, r4
 8005c02:	dc2e      	bgt.n	8005c62 <__gethex+0x2e8>
 8005c04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d022      	beq.n	8005c52 <__gethex+0x2d8>
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d024      	beq.n	8005c5a <__gethex+0x2e0>
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d115      	bne.n	8005c40 <__gethex+0x2c6>
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	d113      	bne.n	8005c40 <__gethex+0x2c6>
 8005c18:	2e01      	cmp	r6, #1
 8005c1a:	dc0b      	bgt.n	8005c34 <__gethex+0x2ba>
 8005c1c:	9a06      	ldr	r2, [sp, #24]
 8005c1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	2301      	movs	r3, #1
 8005c26:	612b      	str	r3, [r5, #16]
 8005c28:	f8c9 3000 	str.w	r3, [r9]
 8005c2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c2e:	2762      	movs	r7, #98	; 0x62
 8005c30:	601d      	str	r5, [r3, #0]
 8005c32:	e72a      	b.n	8005a8a <__gethex+0x110>
 8005c34:	1e71      	subs	r1, r6, #1
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 fdf2 	bl	8006820 <__any_on>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d1ed      	bne.n	8005c1c <__gethex+0x2a2>
 8005c40:	4629      	mov	r1, r5
 8005c42:	9802      	ldr	r0, [sp, #8]
 8005c44:	f000 fa42 	bl	80060cc <_Bfree>
 8005c48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	2750      	movs	r7, #80	; 0x50
 8005c50:	e71b      	b.n	8005a8a <__gethex+0x110>
 8005c52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0e1      	beq.n	8005c1c <__gethex+0x2a2>
 8005c58:	e7f2      	b.n	8005c40 <__gethex+0x2c6>
 8005c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1dd      	bne.n	8005c1c <__gethex+0x2a2>
 8005c60:	e7ee      	b.n	8005c40 <__gethex+0x2c6>
 8005c62:	1e67      	subs	r7, r4, #1
 8005c64:	f1ba 0f00 	cmp.w	sl, #0
 8005c68:	d131      	bne.n	8005cce <__gethex+0x354>
 8005c6a:	b127      	cbz	r7, 8005c76 <__gethex+0x2fc>
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 fdd6 	bl	8006820 <__any_on>
 8005c74:	4682      	mov	sl, r0
 8005c76:	117a      	asrs	r2, r7, #5
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f007 071f 	and.w	r7, r7, #31
 8005c7e:	fa03 f707 	lsl.w	r7, r3, r7
 8005c82:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005c86:	4621      	mov	r1, r4
 8005c88:	421f      	tst	r7, r3
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	bf18      	it	ne
 8005c8e:	f04a 0a02 	orrne.w	sl, sl, #2
 8005c92:	1b36      	subs	r6, r6, r4
 8005c94:	f7ff fe22 	bl	80058dc <rshift>
 8005c98:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005c9c:	2702      	movs	r7, #2
 8005c9e:	f1ba 0f00 	cmp.w	sl, #0
 8005ca2:	d048      	beq.n	8005d36 <__gethex+0x3bc>
 8005ca4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d015      	beq.n	8005cd8 <__gethex+0x35e>
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d017      	beq.n	8005ce0 <__gethex+0x366>
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d109      	bne.n	8005cc8 <__gethex+0x34e>
 8005cb4:	f01a 0f02 	tst.w	sl, #2
 8005cb8:	d006      	beq.n	8005cc8 <__gethex+0x34e>
 8005cba:	f8d9 3000 	ldr.w	r3, [r9]
 8005cbe:	ea4a 0a03 	orr.w	sl, sl, r3
 8005cc2:	f01a 0f01 	tst.w	sl, #1
 8005cc6:	d10e      	bne.n	8005ce6 <__gethex+0x36c>
 8005cc8:	f047 0710 	orr.w	r7, r7, #16
 8005ccc:	e033      	b.n	8005d36 <__gethex+0x3bc>
 8005cce:	f04f 0a01 	mov.w	sl, #1
 8005cd2:	e7d0      	b.n	8005c76 <__gethex+0x2fc>
 8005cd4:	2701      	movs	r7, #1
 8005cd6:	e7e2      	b.n	8005c9e <__gethex+0x324>
 8005cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cda:	f1c3 0301 	rsb	r3, r3, #1
 8005cde:	9315      	str	r3, [sp, #84]	; 0x54
 8005ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f0      	beq.n	8005cc8 <__gethex+0x34e>
 8005ce6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005cea:	f105 0314 	add.w	r3, r5, #20
 8005cee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005cf2:	eb03 010a 	add.w	r1, r3, sl
 8005cf6:	f04f 0c00 	mov.w	ip, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d00:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005d04:	d01c      	beq.n	8005d40 <__gethex+0x3c6>
 8005d06:	3201      	adds	r2, #1
 8005d08:	6002      	str	r2, [r0, #0]
 8005d0a:	2f02      	cmp	r7, #2
 8005d0c:	f105 0314 	add.w	r3, r5, #20
 8005d10:	d138      	bne.n	8005d84 <__gethex+0x40a>
 8005d12:	f8d8 2000 	ldr.w	r2, [r8]
 8005d16:	3a01      	subs	r2, #1
 8005d18:	42b2      	cmp	r2, r6
 8005d1a:	d10a      	bne.n	8005d32 <__gethex+0x3b8>
 8005d1c:	1171      	asrs	r1, r6, #5
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f006 061f 	and.w	r6, r6, #31
 8005d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d28:	fa02 f606 	lsl.w	r6, r2, r6
 8005d2c:	421e      	tst	r6, r3
 8005d2e:	bf18      	it	ne
 8005d30:	4617      	movne	r7, r2
 8005d32:	f047 0720 	orr.w	r7, r7, #32
 8005d36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d38:	601d      	str	r5, [r3, #0]
 8005d3a:	9b06      	ldr	r3, [sp, #24]
 8005d3c:	601c      	str	r4, [r3, #0]
 8005d3e:	e6a4      	b.n	8005a8a <__gethex+0x110>
 8005d40:	4299      	cmp	r1, r3
 8005d42:	f843 cc04 	str.w	ip, [r3, #-4]
 8005d46:	d8d8      	bhi.n	8005cfa <__gethex+0x380>
 8005d48:	68ab      	ldr	r3, [r5, #8]
 8005d4a:	4599      	cmp	r9, r3
 8005d4c:	db12      	blt.n	8005d74 <__gethex+0x3fa>
 8005d4e:	6869      	ldr	r1, [r5, #4]
 8005d50:	9802      	ldr	r0, [sp, #8]
 8005d52:	3101      	adds	r1, #1
 8005d54:	f000 f986 	bl	8006064 <_Balloc>
 8005d58:	692a      	ldr	r2, [r5, #16]
 8005d5a:	3202      	adds	r2, #2
 8005d5c:	f105 010c 	add.w	r1, r5, #12
 8005d60:	4683      	mov	fp, r0
 8005d62:	0092      	lsls	r2, r2, #2
 8005d64:	300c      	adds	r0, #12
 8005d66:	f7fe f8d1 	bl	8003f0c <memcpy>
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	9802      	ldr	r0, [sp, #8]
 8005d6e:	f000 f9ad 	bl	80060cc <_Bfree>
 8005d72:	465d      	mov	r5, fp
 8005d74:	692b      	ldr	r3, [r5, #16]
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005d7c:	612a      	str	r2, [r5, #16]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	615a      	str	r2, [r3, #20]
 8005d82:	e7c2      	b.n	8005d0a <__gethex+0x390>
 8005d84:	692a      	ldr	r2, [r5, #16]
 8005d86:	454a      	cmp	r2, r9
 8005d88:	dd0b      	ble.n	8005da2 <__gethex+0x428>
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f7ff fda5 	bl	80058dc <rshift>
 8005d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d96:	3401      	adds	r4, #1
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	f6ff aed9 	blt.w	8005b50 <__gethex+0x1d6>
 8005d9e:	2701      	movs	r7, #1
 8005da0:	e7c7      	b.n	8005d32 <__gethex+0x3b8>
 8005da2:	f016 061f 	ands.w	r6, r6, #31
 8005da6:	d0fa      	beq.n	8005d9e <__gethex+0x424>
 8005da8:	449a      	add	sl, r3
 8005daa:	f1c6 0620 	rsb	r6, r6, #32
 8005dae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005db2:	f000 fa1b 	bl	80061ec <__hi0bits>
 8005db6:	42b0      	cmp	r0, r6
 8005db8:	dbe7      	blt.n	8005d8a <__gethex+0x410>
 8005dba:	e7f0      	b.n	8005d9e <__gethex+0x424>

08005dbc <L_shift>:
 8005dbc:	f1c2 0208 	rsb	r2, r2, #8
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	b570      	push	{r4, r5, r6, lr}
 8005dc4:	f1c2 0620 	rsb	r6, r2, #32
 8005dc8:	6843      	ldr	r3, [r0, #4]
 8005dca:	6804      	ldr	r4, [r0, #0]
 8005dcc:	fa03 f506 	lsl.w	r5, r3, r6
 8005dd0:	432c      	orrs	r4, r5
 8005dd2:	40d3      	lsrs	r3, r2
 8005dd4:	6004      	str	r4, [r0, #0]
 8005dd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8005dda:	4288      	cmp	r0, r1
 8005ddc:	d3f4      	bcc.n	8005dc8 <L_shift+0xc>
 8005dde:	bd70      	pop	{r4, r5, r6, pc}

08005de0 <__match>:
 8005de0:	b530      	push	{r4, r5, lr}
 8005de2:	6803      	ldr	r3, [r0, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dea:	b914      	cbnz	r4, 8005df2 <__match+0x12>
 8005dec:	6003      	str	r3, [r0, #0]
 8005dee:	2001      	movs	r0, #1
 8005df0:	bd30      	pop	{r4, r5, pc}
 8005df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005dfa:	2d19      	cmp	r5, #25
 8005dfc:	bf98      	it	ls
 8005dfe:	3220      	addls	r2, #32
 8005e00:	42a2      	cmp	r2, r4
 8005e02:	d0f0      	beq.n	8005de6 <__match+0x6>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e7f3      	b.n	8005df0 <__match+0x10>

08005e08 <__hexnan>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	680b      	ldr	r3, [r1, #0]
 8005e0e:	6801      	ldr	r1, [r0, #0]
 8005e10:	115f      	asrs	r7, r3, #5
 8005e12:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005e16:	f013 031f 	ands.w	r3, r3, #31
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	bf18      	it	ne
 8005e1e:	3704      	addne	r7, #4
 8005e20:	2500      	movs	r5, #0
 8005e22:	1f3e      	subs	r6, r7, #4
 8005e24:	4682      	mov	sl, r0
 8005e26:	4690      	mov	r8, r2
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	f847 5c04 	str.w	r5, [r7, #-4]
 8005e2e:	46b1      	mov	r9, r6
 8005e30:	4634      	mov	r4, r6
 8005e32:	9502      	str	r5, [sp, #8]
 8005e34:	46ab      	mov	fp, r5
 8005e36:	784a      	ldrb	r2, [r1, #1]
 8005e38:	1c4b      	adds	r3, r1, #1
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	b342      	cbz	r2, 8005e90 <__hexnan+0x88>
 8005e3e:	4610      	mov	r0, r2
 8005e40:	9105      	str	r1, [sp, #20]
 8005e42:	9204      	str	r2, [sp, #16]
 8005e44:	f7ff fd84 	bl	8005950 <__hexdig_fun>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d143      	bne.n	8005ed4 <__hexnan+0xcc>
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	9905      	ldr	r1, [sp, #20]
 8005e50:	2a20      	cmp	r2, #32
 8005e52:	d818      	bhi.n	8005e86 <__hexnan+0x7e>
 8005e54:	9b02      	ldr	r3, [sp, #8]
 8005e56:	459b      	cmp	fp, r3
 8005e58:	dd13      	ble.n	8005e82 <__hexnan+0x7a>
 8005e5a:	454c      	cmp	r4, r9
 8005e5c:	d206      	bcs.n	8005e6c <__hexnan+0x64>
 8005e5e:	2d07      	cmp	r5, #7
 8005e60:	dc04      	bgt.n	8005e6c <__hexnan+0x64>
 8005e62:	462a      	mov	r2, r5
 8005e64:	4649      	mov	r1, r9
 8005e66:	4620      	mov	r0, r4
 8005e68:	f7ff ffa8 	bl	8005dbc <L_shift>
 8005e6c:	4544      	cmp	r4, r8
 8005e6e:	d944      	bls.n	8005efa <__hexnan+0xf2>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f1a4 0904 	sub.w	r9, r4, #4
 8005e76:	f844 3c04 	str.w	r3, [r4, #-4]
 8005e7a:	f8cd b008 	str.w	fp, [sp, #8]
 8005e7e:	464c      	mov	r4, r9
 8005e80:	461d      	mov	r5, r3
 8005e82:	9903      	ldr	r1, [sp, #12]
 8005e84:	e7d7      	b.n	8005e36 <__hexnan+0x2e>
 8005e86:	2a29      	cmp	r2, #41	; 0x29
 8005e88:	d14a      	bne.n	8005f20 <__hexnan+0x118>
 8005e8a:	3102      	adds	r1, #2
 8005e8c:	f8ca 1000 	str.w	r1, [sl]
 8005e90:	f1bb 0f00 	cmp.w	fp, #0
 8005e94:	d044      	beq.n	8005f20 <__hexnan+0x118>
 8005e96:	454c      	cmp	r4, r9
 8005e98:	d206      	bcs.n	8005ea8 <__hexnan+0xa0>
 8005e9a:	2d07      	cmp	r5, #7
 8005e9c:	dc04      	bgt.n	8005ea8 <__hexnan+0xa0>
 8005e9e:	462a      	mov	r2, r5
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7ff ff8a 	bl	8005dbc <L_shift>
 8005ea8:	4544      	cmp	r4, r8
 8005eaa:	d928      	bls.n	8005efe <__hexnan+0xf6>
 8005eac:	4643      	mov	r3, r8
 8005eae:	f854 2b04 	ldr.w	r2, [r4], #4
 8005eb2:	f843 2b04 	str.w	r2, [r3], #4
 8005eb6:	42a6      	cmp	r6, r4
 8005eb8:	d2f9      	bcs.n	8005eae <__hexnan+0xa6>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f843 2b04 	str.w	r2, [r3], #4
 8005ec0:	429e      	cmp	r6, r3
 8005ec2:	d2fb      	bcs.n	8005ebc <__hexnan+0xb4>
 8005ec4:	6833      	ldr	r3, [r6, #0]
 8005ec6:	b91b      	cbnz	r3, 8005ed0 <__hexnan+0xc8>
 8005ec8:	4546      	cmp	r6, r8
 8005eca:	d127      	bne.n	8005f1c <__hexnan+0x114>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	2005      	movs	r0, #5
 8005ed2:	e026      	b.n	8005f22 <__hexnan+0x11a>
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	2d08      	cmp	r5, #8
 8005ed8:	f10b 0b01 	add.w	fp, fp, #1
 8005edc:	dd06      	ble.n	8005eec <__hexnan+0xe4>
 8005ede:	4544      	cmp	r4, r8
 8005ee0:	d9cf      	bls.n	8005e82 <__hexnan+0x7a>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ee8:	2501      	movs	r5, #1
 8005eea:	3c04      	subs	r4, #4
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	f000 000f 	and.w	r0, r0, #15
 8005ef2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005ef6:	6020      	str	r0, [r4, #0]
 8005ef8:	e7c3      	b.n	8005e82 <__hexnan+0x7a>
 8005efa:	2508      	movs	r5, #8
 8005efc:	e7c1      	b.n	8005e82 <__hexnan+0x7a>
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0df      	beq.n	8005ec4 <__hexnan+0xbc>
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295
 8005f08:	f1c3 0320 	rsb	r3, r3, #32
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f10:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005f14:	401a      	ands	r2, r3
 8005f16:	f847 2c04 	str.w	r2, [r7, #-4]
 8005f1a:	e7d3      	b.n	8005ec4 <__hexnan+0xbc>
 8005f1c:	3e04      	subs	r6, #4
 8005f1e:	e7d1      	b.n	8005ec4 <__hexnan+0xbc>
 8005f20:	2004      	movs	r0, #4
 8005f22:	b007      	add	sp, #28
 8005f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f28 <__locale_ctype_ptr_l>:
 8005f28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005f2c:	4770      	bx	lr
	...

08005f30 <__locale_ctype_ptr>:
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <__locale_ctype_ptr+0x14>)
 8005f32:	4a05      	ldr	r2, [pc, #20]	; (8005f48 <__locale_ctype_ptr+0x18>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf08      	it	eq
 8005f3c:	4613      	moveq	r3, r2
 8005f3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005f42:	4770      	bx	lr
 8005f44:	2000000c 	.word	0x2000000c
 8005f48:	20000070 	.word	0x20000070

08005f4c <__localeconv_l>:
 8005f4c:	30f0      	adds	r0, #240	; 0xf0
 8005f4e:	4770      	bx	lr

08005f50 <_lseek_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4c07      	ldr	r4, [pc, #28]	; (8005f70 <_lseek_r+0x20>)
 8005f54:	4605      	mov	r5, r0
 8005f56:	4608      	mov	r0, r1
 8005f58:	4611      	mov	r1, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	6022      	str	r2, [r4, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fb fd5e 	bl	8001a20 <_lseek>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_lseek_r+0x1e>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_lseek_r+0x1e>
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	200003b8 	.word	0x200003b8

08005f74 <__swhatbuf_r>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	460e      	mov	r6, r1
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	b096      	sub	sp, #88	; 0x58
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	da07      	bge.n	8005f96 <__swhatbuf_r+0x22>
 8005f86:	2300      	movs	r3, #0
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	89b3      	ldrh	r3, [r6, #12]
 8005f8c:	061a      	lsls	r2, r3, #24
 8005f8e:	d410      	bmi.n	8005fb2 <__swhatbuf_r+0x3e>
 8005f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f94:	e00e      	b.n	8005fb4 <__swhatbuf_r+0x40>
 8005f96:	466a      	mov	r2, sp
 8005f98:	f001 fcaa 	bl	80078f0 <_fstat_r>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	dbf2      	blt.n	8005f86 <__swhatbuf_r+0x12>
 8005fa0:	9a01      	ldr	r2, [sp, #4]
 8005fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005faa:	425a      	negs	r2, r3
 8005fac:	415a      	adcs	r2, r3
 8005fae:	602a      	str	r2, [r5, #0]
 8005fb0:	e7ee      	b.n	8005f90 <__swhatbuf_r+0x1c>
 8005fb2:	2340      	movs	r3, #64	; 0x40
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	b016      	add	sp, #88	; 0x58
 8005fba:	bd70      	pop	{r4, r5, r6, pc}

08005fbc <__smakebuf_r>:
 8005fbc:	898b      	ldrh	r3, [r1, #12]
 8005fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fc0:	079d      	lsls	r5, r3, #30
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	d507      	bpl.n	8005fd8 <__smakebuf_r+0x1c>
 8005fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	6163      	str	r3, [r4, #20]
 8005fd4:	b002      	add	sp, #8
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	ab01      	add	r3, sp, #4
 8005fda:	466a      	mov	r2, sp
 8005fdc:	f7ff ffca 	bl	8005f74 <__swhatbuf_r>
 8005fe0:	9900      	ldr	r1, [sp, #0]
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7fe f801 	bl	8003fec <_malloc_r>
 8005fea:	b948      	cbnz	r0, 8006000 <__smakebuf_r+0x44>
 8005fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff0:	059a      	lsls	r2, r3, #22
 8005ff2:	d4ef      	bmi.n	8005fd4 <__smakebuf_r+0x18>
 8005ff4:	f023 0303 	bic.w	r3, r3, #3
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	e7e3      	b.n	8005fc8 <__smakebuf_r+0xc>
 8006000:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <__smakebuf_r+0x7c>)
 8006002:	62b3      	str	r3, [r6, #40]	; 0x28
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	6020      	str	r0, [r4, #0]
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	81a3      	strh	r3, [r4, #12]
 800600e:	9b00      	ldr	r3, [sp, #0]
 8006010:	6163      	str	r3, [r4, #20]
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	6120      	str	r0, [r4, #16]
 8006016:	b15b      	cbz	r3, 8006030 <__smakebuf_r+0x74>
 8006018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800601c:	4630      	mov	r0, r6
 800601e:	f001 fc79 	bl	8007914 <_isatty_r>
 8006022:	b128      	cbz	r0, 8006030 <__smakebuf_r+0x74>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	431d      	orrs	r5, r3
 8006034:	81a5      	strh	r5, [r4, #12]
 8006036:	e7cd      	b.n	8005fd4 <__smakebuf_r+0x18>
 8006038:	08005791 	.word	0x08005791

0800603c <__ascii_mbtowc>:
 800603c:	b082      	sub	sp, #8
 800603e:	b901      	cbnz	r1, 8006042 <__ascii_mbtowc+0x6>
 8006040:	a901      	add	r1, sp, #4
 8006042:	b142      	cbz	r2, 8006056 <__ascii_mbtowc+0x1a>
 8006044:	b14b      	cbz	r3, 800605a <__ascii_mbtowc+0x1e>
 8006046:	7813      	ldrb	r3, [r2, #0]
 8006048:	600b      	str	r3, [r1, #0]
 800604a:	7812      	ldrb	r2, [r2, #0]
 800604c:	1c10      	adds	r0, r2, #0
 800604e:	bf18      	it	ne
 8006050:	2001      	movne	r0, #1
 8006052:	b002      	add	sp, #8
 8006054:	4770      	bx	lr
 8006056:	4610      	mov	r0, r2
 8006058:	e7fb      	b.n	8006052 <__ascii_mbtowc+0x16>
 800605a:	f06f 0001 	mvn.w	r0, #1
 800605e:	e7f8      	b.n	8006052 <__ascii_mbtowc+0x16>

08006060 <__malloc_lock>:
 8006060:	4770      	bx	lr

08006062 <__malloc_unlock>:
 8006062:	4770      	bx	lr

08006064 <_Balloc>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006068:	4604      	mov	r4, r0
 800606a:	460e      	mov	r6, r1
 800606c:	b93d      	cbnz	r5, 800607e <_Balloc+0x1a>
 800606e:	2010      	movs	r0, #16
 8006070:	f7fd ff3c 	bl	8003eec <malloc>
 8006074:	6260      	str	r0, [r4, #36]	; 0x24
 8006076:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800607a:	6005      	str	r5, [r0, #0]
 800607c:	60c5      	str	r5, [r0, #12]
 800607e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006080:	68eb      	ldr	r3, [r5, #12]
 8006082:	b183      	cbz	r3, 80060a6 <_Balloc+0x42>
 8006084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800608c:	b9b8      	cbnz	r0, 80060be <_Balloc+0x5a>
 800608e:	2101      	movs	r1, #1
 8006090:	fa01 f506 	lsl.w	r5, r1, r6
 8006094:	1d6a      	adds	r2, r5, #5
 8006096:	0092      	lsls	r2, r2, #2
 8006098:	4620      	mov	r0, r4
 800609a:	f7fd ff4a 	bl	8003f32 <_calloc_r>
 800609e:	b160      	cbz	r0, 80060ba <_Balloc+0x56>
 80060a0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80060a4:	e00e      	b.n	80060c4 <_Balloc+0x60>
 80060a6:	2221      	movs	r2, #33	; 0x21
 80060a8:	2104      	movs	r1, #4
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7fd ff41 	bl	8003f32 <_calloc_r>
 80060b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b2:	60e8      	str	r0, [r5, #12]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e4      	bne.n	8006084 <_Balloc+0x20>
 80060ba:	2000      	movs	r0, #0
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	6802      	ldr	r2, [r0, #0]
 80060c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80060c4:	2300      	movs	r3, #0
 80060c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060ca:	e7f7      	b.n	80060bc <_Balloc+0x58>

080060cc <_Bfree>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80060d0:	4606      	mov	r6, r0
 80060d2:	460d      	mov	r5, r1
 80060d4:	b93c      	cbnz	r4, 80060e6 <_Bfree+0x1a>
 80060d6:	2010      	movs	r0, #16
 80060d8:	f7fd ff08 	bl	8003eec <malloc>
 80060dc:	6270      	str	r0, [r6, #36]	; 0x24
 80060de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060e2:	6004      	str	r4, [r0, #0]
 80060e4:	60c4      	str	r4, [r0, #12]
 80060e6:	b13d      	cbz	r5, 80060f8 <_Bfree+0x2c>
 80060e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80060ea:	686a      	ldr	r2, [r5, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060f2:	6029      	str	r1, [r5, #0]
 80060f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80060f8:	bd70      	pop	{r4, r5, r6, pc}

080060fa <__multadd>:
 80060fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	690d      	ldr	r5, [r1, #16]
 8006100:	461f      	mov	r7, r3
 8006102:	4606      	mov	r6, r0
 8006104:	460c      	mov	r4, r1
 8006106:	f101 0c14 	add.w	ip, r1, #20
 800610a:	2300      	movs	r3, #0
 800610c:	f8dc 0000 	ldr.w	r0, [ip]
 8006110:	b281      	uxth	r1, r0
 8006112:	fb02 7101 	mla	r1, r2, r1, r7
 8006116:	0c0f      	lsrs	r7, r1, #16
 8006118:	0c00      	lsrs	r0, r0, #16
 800611a:	fb02 7000 	mla	r0, r2, r0, r7
 800611e:	b289      	uxth	r1, r1
 8006120:	3301      	adds	r3, #1
 8006122:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006126:	429d      	cmp	r5, r3
 8006128:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800612c:	f84c 1b04 	str.w	r1, [ip], #4
 8006130:	dcec      	bgt.n	800610c <__multadd+0x12>
 8006132:	b1d7      	cbz	r7, 800616a <__multadd+0x70>
 8006134:	68a3      	ldr	r3, [r4, #8]
 8006136:	42ab      	cmp	r3, r5
 8006138:	dc12      	bgt.n	8006160 <__multadd+0x66>
 800613a:	6861      	ldr	r1, [r4, #4]
 800613c:	4630      	mov	r0, r6
 800613e:	3101      	adds	r1, #1
 8006140:	f7ff ff90 	bl	8006064 <_Balloc>
 8006144:	6922      	ldr	r2, [r4, #16]
 8006146:	3202      	adds	r2, #2
 8006148:	f104 010c 	add.w	r1, r4, #12
 800614c:	4680      	mov	r8, r0
 800614e:	0092      	lsls	r2, r2, #2
 8006150:	300c      	adds	r0, #12
 8006152:	f7fd fedb 	bl	8003f0c <memcpy>
 8006156:	4621      	mov	r1, r4
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff ffb7 	bl	80060cc <_Bfree>
 800615e:	4644      	mov	r4, r8
 8006160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006164:	3501      	adds	r5, #1
 8006166:	615f      	str	r7, [r3, #20]
 8006168:	6125      	str	r5, [r4, #16]
 800616a:	4620      	mov	r0, r4
 800616c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006170 <__s2b>:
 8006170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006174:	460c      	mov	r4, r1
 8006176:	4615      	mov	r5, r2
 8006178:	461f      	mov	r7, r3
 800617a:	2209      	movs	r2, #9
 800617c:	3308      	adds	r3, #8
 800617e:	4606      	mov	r6, r0
 8006180:	fb93 f3f2 	sdiv	r3, r3, r2
 8006184:	2100      	movs	r1, #0
 8006186:	2201      	movs	r2, #1
 8006188:	429a      	cmp	r2, r3
 800618a:	db20      	blt.n	80061ce <__s2b+0x5e>
 800618c:	4630      	mov	r0, r6
 800618e:	f7ff ff69 	bl	8006064 <_Balloc>
 8006192:	9b08      	ldr	r3, [sp, #32]
 8006194:	6143      	str	r3, [r0, #20]
 8006196:	2d09      	cmp	r5, #9
 8006198:	f04f 0301 	mov.w	r3, #1
 800619c:	6103      	str	r3, [r0, #16]
 800619e:	dd19      	ble.n	80061d4 <__s2b+0x64>
 80061a0:	f104 0809 	add.w	r8, r4, #9
 80061a4:	46c1      	mov	r9, r8
 80061a6:	442c      	add	r4, r5
 80061a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80061ac:	4601      	mov	r1, r0
 80061ae:	3b30      	subs	r3, #48	; 0x30
 80061b0:	220a      	movs	r2, #10
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7ff ffa1 	bl	80060fa <__multadd>
 80061b8:	45a1      	cmp	r9, r4
 80061ba:	d1f5      	bne.n	80061a8 <__s2b+0x38>
 80061bc:	eb08 0405 	add.w	r4, r8, r5
 80061c0:	3c08      	subs	r4, #8
 80061c2:	1b2d      	subs	r5, r5, r4
 80061c4:	1963      	adds	r3, r4, r5
 80061c6:	42bb      	cmp	r3, r7
 80061c8:	db07      	blt.n	80061da <__s2b+0x6a>
 80061ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ce:	0052      	lsls	r2, r2, #1
 80061d0:	3101      	adds	r1, #1
 80061d2:	e7d9      	b.n	8006188 <__s2b+0x18>
 80061d4:	340a      	adds	r4, #10
 80061d6:	2509      	movs	r5, #9
 80061d8:	e7f3      	b.n	80061c2 <__s2b+0x52>
 80061da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061de:	4601      	mov	r1, r0
 80061e0:	3b30      	subs	r3, #48	; 0x30
 80061e2:	220a      	movs	r2, #10
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff ff88 	bl	80060fa <__multadd>
 80061ea:	e7eb      	b.n	80061c4 <__s2b+0x54>

080061ec <__hi0bits>:
 80061ec:	0c02      	lsrs	r2, r0, #16
 80061ee:	0412      	lsls	r2, r2, #16
 80061f0:	4603      	mov	r3, r0
 80061f2:	b9b2      	cbnz	r2, 8006222 <__hi0bits+0x36>
 80061f4:	0403      	lsls	r3, r0, #16
 80061f6:	2010      	movs	r0, #16
 80061f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061fc:	bf04      	itt	eq
 80061fe:	021b      	lsleq	r3, r3, #8
 8006200:	3008      	addeq	r0, #8
 8006202:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006206:	bf04      	itt	eq
 8006208:	011b      	lsleq	r3, r3, #4
 800620a:	3004      	addeq	r0, #4
 800620c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006210:	bf04      	itt	eq
 8006212:	009b      	lsleq	r3, r3, #2
 8006214:	3002      	addeq	r0, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	db06      	blt.n	8006228 <__hi0bits+0x3c>
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	d503      	bpl.n	8006226 <__hi0bits+0x3a>
 800621e:	3001      	adds	r0, #1
 8006220:	4770      	bx	lr
 8006222:	2000      	movs	r0, #0
 8006224:	e7e8      	b.n	80061f8 <__hi0bits+0xc>
 8006226:	2020      	movs	r0, #32
 8006228:	4770      	bx	lr

0800622a <__lo0bits>:
 800622a:	6803      	ldr	r3, [r0, #0]
 800622c:	f013 0207 	ands.w	r2, r3, #7
 8006230:	4601      	mov	r1, r0
 8006232:	d00b      	beq.n	800624c <__lo0bits+0x22>
 8006234:	07da      	lsls	r2, r3, #31
 8006236:	d423      	bmi.n	8006280 <__lo0bits+0x56>
 8006238:	0798      	lsls	r0, r3, #30
 800623a:	bf49      	itett	mi
 800623c:	085b      	lsrmi	r3, r3, #1
 800623e:	089b      	lsrpl	r3, r3, #2
 8006240:	2001      	movmi	r0, #1
 8006242:	600b      	strmi	r3, [r1, #0]
 8006244:	bf5c      	itt	pl
 8006246:	600b      	strpl	r3, [r1, #0]
 8006248:	2002      	movpl	r0, #2
 800624a:	4770      	bx	lr
 800624c:	b298      	uxth	r0, r3
 800624e:	b9a8      	cbnz	r0, 800627c <__lo0bits+0x52>
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	2010      	movs	r0, #16
 8006254:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006258:	bf04      	itt	eq
 800625a:	0a1b      	lsreq	r3, r3, #8
 800625c:	3008      	addeq	r0, #8
 800625e:	071a      	lsls	r2, r3, #28
 8006260:	bf04      	itt	eq
 8006262:	091b      	lsreq	r3, r3, #4
 8006264:	3004      	addeq	r0, #4
 8006266:	079a      	lsls	r2, r3, #30
 8006268:	bf04      	itt	eq
 800626a:	089b      	lsreq	r3, r3, #2
 800626c:	3002      	addeq	r0, #2
 800626e:	07da      	lsls	r2, r3, #31
 8006270:	d402      	bmi.n	8006278 <__lo0bits+0x4e>
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	d006      	beq.n	8006284 <__lo0bits+0x5a>
 8006276:	3001      	adds	r0, #1
 8006278:	600b      	str	r3, [r1, #0]
 800627a:	4770      	bx	lr
 800627c:	4610      	mov	r0, r2
 800627e:	e7e9      	b.n	8006254 <__lo0bits+0x2a>
 8006280:	2000      	movs	r0, #0
 8006282:	4770      	bx	lr
 8006284:	2020      	movs	r0, #32
 8006286:	4770      	bx	lr

08006288 <__i2b>:
 8006288:	b510      	push	{r4, lr}
 800628a:	460c      	mov	r4, r1
 800628c:	2101      	movs	r1, #1
 800628e:	f7ff fee9 	bl	8006064 <_Balloc>
 8006292:	2201      	movs	r2, #1
 8006294:	6144      	str	r4, [r0, #20]
 8006296:	6102      	str	r2, [r0, #16]
 8006298:	bd10      	pop	{r4, pc}

0800629a <__multiply>:
 800629a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629e:	4614      	mov	r4, r2
 80062a0:	690a      	ldr	r2, [r1, #16]
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	bfb8      	it	lt
 80062a8:	460b      	movlt	r3, r1
 80062aa:	4688      	mov	r8, r1
 80062ac:	bfbc      	itt	lt
 80062ae:	46a0      	movlt	r8, r4
 80062b0:	461c      	movlt	r4, r3
 80062b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062c2:	eb07 0609 	add.w	r6, r7, r9
 80062c6:	42b3      	cmp	r3, r6
 80062c8:	bfb8      	it	lt
 80062ca:	3101      	addlt	r1, #1
 80062cc:	f7ff feca 	bl	8006064 <_Balloc>
 80062d0:	f100 0514 	add.w	r5, r0, #20
 80062d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80062d8:	462b      	mov	r3, r5
 80062da:	2200      	movs	r2, #0
 80062dc:	4573      	cmp	r3, lr
 80062de:	d316      	bcc.n	800630e <__multiply+0x74>
 80062e0:	f104 0214 	add.w	r2, r4, #20
 80062e4:	f108 0114 	add.w	r1, r8, #20
 80062e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80062ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	9b00      	ldr	r3, [sp, #0]
 80062f4:	9201      	str	r2, [sp, #4]
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d80c      	bhi.n	8006314 <__multiply+0x7a>
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	dd03      	ble.n	8006306 <__multiply+0x6c>
 80062fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006302:	2b00      	cmp	r3, #0
 8006304:	d05d      	beq.n	80063c2 <__multiply+0x128>
 8006306:	6106      	str	r6, [r0, #16]
 8006308:	b003      	add	sp, #12
 800630a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630e:	f843 2b04 	str.w	r2, [r3], #4
 8006312:	e7e3      	b.n	80062dc <__multiply+0x42>
 8006314:	f8b2 b000 	ldrh.w	fp, [r2]
 8006318:	f1bb 0f00 	cmp.w	fp, #0
 800631c:	d023      	beq.n	8006366 <__multiply+0xcc>
 800631e:	4689      	mov	r9, r1
 8006320:	46ac      	mov	ip, r5
 8006322:	f04f 0800 	mov.w	r8, #0
 8006326:	f859 4b04 	ldr.w	r4, [r9], #4
 800632a:	f8dc a000 	ldr.w	sl, [ip]
 800632e:	b2a3      	uxth	r3, r4
 8006330:	fa1f fa8a 	uxth.w	sl, sl
 8006334:	fb0b a303 	mla	r3, fp, r3, sl
 8006338:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800633c:	f8dc 4000 	ldr.w	r4, [ip]
 8006340:	4443      	add	r3, r8
 8006342:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006346:	fb0b 840a 	mla	r4, fp, sl, r8
 800634a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800634e:	46e2      	mov	sl, ip
 8006350:	b29b      	uxth	r3, r3
 8006352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006356:	454f      	cmp	r7, r9
 8006358:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800635c:	f84a 3b04 	str.w	r3, [sl], #4
 8006360:	d82b      	bhi.n	80063ba <__multiply+0x120>
 8006362:	f8cc 8004 	str.w	r8, [ip, #4]
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800636c:	3204      	adds	r2, #4
 800636e:	f1ba 0f00 	cmp.w	sl, #0
 8006372:	d020      	beq.n	80063b6 <__multiply+0x11c>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	4689      	mov	r9, r1
 8006378:	46a8      	mov	r8, r5
 800637a:	f04f 0b00 	mov.w	fp, #0
 800637e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006382:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006386:	fb0a 440c 	mla	r4, sl, ip, r4
 800638a:	445c      	add	r4, fp
 800638c:	46c4      	mov	ip, r8
 800638e:	b29b      	uxth	r3, r3
 8006390:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006394:	f84c 3b04 	str.w	r3, [ip], #4
 8006398:	f859 3b04 	ldr.w	r3, [r9], #4
 800639c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80063a0:	0c1b      	lsrs	r3, r3, #16
 80063a2:	fb0a b303 	mla	r3, sl, r3, fp
 80063a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80063aa:	454f      	cmp	r7, r9
 80063ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80063b0:	d805      	bhi.n	80063be <__multiply+0x124>
 80063b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80063b6:	3504      	adds	r5, #4
 80063b8:	e79b      	b.n	80062f2 <__multiply+0x58>
 80063ba:	46d4      	mov	ip, sl
 80063bc:	e7b3      	b.n	8006326 <__multiply+0x8c>
 80063be:	46e0      	mov	r8, ip
 80063c0:	e7dd      	b.n	800637e <__multiply+0xe4>
 80063c2:	3e01      	subs	r6, #1
 80063c4:	e799      	b.n	80062fa <__multiply+0x60>
	...

080063c8 <__pow5mult>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	4615      	mov	r5, r2
 80063ce:	f012 0203 	ands.w	r2, r2, #3
 80063d2:	4606      	mov	r6, r0
 80063d4:	460f      	mov	r7, r1
 80063d6:	d007      	beq.n	80063e8 <__pow5mult+0x20>
 80063d8:	3a01      	subs	r2, #1
 80063da:	4c21      	ldr	r4, [pc, #132]	; (8006460 <__pow5mult+0x98>)
 80063dc:	2300      	movs	r3, #0
 80063de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063e2:	f7ff fe8a 	bl	80060fa <__multadd>
 80063e6:	4607      	mov	r7, r0
 80063e8:	10ad      	asrs	r5, r5, #2
 80063ea:	d035      	beq.n	8006458 <__pow5mult+0x90>
 80063ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063ee:	b93c      	cbnz	r4, 8006400 <__pow5mult+0x38>
 80063f0:	2010      	movs	r0, #16
 80063f2:	f7fd fd7b 	bl	8003eec <malloc>
 80063f6:	6270      	str	r0, [r6, #36]	; 0x24
 80063f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063fc:	6004      	str	r4, [r0, #0]
 80063fe:	60c4      	str	r4, [r0, #12]
 8006400:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006408:	b94c      	cbnz	r4, 800641e <__pow5mult+0x56>
 800640a:	f240 2171 	movw	r1, #625	; 0x271
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff ff3a 	bl	8006288 <__i2b>
 8006414:	2300      	movs	r3, #0
 8006416:	f8c8 0008 	str.w	r0, [r8, #8]
 800641a:	4604      	mov	r4, r0
 800641c:	6003      	str	r3, [r0, #0]
 800641e:	f04f 0800 	mov.w	r8, #0
 8006422:	07eb      	lsls	r3, r5, #31
 8006424:	d50a      	bpl.n	800643c <__pow5mult+0x74>
 8006426:	4639      	mov	r1, r7
 8006428:	4622      	mov	r2, r4
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ff35 	bl	800629a <__multiply>
 8006430:	4639      	mov	r1, r7
 8006432:	4681      	mov	r9, r0
 8006434:	4630      	mov	r0, r6
 8006436:	f7ff fe49 	bl	80060cc <_Bfree>
 800643a:	464f      	mov	r7, r9
 800643c:	106d      	asrs	r5, r5, #1
 800643e:	d00b      	beq.n	8006458 <__pow5mult+0x90>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	b938      	cbnz	r0, 8006454 <__pow5mult+0x8c>
 8006444:	4622      	mov	r2, r4
 8006446:	4621      	mov	r1, r4
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff ff26 	bl	800629a <__multiply>
 800644e:	6020      	str	r0, [r4, #0]
 8006450:	f8c0 8000 	str.w	r8, [r0]
 8006454:	4604      	mov	r4, r0
 8006456:	e7e4      	b.n	8006422 <__pow5mult+0x5a>
 8006458:	4638      	mov	r0, r7
 800645a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800645e:	bf00      	nop
 8006460:	08007d70 	.word	0x08007d70

08006464 <__lshift>:
 8006464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	6849      	ldr	r1, [r1, #4]
 8006472:	eb0a 0903 	add.w	r9, sl, r3
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	4607      	mov	r7, r0
 800647a:	4616      	mov	r6, r2
 800647c:	f109 0501 	add.w	r5, r9, #1
 8006480:	42ab      	cmp	r3, r5
 8006482:	db32      	blt.n	80064ea <__lshift+0x86>
 8006484:	4638      	mov	r0, r7
 8006486:	f7ff fded 	bl	8006064 <_Balloc>
 800648a:	2300      	movs	r3, #0
 800648c:	4680      	mov	r8, r0
 800648e:	f100 0114 	add.w	r1, r0, #20
 8006492:	461a      	mov	r2, r3
 8006494:	4553      	cmp	r3, sl
 8006496:	db2b      	blt.n	80064f0 <__lshift+0x8c>
 8006498:	6920      	ldr	r0, [r4, #16]
 800649a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800649e:	f104 0314 	add.w	r3, r4, #20
 80064a2:	f016 021f 	ands.w	r2, r6, #31
 80064a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064ae:	d025      	beq.n	80064fc <__lshift+0x98>
 80064b0:	f1c2 0e20 	rsb	lr, r2, #32
 80064b4:	2000      	movs	r0, #0
 80064b6:	681e      	ldr	r6, [r3, #0]
 80064b8:	468a      	mov	sl, r1
 80064ba:	4096      	lsls	r6, r2
 80064bc:	4330      	orrs	r0, r6
 80064be:	f84a 0b04 	str.w	r0, [sl], #4
 80064c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80064c6:	459c      	cmp	ip, r3
 80064c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80064cc:	d814      	bhi.n	80064f8 <__lshift+0x94>
 80064ce:	6048      	str	r0, [r1, #4]
 80064d0:	b108      	cbz	r0, 80064d6 <__lshift+0x72>
 80064d2:	f109 0502 	add.w	r5, r9, #2
 80064d6:	3d01      	subs	r5, #1
 80064d8:	4638      	mov	r0, r7
 80064da:	f8c8 5010 	str.w	r5, [r8, #16]
 80064de:	4621      	mov	r1, r4
 80064e0:	f7ff fdf4 	bl	80060cc <_Bfree>
 80064e4:	4640      	mov	r0, r8
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	3101      	adds	r1, #1
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	e7c7      	b.n	8006480 <__lshift+0x1c>
 80064f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80064f4:	3301      	adds	r3, #1
 80064f6:	e7cd      	b.n	8006494 <__lshift+0x30>
 80064f8:	4651      	mov	r1, sl
 80064fa:	e7dc      	b.n	80064b6 <__lshift+0x52>
 80064fc:	3904      	subs	r1, #4
 80064fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006502:	f841 2f04 	str.w	r2, [r1, #4]!
 8006506:	459c      	cmp	ip, r3
 8006508:	d8f9      	bhi.n	80064fe <__lshift+0x9a>
 800650a:	e7e4      	b.n	80064d6 <__lshift+0x72>

0800650c <__mcmp>:
 800650c:	6903      	ldr	r3, [r0, #16]
 800650e:	690a      	ldr	r2, [r1, #16]
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	b530      	push	{r4, r5, lr}
 8006514:	d10c      	bne.n	8006530 <__mcmp+0x24>
 8006516:	0092      	lsls	r2, r2, #2
 8006518:	3014      	adds	r0, #20
 800651a:	3114      	adds	r1, #20
 800651c:	1884      	adds	r4, r0, r2
 800651e:	4411      	add	r1, r2
 8006520:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006524:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006528:	4295      	cmp	r5, r2
 800652a:	d003      	beq.n	8006534 <__mcmp+0x28>
 800652c:	d305      	bcc.n	800653a <__mcmp+0x2e>
 800652e:	2301      	movs	r3, #1
 8006530:	4618      	mov	r0, r3
 8006532:	bd30      	pop	{r4, r5, pc}
 8006534:	42a0      	cmp	r0, r4
 8006536:	d3f3      	bcc.n	8006520 <__mcmp+0x14>
 8006538:	e7fa      	b.n	8006530 <__mcmp+0x24>
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
 800653e:	e7f7      	b.n	8006530 <__mcmp+0x24>

08006540 <__mdiff>:
 8006540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006544:	460d      	mov	r5, r1
 8006546:	4607      	mov	r7, r0
 8006548:	4611      	mov	r1, r2
 800654a:	4628      	mov	r0, r5
 800654c:	4614      	mov	r4, r2
 800654e:	f7ff ffdd 	bl	800650c <__mcmp>
 8006552:	1e06      	subs	r6, r0, #0
 8006554:	d108      	bne.n	8006568 <__mdiff+0x28>
 8006556:	4631      	mov	r1, r6
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff fd83 	bl	8006064 <_Balloc>
 800655e:	2301      	movs	r3, #1
 8006560:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006568:	bfa4      	itt	ge
 800656a:	4623      	movge	r3, r4
 800656c:	462c      	movge	r4, r5
 800656e:	4638      	mov	r0, r7
 8006570:	6861      	ldr	r1, [r4, #4]
 8006572:	bfa6      	itte	ge
 8006574:	461d      	movge	r5, r3
 8006576:	2600      	movge	r6, #0
 8006578:	2601      	movlt	r6, #1
 800657a:	f7ff fd73 	bl	8006064 <_Balloc>
 800657e:	692b      	ldr	r3, [r5, #16]
 8006580:	60c6      	str	r6, [r0, #12]
 8006582:	6926      	ldr	r6, [r4, #16]
 8006584:	f105 0914 	add.w	r9, r5, #20
 8006588:	f104 0214 	add.w	r2, r4, #20
 800658c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006590:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006594:	f100 0514 	add.w	r5, r0, #20
 8006598:	f04f 0e00 	mov.w	lr, #0
 800659c:	f852 ab04 	ldr.w	sl, [r2], #4
 80065a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80065a4:	fa1e f18a 	uxtah	r1, lr, sl
 80065a8:	b2a3      	uxth	r3, r4
 80065aa:	1ac9      	subs	r1, r1, r3
 80065ac:	0c23      	lsrs	r3, r4, #16
 80065ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80065b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065b6:	b289      	uxth	r1, r1
 80065b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80065bc:	45c8      	cmp	r8, r9
 80065be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065c2:	4694      	mov	ip, r2
 80065c4:	f845 3b04 	str.w	r3, [r5], #4
 80065c8:	d8e8      	bhi.n	800659c <__mdiff+0x5c>
 80065ca:	45bc      	cmp	ip, r7
 80065cc:	d304      	bcc.n	80065d8 <__mdiff+0x98>
 80065ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80065d2:	b183      	cbz	r3, 80065f6 <__mdiff+0xb6>
 80065d4:	6106      	str	r6, [r0, #16]
 80065d6:	e7c5      	b.n	8006564 <__mdiff+0x24>
 80065d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80065dc:	fa1e f381 	uxtah	r3, lr, r1
 80065e0:	141a      	asrs	r2, r3, #16
 80065e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80065f0:	f845 3b04 	str.w	r3, [r5], #4
 80065f4:	e7e9      	b.n	80065ca <__mdiff+0x8a>
 80065f6:	3e01      	subs	r6, #1
 80065f8:	e7e9      	b.n	80065ce <__mdiff+0x8e>
	...

080065fc <__ulp>:
 80065fc:	4b12      	ldr	r3, [pc, #72]	; (8006648 <__ulp+0x4c>)
 80065fe:	ee10 2a90 	vmov	r2, s1
 8006602:	401a      	ands	r2, r3
 8006604:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006608:	2b00      	cmp	r3, #0
 800660a:	dd04      	ble.n	8006616 <__ulp+0x1a>
 800660c:	2000      	movs	r0, #0
 800660e:	4619      	mov	r1, r3
 8006610:	ec41 0b10 	vmov	d0, r0, r1
 8006614:	4770      	bx	lr
 8006616:	425b      	negs	r3, r3
 8006618:	151b      	asrs	r3, r3, #20
 800661a:	2b13      	cmp	r3, #19
 800661c:	f04f 0000 	mov.w	r0, #0
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	dc04      	bgt.n	8006630 <__ulp+0x34>
 8006626:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800662a:	fa42 f103 	asr.w	r1, r2, r3
 800662e:	e7ef      	b.n	8006610 <__ulp+0x14>
 8006630:	3b14      	subs	r3, #20
 8006632:	2b1e      	cmp	r3, #30
 8006634:	f04f 0201 	mov.w	r2, #1
 8006638:	bfda      	itte	le
 800663a:	f1c3 031f 	rsble	r3, r3, #31
 800663e:	fa02 f303 	lslle.w	r3, r2, r3
 8006642:	4613      	movgt	r3, r2
 8006644:	4618      	mov	r0, r3
 8006646:	e7e3      	b.n	8006610 <__ulp+0x14>
 8006648:	7ff00000 	.word	0x7ff00000

0800664c <__b2d>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	6905      	ldr	r5, [r0, #16]
 8006650:	f100 0714 	add.w	r7, r0, #20
 8006654:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006658:	1f2e      	subs	r6, r5, #4
 800665a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800665e:	4620      	mov	r0, r4
 8006660:	f7ff fdc4 	bl	80061ec <__hi0bits>
 8006664:	f1c0 0320 	rsb	r3, r0, #32
 8006668:	280a      	cmp	r0, #10
 800666a:	600b      	str	r3, [r1, #0]
 800666c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80066e4 <__b2d+0x98>
 8006670:	dc14      	bgt.n	800669c <__b2d+0x50>
 8006672:	f1c0 0e0b 	rsb	lr, r0, #11
 8006676:	fa24 f10e 	lsr.w	r1, r4, lr
 800667a:	42b7      	cmp	r7, r6
 800667c:	ea41 030c 	orr.w	r3, r1, ip
 8006680:	bf34      	ite	cc
 8006682:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006686:	2100      	movcs	r1, #0
 8006688:	3015      	adds	r0, #21
 800668a:	fa04 f000 	lsl.w	r0, r4, r0
 800668e:	fa21 f10e 	lsr.w	r1, r1, lr
 8006692:	ea40 0201 	orr.w	r2, r0, r1
 8006696:	ec43 2b10 	vmov	d0, r2, r3
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	42b7      	cmp	r7, r6
 800669e:	bf3a      	itte	cc
 80066a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80066a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80066a8:	2100      	movcs	r1, #0
 80066aa:	380b      	subs	r0, #11
 80066ac:	d015      	beq.n	80066da <__b2d+0x8e>
 80066ae:	4084      	lsls	r4, r0
 80066b0:	f1c0 0520 	rsb	r5, r0, #32
 80066b4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80066b8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80066bc:	42be      	cmp	r6, r7
 80066be:	fa21 fc05 	lsr.w	ip, r1, r5
 80066c2:	ea44 030c 	orr.w	r3, r4, ip
 80066c6:	bf8c      	ite	hi
 80066c8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80066cc:	2400      	movls	r4, #0
 80066ce:	fa01 f000 	lsl.w	r0, r1, r0
 80066d2:	40ec      	lsrs	r4, r5
 80066d4:	ea40 0204 	orr.w	r2, r0, r4
 80066d8:	e7dd      	b.n	8006696 <__b2d+0x4a>
 80066da:	ea44 030c 	orr.w	r3, r4, ip
 80066de:	460a      	mov	r2, r1
 80066e0:	e7d9      	b.n	8006696 <__b2d+0x4a>
 80066e2:	bf00      	nop
 80066e4:	3ff00000 	.word	0x3ff00000

080066e8 <__d2b>:
 80066e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	460e      	mov	r6, r1
 80066ee:	2101      	movs	r1, #1
 80066f0:	ec59 8b10 	vmov	r8, r9, d0
 80066f4:	4615      	mov	r5, r2
 80066f6:	f7ff fcb5 	bl	8006064 <_Balloc>
 80066fa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80066fe:	4607      	mov	r7, r0
 8006700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006704:	bb34      	cbnz	r4, 8006754 <__d2b+0x6c>
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	f1b8 0300 	subs.w	r3, r8, #0
 800670c:	d027      	beq.n	800675e <__d2b+0x76>
 800670e:	a802      	add	r0, sp, #8
 8006710:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006714:	f7ff fd89 	bl	800622a <__lo0bits>
 8006718:	9900      	ldr	r1, [sp, #0]
 800671a:	b1f0      	cbz	r0, 800675a <__d2b+0x72>
 800671c:	9a01      	ldr	r2, [sp, #4]
 800671e:	f1c0 0320 	rsb	r3, r0, #32
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	430b      	orrs	r3, r1
 8006728:	40c2      	lsrs	r2, r0
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	9201      	str	r2, [sp, #4]
 800672e:	9b01      	ldr	r3, [sp, #4]
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	bf14      	ite	ne
 8006736:	2102      	movne	r1, #2
 8006738:	2101      	moveq	r1, #1
 800673a:	6139      	str	r1, [r7, #16]
 800673c:	b1c4      	cbz	r4, 8006770 <__d2b+0x88>
 800673e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006742:	4404      	add	r4, r0
 8006744:	6034      	str	r4, [r6, #0]
 8006746:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800674a:	6028      	str	r0, [r5, #0]
 800674c:	4638      	mov	r0, r7
 800674e:	b003      	add	sp, #12
 8006750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006758:	e7d5      	b.n	8006706 <__d2b+0x1e>
 800675a:	6179      	str	r1, [r7, #20]
 800675c:	e7e7      	b.n	800672e <__d2b+0x46>
 800675e:	a801      	add	r0, sp, #4
 8006760:	f7ff fd63 	bl	800622a <__lo0bits>
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	2101      	movs	r1, #1
 800676a:	6139      	str	r1, [r7, #16]
 800676c:	3020      	adds	r0, #32
 800676e:	e7e5      	b.n	800673c <__d2b+0x54>
 8006770:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006778:	6030      	str	r0, [r6, #0]
 800677a:	6918      	ldr	r0, [r3, #16]
 800677c:	f7ff fd36 	bl	80061ec <__hi0bits>
 8006780:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006784:	e7e1      	b.n	800674a <__d2b+0x62>

08006786 <__ratio>:
 8006786:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	4688      	mov	r8, r1
 800678c:	4669      	mov	r1, sp
 800678e:	4681      	mov	r9, r0
 8006790:	f7ff ff5c 	bl	800664c <__b2d>
 8006794:	a901      	add	r1, sp, #4
 8006796:	4640      	mov	r0, r8
 8006798:	ec57 6b10 	vmov	r6, r7, d0
 800679c:	f7ff ff56 	bl	800664c <__b2d>
 80067a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80067a8:	eba3 0c02 	sub.w	ip, r3, r2
 80067ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80067b6:	ec5b ab10 	vmov	sl, fp, d0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bfce      	itee	gt
 80067be:	463a      	movgt	r2, r7
 80067c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067c4:	465a      	movle	r2, fp
 80067c6:	4659      	mov	r1, fp
 80067c8:	463d      	mov	r5, r7
 80067ca:	bfd4      	ite	le
 80067cc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80067d0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80067d4:	4630      	mov	r0, r6
 80067d6:	ee10 2a10 	vmov	r2, s0
 80067da:	460b      	mov	r3, r1
 80067dc:	4629      	mov	r1, r5
 80067de:	f7fa f835 	bl	800084c <__aeabi_ddiv>
 80067e2:	ec41 0b10 	vmov	d0, r0, r1
 80067e6:	b003      	add	sp, #12
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067ec <__copybits>:
 80067ec:	3901      	subs	r1, #1
 80067ee:	b510      	push	{r4, lr}
 80067f0:	1149      	asrs	r1, r1, #5
 80067f2:	6914      	ldr	r4, [r2, #16]
 80067f4:	3101      	adds	r1, #1
 80067f6:	f102 0314 	add.w	r3, r2, #20
 80067fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006802:	42a3      	cmp	r3, r4
 8006804:	4602      	mov	r2, r0
 8006806:	d303      	bcc.n	8006810 <__copybits+0x24>
 8006808:	2300      	movs	r3, #0
 800680a:	428a      	cmp	r2, r1
 800680c:	d305      	bcc.n	800681a <__copybits+0x2e>
 800680e:	bd10      	pop	{r4, pc}
 8006810:	f853 2b04 	ldr.w	r2, [r3], #4
 8006814:	f840 2b04 	str.w	r2, [r0], #4
 8006818:	e7f3      	b.n	8006802 <__copybits+0x16>
 800681a:	f842 3b04 	str.w	r3, [r2], #4
 800681e:	e7f4      	b.n	800680a <__copybits+0x1e>

08006820 <__any_on>:
 8006820:	f100 0214 	add.w	r2, r0, #20
 8006824:	6900      	ldr	r0, [r0, #16]
 8006826:	114b      	asrs	r3, r1, #5
 8006828:	4298      	cmp	r0, r3
 800682a:	b510      	push	{r4, lr}
 800682c:	db11      	blt.n	8006852 <__any_on+0x32>
 800682e:	dd0a      	ble.n	8006846 <__any_on+0x26>
 8006830:	f011 011f 	ands.w	r1, r1, #31
 8006834:	d007      	beq.n	8006846 <__any_on+0x26>
 8006836:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800683a:	fa24 f001 	lsr.w	r0, r4, r1
 800683e:	fa00 f101 	lsl.w	r1, r0, r1
 8006842:	428c      	cmp	r4, r1
 8006844:	d10b      	bne.n	800685e <__any_on+0x3e>
 8006846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800684a:	4293      	cmp	r3, r2
 800684c:	d803      	bhi.n	8006856 <__any_on+0x36>
 800684e:	2000      	movs	r0, #0
 8006850:	bd10      	pop	{r4, pc}
 8006852:	4603      	mov	r3, r0
 8006854:	e7f7      	b.n	8006846 <__any_on+0x26>
 8006856:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800685a:	2900      	cmp	r1, #0
 800685c:	d0f5      	beq.n	800684a <__any_on+0x2a>
 800685e:	2001      	movs	r0, #1
 8006860:	e7f6      	b.n	8006850 <__any_on+0x30>

08006862 <__ssputs_r>:
 8006862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006866:	688e      	ldr	r6, [r1, #8]
 8006868:	429e      	cmp	r6, r3
 800686a:	4682      	mov	sl, r0
 800686c:	460c      	mov	r4, r1
 800686e:	4690      	mov	r8, r2
 8006870:	4699      	mov	r9, r3
 8006872:	d837      	bhi.n	80068e4 <__ssputs_r+0x82>
 8006874:	898a      	ldrh	r2, [r1, #12]
 8006876:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800687a:	d031      	beq.n	80068e0 <__ssputs_r+0x7e>
 800687c:	6825      	ldr	r5, [r4, #0]
 800687e:	6909      	ldr	r1, [r1, #16]
 8006880:	1a6f      	subs	r7, r5, r1
 8006882:	6965      	ldr	r5, [r4, #20]
 8006884:	2302      	movs	r3, #2
 8006886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800688a:	fb95 f5f3 	sdiv	r5, r5, r3
 800688e:	f109 0301 	add.w	r3, r9, #1
 8006892:	443b      	add	r3, r7
 8006894:	429d      	cmp	r5, r3
 8006896:	bf38      	it	cc
 8006898:	461d      	movcc	r5, r3
 800689a:	0553      	lsls	r3, r2, #21
 800689c:	d530      	bpl.n	8006900 <__ssputs_r+0x9e>
 800689e:	4629      	mov	r1, r5
 80068a0:	f7fd fba4 	bl	8003fec <_malloc_r>
 80068a4:	4606      	mov	r6, r0
 80068a6:	b950      	cbnz	r0, 80068be <__ssputs_r+0x5c>
 80068a8:	230c      	movs	r3, #12
 80068aa:	f8ca 3000 	str.w	r3, [sl]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068be:	463a      	mov	r2, r7
 80068c0:	6921      	ldr	r1, [r4, #16]
 80068c2:	f7fd fb23 	bl	8003f0c <memcpy>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	6126      	str	r6, [r4, #16]
 80068d4:	6165      	str	r5, [r4, #20]
 80068d6:	443e      	add	r6, r7
 80068d8:	1bed      	subs	r5, r5, r7
 80068da:	6026      	str	r6, [r4, #0]
 80068dc:	60a5      	str	r5, [r4, #8]
 80068de:	464e      	mov	r6, r9
 80068e0:	454e      	cmp	r6, r9
 80068e2:	d900      	bls.n	80068e6 <__ssputs_r+0x84>
 80068e4:	464e      	mov	r6, r9
 80068e6:	4632      	mov	r2, r6
 80068e8:	4641      	mov	r1, r8
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	f001 f822 	bl	8007934 <memmove>
 80068f0:	68a3      	ldr	r3, [r4, #8]
 80068f2:	1b9b      	subs	r3, r3, r6
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	441e      	add	r6, r3
 80068fa:	6026      	str	r6, [r4, #0]
 80068fc:	2000      	movs	r0, #0
 80068fe:	e7dc      	b.n	80068ba <__ssputs_r+0x58>
 8006900:	462a      	mov	r2, r5
 8006902:	f001 f830 	bl	8007966 <_realloc_r>
 8006906:	4606      	mov	r6, r0
 8006908:	2800      	cmp	r0, #0
 800690a:	d1e2      	bne.n	80068d2 <__ssputs_r+0x70>
 800690c:	6921      	ldr	r1, [r4, #16]
 800690e:	4650      	mov	r0, sl
 8006910:	f7fd fb1e 	bl	8003f50 <_free_r>
 8006914:	e7c8      	b.n	80068a8 <__ssputs_r+0x46>
	...

08006918 <_svfiprintf_r>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	461d      	mov	r5, r3
 800691e:	898b      	ldrh	r3, [r1, #12]
 8006920:	061f      	lsls	r7, r3, #24
 8006922:	b09d      	sub	sp, #116	; 0x74
 8006924:	4680      	mov	r8, r0
 8006926:	460c      	mov	r4, r1
 8006928:	4616      	mov	r6, r2
 800692a:	d50f      	bpl.n	800694c <_svfiprintf_r+0x34>
 800692c:	690b      	ldr	r3, [r1, #16]
 800692e:	b96b      	cbnz	r3, 800694c <_svfiprintf_r+0x34>
 8006930:	2140      	movs	r1, #64	; 0x40
 8006932:	f7fd fb5b 	bl	8003fec <_malloc_r>
 8006936:	6020      	str	r0, [r4, #0]
 8006938:	6120      	str	r0, [r4, #16]
 800693a:	b928      	cbnz	r0, 8006948 <_svfiprintf_r+0x30>
 800693c:	230c      	movs	r3, #12
 800693e:	f8c8 3000 	str.w	r3, [r8]
 8006942:	f04f 30ff 	mov.w	r0, #4294967295
 8006946:	e0c8      	b.n	8006ada <_svfiprintf_r+0x1c2>
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	6163      	str	r3, [r4, #20]
 800694c:	2300      	movs	r3, #0
 800694e:	9309      	str	r3, [sp, #36]	; 0x24
 8006950:	2320      	movs	r3, #32
 8006952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006956:	2330      	movs	r3, #48	; 0x30
 8006958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800695c:	9503      	str	r5, [sp, #12]
 800695e:	f04f 0b01 	mov.w	fp, #1
 8006962:	4637      	mov	r7, r6
 8006964:	463d      	mov	r5, r7
 8006966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800696a:	b10b      	cbz	r3, 8006970 <_svfiprintf_r+0x58>
 800696c:	2b25      	cmp	r3, #37	; 0x25
 800696e:	d13e      	bne.n	80069ee <_svfiprintf_r+0xd6>
 8006970:	ebb7 0a06 	subs.w	sl, r7, r6
 8006974:	d00b      	beq.n	800698e <_svfiprintf_r+0x76>
 8006976:	4653      	mov	r3, sl
 8006978:	4632      	mov	r2, r6
 800697a:	4621      	mov	r1, r4
 800697c:	4640      	mov	r0, r8
 800697e:	f7ff ff70 	bl	8006862 <__ssputs_r>
 8006982:	3001      	adds	r0, #1
 8006984:	f000 80a4 	beq.w	8006ad0 <_svfiprintf_r+0x1b8>
 8006988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698a:	4453      	add	r3, sl
 800698c:	9309      	str	r3, [sp, #36]	; 0x24
 800698e:	783b      	ldrb	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 809d 	beq.w	8006ad0 <_svfiprintf_r+0x1b8>
 8006996:	2300      	movs	r3, #0
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	9307      	str	r3, [sp, #28]
 80069a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069a8:	931a      	str	r3, [sp, #104]	; 0x68
 80069aa:	462f      	mov	r7, r5
 80069ac:	2205      	movs	r2, #5
 80069ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80069b2:	4850      	ldr	r0, [pc, #320]	; (8006af4 <_svfiprintf_r+0x1dc>)
 80069b4:	f7f9 fc14 	bl	80001e0 <memchr>
 80069b8:	9b04      	ldr	r3, [sp, #16]
 80069ba:	b9d0      	cbnz	r0, 80069f2 <_svfiprintf_r+0xda>
 80069bc:	06d9      	lsls	r1, r3, #27
 80069be:	bf44      	itt	mi
 80069c0:	2220      	movmi	r2, #32
 80069c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069c6:	071a      	lsls	r2, r3, #28
 80069c8:	bf44      	itt	mi
 80069ca:	222b      	movmi	r2, #43	; 0x2b
 80069cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069d0:	782a      	ldrb	r2, [r5, #0]
 80069d2:	2a2a      	cmp	r2, #42	; 0x2a
 80069d4:	d015      	beq.n	8006a02 <_svfiprintf_r+0xea>
 80069d6:	9a07      	ldr	r2, [sp, #28]
 80069d8:	462f      	mov	r7, r5
 80069da:	2000      	movs	r0, #0
 80069dc:	250a      	movs	r5, #10
 80069de:	4639      	mov	r1, r7
 80069e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069e4:	3b30      	subs	r3, #48	; 0x30
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d94d      	bls.n	8006a86 <_svfiprintf_r+0x16e>
 80069ea:	b1b8      	cbz	r0, 8006a1c <_svfiprintf_r+0x104>
 80069ec:	e00f      	b.n	8006a0e <_svfiprintf_r+0xf6>
 80069ee:	462f      	mov	r7, r5
 80069f0:	e7b8      	b.n	8006964 <_svfiprintf_r+0x4c>
 80069f2:	4a40      	ldr	r2, [pc, #256]	; (8006af4 <_svfiprintf_r+0x1dc>)
 80069f4:	1a80      	subs	r0, r0, r2
 80069f6:	fa0b f000 	lsl.w	r0, fp, r0
 80069fa:	4318      	orrs	r0, r3
 80069fc:	9004      	str	r0, [sp, #16]
 80069fe:	463d      	mov	r5, r7
 8006a00:	e7d3      	b.n	80069aa <_svfiprintf_r+0x92>
 8006a02:	9a03      	ldr	r2, [sp, #12]
 8006a04:	1d11      	adds	r1, r2, #4
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	9103      	str	r1, [sp, #12]
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	db01      	blt.n	8006a12 <_svfiprintf_r+0xfa>
 8006a0e:	9207      	str	r2, [sp, #28]
 8006a10:	e004      	b.n	8006a1c <_svfiprintf_r+0x104>
 8006a12:	4252      	negs	r2, r2
 8006a14:	f043 0302 	orr.w	r3, r3, #2
 8006a18:	9207      	str	r2, [sp, #28]
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	783b      	ldrb	r3, [r7, #0]
 8006a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a20:	d10c      	bne.n	8006a3c <_svfiprintf_r+0x124>
 8006a22:	787b      	ldrb	r3, [r7, #1]
 8006a24:	2b2a      	cmp	r3, #42	; 0x2a
 8006a26:	d133      	bne.n	8006a90 <_svfiprintf_r+0x178>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	9203      	str	r2, [sp, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bfb8      	it	lt
 8006a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a38:	3702      	adds	r7, #2
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	4d2e      	ldr	r5, [pc, #184]	; (8006af8 <_svfiprintf_r+0x1e0>)
 8006a3e:	7839      	ldrb	r1, [r7, #0]
 8006a40:	2203      	movs	r2, #3
 8006a42:	4628      	mov	r0, r5
 8006a44:	f7f9 fbcc 	bl	80001e0 <memchr>
 8006a48:	b138      	cbz	r0, 8006a5a <_svfiprintf_r+0x142>
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	1b40      	subs	r0, r0, r5
 8006a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	4303      	orrs	r3, r0
 8006a56:	3701      	adds	r7, #1
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	7839      	ldrb	r1, [r7, #0]
 8006a5c:	4827      	ldr	r0, [pc, #156]	; (8006afc <_svfiprintf_r+0x1e4>)
 8006a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a62:	2206      	movs	r2, #6
 8006a64:	1c7e      	adds	r6, r7, #1
 8006a66:	f7f9 fbbb 	bl	80001e0 <memchr>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d038      	beq.n	8006ae0 <_svfiprintf_r+0x1c8>
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <_svfiprintf_r+0x1e8>)
 8006a70:	bb13      	cbnz	r3, 8006ab8 <_svfiprintf_r+0x1a0>
 8006a72:	9b03      	ldr	r3, [sp, #12]
 8006a74:	3307      	adds	r3, #7
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	9303      	str	r3, [sp, #12]
 8006a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a80:	444b      	add	r3, r9
 8006a82:	9309      	str	r3, [sp, #36]	; 0x24
 8006a84:	e76d      	b.n	8006962 <_svfiprintf_r+0x4a>
 8006a86:	fb05 3202 	mla	r2, r5, r2, r3
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	e7a6      	b.n	80069de <_svfiprintf_r+0xc6>
 8006a90:	2300      	movs	r3, #0
 8006a92:	3701      	adds	r7, #1
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	4619      	mov	r1, r3
 8006a98:	250a      	movs	r5, #10
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aa0:	3a30      	subs	r2, #48	; 0x30
 8006aa2:	2a09      	cmp	r2, #9
 8006aa4:	d903      	bls.n	8006aae <_svfiprintf_r+0x196>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0c8      	beq.n	8006a3c <_svfiprintf_r+0x124>
 8006aaa:	9105      	str	r1, [sp, #20]
 8006aac:	e7c6      	b.n	8006a3c <_svfiprintf_r+0x124>
 8006aae:	fb05 2101 	mla	r1, r5, r1, r2
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	e7f0      	b.n	8006a9a <_svfiprintf_r+0x182>
 8006ab8:	ab03      	add	r3, sp, #12
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	4622      	mov	r2, r4
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <_svfiprintf_r+0x1ec>)
 8006ac0:	a904      	add	r1, sp, #16
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006acc:	4681      	mov	r9, r0
 8006ace:	d1d6      	bne.n	8006a7e <_svfiprintf_r+0x166>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	065b      	lsls	r3, r3, #25
 8006ad4:	f53f af35 	bmi.w	8006942 <_svfiprintf_r+0x2a>
 8006ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ada:	b01d      	add	sp, #116	; 0x74
 8006adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae0:	ab03      	add	r3, sp, #12
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <_svfiprintf_r+0x1ec>)
 8006ae8:	a904      	add	r1, sp, #16
 8006aea:	4640      	mov	r0, r8
 8006aec:	f000 fb6c 	bl	80071c8 <_printf_i>
 8006af0:	e7ea      	b.n	8006ac8 <_svfiprintf_r+0x1b0>
 8006af2:	bf00      	nop
 8006af4:	08007d7c 	.word	0x08007d7c
 8006af8:	08007d82 	.word	0x08007d82
 8006afc:	08007d86 	.word	0x08007d86
 8006b00:	00000000 	.word	0x00000000
 8006b04:	08006863 	.word	0x08006863

08006b08 <_sungetc_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	1c4b      	adds	r3, r1, #1
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	d103      	bne.n	8006b18 <_sungetc_r+0x10>
 8006b10:	f04f 35ff 	mov.w	r5, #4294967295
 8006b14:	4628      	mov	r0, r5
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	8993      	ldrh	r3, [r2, #12]
 8006b1a:	f023 0320 	bic.w	r3, r3, #32
 8006b1e:	8193      	strh	r3, [r2, #12]
 8006b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b22:	6852      	ldr	r2, [r2, #4]
 8006b24:	b2cd      	uxtb	r5, r1
 8006b26:	b18b      	cbz	r3, 8006b4c <_sungetc_r+0x44>
 8006b28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	dd08      	ble.n	8006b40 <_sungetc_r+0x38>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	1e5a      	subs	r2, r3, #1
 8006b32:	6022      	str	r2, [r4, #0]
 8006b34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	6063      	str	r3, [r4, #4]
 8006b3e:	e7e9      	b.n	8006b14 <_sungetc_r+0xc>
 8006b40:	4621      	mov	r1, r4
 8006b42:	f000 fe8d 	bl	8007860 <__submore>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d0f1      	beq.n	8006b2e <_sungetc_r+0x26>
 8006b4a:	e7e1      	b.n	8006b10 <_sungetc_r+0x8>
 8006b4c:	6921      	ldr	r1, [r4, #16]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	b151      	cbz	r1, 8006b68 <_sungetc_r+0x60>
 8006b52:	4299      	cmp	r1, r3
 8006b54:	d208      	bcs.n	8006b68 <_sungetc_r+0x60>
 8006b56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006b5a:	42a9      	cmp	r1, r5
 8006b5c:	d104      	bne.n	8006b68 <_sungetc_r+0x60>
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	3201      	adds	r2, #1
 8006b62:	6023      	str	r3, [r4, #0]
 8006b64:	6062      	str	r2, [r4, #4]
 8006b66:	e7d5      	b.n	8006b14 <_sungetc_r+0xc>
 8006b68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b70:	6363      	str	r3, [r4, #52]	; 0x34
 8006b72:	2303      	movs	r3, #3
 8006b74:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b76:	4623      	mov	r3, r4
 8006b78:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e7dc      	b.n	8006b3c <_sungetc_r+0x34>

08006b82 <__ssrefill_r>:
 8006b82:	b510      	push	{r4, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006b88:	b169      	cbz	r1, 8006ba6 <__ssrefill_r+0x24>
 8006b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	d001      	beq.n	8006b96 <__ssrefill_r+0x14>
 8006b92:	f7fd f9dd 	bl	8003f50 <_free_r>
 8006b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b9e:	b113      	cbz	r3, 8006ba6 <__ssrefill_r+0x24>
 8006ba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	2300      	movs	r3, #0
 8006bac:	6063      	str	r3, [r4, #4]
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	f043 0320 	orr.w	r3, r3, #32
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bba:	e7f3      	b.n	8006ba4 <__ssrefill_r+0x22>

08006bbc <__ssvfiscanf_r>:
 8006bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	9144      	str	r1, [sp, #272]	; 0x110
 8006bca:	9145      	str	r1, [sp, #276]	; 0x114
 8006bcc:	499f      	ldr	r1, [pc, #636]	; (8006e4c <__ssvfiscanf_r+0x290>)
 8006bce:	91a0      	str	r1, [sp, #640]	; 0x280
 8006bd0:	f10d 0804 	add.w	r8, sp, #4
 8006bd4:	499e      	ldr	r1, [pc, #632]	; (8006e50 <__ssvfiscanf_r+0x294>)
 8006bd6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8006e54 <__ssvfiscanf_r+0x298>
 8006bda:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006bde:	4606      	mov	r6, r0
 8006be0:	4692      	mov	sl, r2
 8006be2:	91a1      	str	r1, [sp, #644]	; 0x284
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	270a      	movs	r7, #10
 8006be8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 812a 	beq.w	8006e46 <__ssvfiscanf_r+0x28a>
 8006bf2:	4655      	mov	r5, sl
 8006bf4:	f7ff f99c 	bl	8005f30 <__locale_ctype_ptr>
 8006bf8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006bfc:	4458      	add	r0, fp
 8006bfe:	7843      	ldrb	r3, [r0, #1]
 8006c00:	f013 0308 	ands.w	r3, r3, #8
 8006c04:	d01c      	beq.n	8006c40 <__ssvfiscanf_r+0x84>
 8006c06:	6863      	ldr	r3, [r4, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dd12      	ble.n	8006c32 <__ssvfiscanf_r+0x76>
 8006c0c:	f7ff f990 	bl	8005f30 <__locale_ctype_ptr>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	4410      	add	r0, r2
 8006c16:	7842      	ldrb	r2, [r0, #1]
 8006c18:	0712      	lsls	r2, r2, #28
 8006c1a:	d401      	bmi.n	8006c20 <__ssvfiscanf_r+0x64>
 8006c1c:	46aa      	mov	sl, r5
 8006c1e:	e7e3      	b.n	8006be8 <__ssvfiscanf_r+0x2c>
 8006c20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006c22:	3201      	adds	r2, #1
 8006c24:	9245      	str	r2, [sp, #276]	; 0x114
 8006c26:	6862      	ldr	r2, [r4, #4]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	6062      	str	r2, [r4, #4]
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	e7e9      	b.n	8006c06 <__ssvfiscanf_r+0x4a>
 8006c32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006c34:	4621      	mov	r1, r4
 8006c36:	4630      	mov	r0, r6
 8006c38:	4798      	blx	r3
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d0e6      	beq.n	8006c0c <__ssvfiscanf_r+0x50>
 8006c3e:	e7ed      	b.n	8006c1c <__ssvfiscanf_r+0x60>
 8006c40:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006c44:	f040 8082 	bne.w	8006d4c <__ssvfiscanf_r+0x190>
 8006c48:	9343      	str	r3, [sp, #268]	; 0x10c
 8006c4a:	9341      	str	r3, [sp, #260]	; 0x104
 8006c4c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006c50:	2b2a      	cmp	r3, #42	; 0x2a
 8006c52:	d103      	bne.n	8006c5c <__ssvfiscanf_r+0xa0>
 8006c54:	2310      	movs	r3, #16
 8006c56:	9341      	str	r3, [sp, #260]	; 0x104
 8006c58:	f10a 0502 	add.w	r5, sl, #2
 8006c5c:	46aa      	mov	sl, r5
 8006c5e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006c62:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006c66:	2a09      	cmp	r2, #9
 8006c68:	d922      	bls.n	8006cb0 <__ssvfiscanf_r+0xf4>
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	4879      	ldr	r0, [pc, #484]	; (8006e54 <__ssvfiscanf_r+0x298>)
 8006c6e:	f7f9 fab7 	bl	80001e0 <memchr>
 8006c72:	b138      	cbz	r0, 8006c84 <__ssvfiscanf_r+0xc8>
 8006c74:	eba0 0309 	sub.w	r3, r0, r9
 8006c78:	2001      	movs	r0, #1
 8006c7a:	4098      	lsls	r0, r3
 8006c7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c7e:	4318      	orrs	r0, r3
 8006c80:	9041      	str	r0, [sp, #260]	; 0x104
 8006c82:	46aa      	mov	sl, r5
 8006c84:	f89a 3000 	ldrb.w	r3, [sl]
 8006c88:	2b67      	cmp	r3, #103	; 0x67
 8006c8a:	f10a 0501 	add.w	r5, sl, #1
 8006c8e:	d82b      	bhi.n	8006ce8 <__ssvfiscanf_r+0x12c>
 8006c90:	2b65      	cmp	r3, #101	; 0x65
 8006c92:	f080 809f 	bcs.w	8006dd4 <__ssvfiscanf_r+0x218>
 8006c96:	2b47      	cmp	r3, #71	; 0x47
 8006c98:	d810      	bhi.n	8006cbc <__ssvfiscanf_r+0x100>
 8006c9a:	2b45      	cmp	r3, #69	; 0x45
 8006c9c:	f080 809a 	bcs.w	8006dd4 <__ssvfiscanf_r+0x218>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d06c      	beq.n	8006d7e <__ssvfiscanf_r+0x1c2>
 8006ca4:	2b25      	cmp	r3, #37	; 0x25
 8006ca6:	d051      	beq.n	8006d4c <__ssvfiscanf_r+0x190>
 8006ca8:	2303      	movs	r3, #3
 8006caa:	9347      	str	r3, [sp, #284]	; 0x11c
 8006cac:	9742      	str	r7, [sp, #264]	; 0x108
 8006cae:	e027      	b.n	8006d00 <__ssvfiscanf_r+0x144>
 8006cb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006cb2:	fb07 1303 	mla	r3, r7, r3, r1
 8006cb6:	3b30      	subs	r3, #48	; 0x30
 8006cb8:	9343      	str	r3, [sp, #268]	; 0x10c
 8006cba:	e7cf      	b.n	8006c5c <__ssvfiscanf_r+0xa0>
 8006cbc:	2b5b      	cmp	r3, #91	; 0x5b
 8006cbe:	d06a      	beq.n	8006d96 <__ssvfiscanf_r+0x1da>
 8006cc0:	d80c      	bhi.n	8006cdc <__ssvfiscanf_r+0x120>
 8006cc2:	2b58      	cmp	r3, #88	; 0x58
 8006cc4:	d1f0      	bne.n	8006ca8 <__ssvfiscanf_r+0xec>
 8006cc6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ccc:	9241      	str	r2, [sp, #260]	; 0x104
 8006cce:	2210      	movs	r2, #16
 8006cd0:	9242      	str	r2, [sp, #264]	; 0x108
 8006cd2:	2b6e      	cmp	r3, #110	; 0x6e
 8006cd4:	bf8c      	ite	hi
 8006cd6:	2304      	movhi	r3, #4
 8006cd8:	2303      	movls	r3, #3
 8006cda:	e010      	b.n	8006cfe <__ssvfiscanf_r+0x142>
 8006cdc:	2b63      	cmp	r3, #99	; 0x63
 8006cde:	d065      	beq.n	8006dac <__ssvfiscanf_r+0x1f0>
 8006ce0:	2b64      	cmp	r3, #100	; 0x64
 8006ce2:	d1e1      	bne.n	8006ca8 <__ssvfiscanf_r+0xec>
 8006ce4:	9742      	str	r7, [sp, #264]	; 0x108
 8006ce6:	e7f4      	b.n	8006cd2 <__ssvfiscanf_r+0x116>
 8006ce8:	2b70      	cmp	r3, #112	; 0x70
 8006cea:	d04b      	beq.n	8006d84 <__ssvfiscanf_r+0x1c8>
 8006cec:	d826      	bhi.n	8006d3c <__ssvfiscanf_r+0x180>
 8006cee:	2b6e      	cmp	r3, #110	; 0x6e
 8006cf0:	d062      	beq.n	8006db8 <__ssvfiscanf_r+0x1fc>
 8006cf2:	d84c      	bhi.n	8006d8e <__ssvfiscanf_r+0x1d2>
 8006cf4:	2b69      	cmp	r3, #105	; 0x69
 8006cf6:	d1d7      	bne.n	8006ca8 <__ssvfiscanf_r+0xec>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9342      	str	r3, [sp, #264]	; 0x108
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dd68      	ble.n	8006dd8 <__ssvfiscanf_r+0x21c>
 8006d06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d08:	0659      	lsls	r1, r3, #25
 8006d0a:	d407      	bmi.n	8006d1c <__ssvfiscanf_r+0x160>
 8006d0c:	f7ff f910 	bl	8005f30 <__locale_ctype_ptr>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	4410      	add	r0, r2
 8006d16:	7842      	ldrb	r2, [r0, #1]
 8006d18:	0712      	lsls	r2, r2, #28
 8006d1a:	d464      	bmi.n	8006de6 <__ssvfiscanf_r+0x22a>
 8006d1c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc73      	bgt.n	8006e0a <__ssvfiscanf_r+0x24e>
 8006d22:	466b      	mov	r3, sp
 8006d24:	4622      	mov	r2, r4
 8006d26:	a941      	add	r1, sp, #260	; 0x104
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f000 fb5f 	bl	80073ec <_scanf_chars>
 8006d2e:	2801      	cmp	r0, #1
 8006d30:	f000 8089 	beq.w	8006e46 <__ssvfiscanf_r+0x28a>
 8006d34:	2802      	cmp	r0, #2
 8006d36:	f47f af71 	bne.w	8006c1c <__ssvfiscanf_r+0x60>
 8006d3a:	e01d      	b.n	8006d78 <__ssvfiscanf_r+0x1bc>
 8006d3c:	2b75      	cmp	r3, #117	; 0x75
 8006d3e:	d0d1      	beq.n	8006ce4 <__ssvfiscanf_r+0x128>
 8006d40:	2b78      	cmp	r3, #120	; 0x78
 8006d42:	d0c0      	beq.n	8006cc6 <__ssvfiscanf_r+0x10a>
 8006d44:	2b73      	cmp	r3, #115	; 0x73
 8006d46:	d1af      	bne.n	8006ca8 <__ssvfiscanf_r+0xec>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e7d8      	b.n	8006cfe <__ssvfiscanf_r+0x142>
 8006d4c:	6863      	ldr	r3, [r4, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dd0c      	ble.n	8006d6c <__ssvfiscanf_r+0x1b0>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	781a      	ldrb	r2, [r3, #0]
 8006d56:	455a      	cmp	r2, fp
 8006d58:	d175      	bne.n	8006e46 <__ssvfiscanf_r+0x28a>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	6862      	ldr	r2, [r4, #4]
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006d62:	3a01      	subs	r2, #1
 8006d64:	3301      	adds	r3, #1
 8006d66:	6062      	str	r2, [r4, #4]
 8006d68:	9345      	str	r3, [sp, #276]	; 0x114
 8006d6a:	e757      	b.n	8006c1c <__ssvfiscanf_r+0x60>
 8006d6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4630      	mov	r0, r6
 8006d72:	4798      	blx	r3
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0ec      	beq.n	8006d52 <__ssvfiscanf_r+0x196>
 8006d78:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d159      	bne.n	8006e32 <__ssvfiscanf_r+0x276>
 8006d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d82:	e05c      	b.n	8006e3e <__ssvfiscanf_r+0x282>
 8006d84:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d86:	f042 0220 	orr.w	r2, r2, #32
 8006d8a:	9241      	str	r2, [sp, #260]	; 0x104
 8006d8c:	e79b      	b.n	8006cc6 <__ssvfiscanf_r+0x10a>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	9342      	str	r3, [sp, #264]	; 0x108
 8006d92:	2304      	movs	r3, #4
 8006d94:	e7b3      	b.n	8006cfe <__ssvfiscanf_r+0x142>
 8006d96:	4629      	mov	r1, r5
 8006d98:	4640      	mov	r0, r8
 8006d9a:	f000 fc91 	bl	80076c0 <__sccl>
 8006d9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da4:	9341      	str	r3, [sp, #260]	; 0x104
 8006da6:	4605      	mov	r5, r0
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7a8      	b.n	8006cfe <__ssvfiscanf_r+0x142>
 8006dac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db2:	9341      	str	r3, [sp, #260]	; 0x104
 8006db4:	2300      	movs	r3, #0
 8006db6:	e7a2      	b.n	8006cfe <__ssvfiscanf_r+0x142>
 8006db8:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006dba:	06c3      	lsls	r3, r0, #27
 8006dbc:	f53f af2e 	bmi.w	8006c1c <__ssvfiscanf_r+0x60>
 8006dc0:	9b00      	ldr	r3, [sp, #0]
 8006dc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006dc4:	1d19      	adds	r1, r3, #4
 8006dc6:	9100      	str	r1, [sp, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	07c0      	lsls	r0, r0, #31
 8006dcc:	bf4c      	ite	mi
 8006dce:	801a      	strhmi	r2, [r3, #0]
 8006dd0:	601a      	strpl	r2, [r3, #0]
 8006dd2:	e723      	b.n	8006c1c <__ssvfiscanf_r+0x60>
 8006dd4:	2305      	movs	r3, #5
 8006dd6:	e792      	b.n	8006cfe <__ssvfiscanf_r+0x142>
 8006dd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006dda:	4621      	mov	r1, r4
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4798      	blx	r3
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d090      	beq.n	8006d06 <__ssvfiscanf_r+0x14a>
 8006de4:	e7c8      	b.n	8006d78 <__ssvfiscanf_r+0x1bc>
 8006de6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006de8:	3201      	adds	r2, #1
 8006dea:	9245      	str	r2, [sp, #276]	; 0x114
 8006dec:	6862      	ldr	r2, [r4, #4]
 8006dee:	3a01      	subs	r2, #1
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	6062      	str	r2, [r4, #4]
 8006df4:	dd02      	ble.n	8006dfc <__ssvfiscanf_r+0x240>
 8006df6:	3301      	adds	r3, #1
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	e787      	b.n	8006d0c <__ssvfiscanf_r+0x150>
 8006dfc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4630      	mov	r0, r6
 8006e02:	4798      	blx	r3
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d081      	beq.n	8006d0c <__ssvfiscanf_r+0x150>
 8006e08:	e7b6      	b.n	8006d78 <__ssvfiscanf_r+0x1bc>
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	dc06      	bgt.n	8006e1c <__ssvfiscanf_r+0x260>
 8006e0e:	466b      	mov	r3, sp
 8006e10:	4622      	mov	r2, r4
 8006e12:	a941      	add	r1, sp, #260	; 0x104
 8006e14:	4630      	mov	r0, r6
 8006e16:	f000 fb4d 	bl	80074b4 <_scanf_i>
 8006e1a:	e788      	b.n	8006d2e <__ssvfiscanf_r+0x172>
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <__ssvfiscanf_r+0x29c>)
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f43f aefc 	beq.w	8006c1c <__ssvfiscanf_r+0x60>
 8006e24:	466b      	mov	r3, sp
 8006e26:	4622      	mov	r2, r4
 8006e28:	a941      	add	r1, sp, #260	; 0x104
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7fd f938 	bl	80040a0 <_scanf_float>
 8006e30:	e77d      	b.n	8006d2e <__ssvfiscanf_r+0x172>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e38:	bf18      	it	ne
 8006e3a:	f04f 30ff 	movne.w	r0, #4294967295
 8006e3e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e48:	e7f9      	b.n	8006e3e <__ssvfiscanf_r+0x282>
 8006e4a:	bf00      	nop
 8006e4c:	08006b09 	.word	0x08006b09
 8006e50:	08006b83 	.word	0x08006b83
 8006e54:	08007d82 	.word	0x08007d82
 8006e58:	080040a1 	.word	0x080040a1

08006e5c <__sfputc_r>:
 8006e5c:	6893      	ldr	r3, [r2, #8]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	b410      	push	{r4}
 8006e64:	6093      	str	r3, [r2, #8]
 8006e66:	da08      	bge.n	8006e7a <__sfputc_r+0x1e>
 8006e68:	6994      	ldr	r4, [r2, #24]
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	db01      	blt.n	8006e72 <__sfputc_r+0x16>
 8006e6e:	290a      	cmp	r1, #10
 8006e70:	d103      	bne.n	8006e7a <__sfputc_r+0x1e>
 8006e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e76:	f7fe bad5 	b.w	8005424 <__swbuf_r>
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	1c58      	adds	r0, r3, #1
 8006e7e:	6010      	str	r0, [r2, #0]
 8006e80:	7019      	strb	r1, [r3, #0]
 8006e82:	4608      	mov	r0, r1
 8006e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <__sfputs_r>:
 8006e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	4614      	mov	r4, r2
 8006e92:	18d5      	adds	r5, r2, r3
 8006e94:	42ac      	cmp	r4, r5
 8006e96:	d101      	bne.n	8006e9c <__sfputs_r+0x12>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e007      	b.n	8006eac <__sfputs_r+0x22>
 8006e9c:	463a      	mov	r2, r7
 8006e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ffda 	bl	8006e5c <__sfputc_r>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d1f3      	bne.n	8006e94 <__sfputs_r+0xa>
 8006eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006eb0 <_vfiprintf_r>:
 8006eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	b09d      	sub	sp, #116	; 0x74
 8006eb8:	4617      	mov	r7, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	b118      	cbz	r0, 8006ec8 <_vfiprintf_r+0x18>
 8006ec0:	6983      	ldr	r3, [r0, #24]
 8006ec2:	b90b      	cbnz	r3, 8006ec8 <_vfiprintf_r+0x18>
 8006ec4:	f7fe fc80 	bl	80057c8 <__sinit>
 8006ec8:	4b7c      	ldr	r3, [pc, #496]	; (80070bc <_vfiprintf_r+0x20c>)
 8006eca:	429c      	cmp	r4, r3
 8006ecc:	d158      	bne.n	8006f80 <_vfiprintf_r+0xd0>
 8006ece:	6874      	ldr	r4, [r6, #4]
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	0718      	lsls	r0, r3, #28
 8006ed4:	d55e      	bpl.n	8006f94 <_vfiprintf_r+0xe4>
 8006ed6:	6923      	ldr	r3, [r4, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d05b      	beq.n	8006f94 <_vfiprintf_r+0xe4>
 8006edc:	2300      	movs	r3, #0
 8006ede:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ee6:	2330      	movs	r3, #48	; 0x30
 8006ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eec:	9503      	str	r5, [sp, #12]
 8006eee:	f04f 0b01 	mov.w	fp, #1
 8006ef2:	46b8      	mov	r8, r7
 8006ef4:	4645      	mov	r5, r8
 8006ef6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006efa:	b10b      	cbz	r3, 8006f00 <_vfiprintf_r+0x50>
 8006efc:	2b25      	cmp	r3, #37	; 0x25
 8006efe:	d154      	bne.n	8006faa <_vfiprintf_r+0xfa>
 8006f00:	ebb8 0a07 	subs.w	sl, r8, r7
 8006f04:	d00b      	beq.n	8006f1e <_vfiprintf_r+0x6e>
 8006f06:	4653      	mov	r3, sl
 8006f08:	463a      	mov	r2, r7
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff ffbc 	bl	8006e8a <__sfputs_r>
 8006f12:	3001      	adds	r0, #1
 8006f14:	f000 80c2 	beq.w	800709c <_vfiprintf_r+0x1ec>
 8006f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1a:	4453      	add	r3, sl
 8006f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1e:	f898 3000 	ldrb.w	r3, [r8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80ba 	beq.w	800709c <_vfiprintf_r+0x1ec>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f32:	9304      	str	r3, [sp, #16]
 8006f34:	9307      	str	r3, [sp, #28]
 8006f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f3c:	46a8      	mov	r8, r5
 8006f3e:	2205      	movs	r2, #5
 8006f40:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006f44:	485e      	ldr	r0, [pc, #376]	; (80070c0 <_vfiprintf_r+0x210>)
 8006f46:	f7f9 f94b 	bl	80001e0 <memchr>
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	bb78      	cbnz	r0, 8006fae <_vfiprintf_r+0xfe>
 8006f4e:	06d9      	lsls	r1, r3, #27
 8006f50:	bf44      	itt	mi
 8006f52:	2220      	movmi	r2, #32
 8006f54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f58:	071a      	lsls	r2, r3, #28
 8006f5a:	bf44      	itt	mi
 8006f5c:	222b      	movmi	r2, #43	; 0x2b
 8006f5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f62:	782a      	ldrb	r2, [r5, #0]
 8006f64:	2a2a      	cmp	r2, #42	; 0x2a
 8006f66:	d02a      	beq.n	8006fbe <_vfiprintf_r+0x10e>
 8006f68:	9a07      	ldr	r2, [sp, #28]
 8006f6a:	46a8      	mov	r8, r5
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	250a      	movs	r5, #10
 8006f70:	4641      	mov	r1, r8
 8006f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f76:	3b30      	subs	r3, #48	; 0x30
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d969      	bls.n	8007050 <_vfiprintf_r+0x1a0>
 8006f7c:	b360      	cbz	r0, 8006fd8 <_vfiprintf_r+0x128>
 8006f7e:	e024      	b.n	8006fca <_vfiprintf_r+0x11a>
 8006f80:	4b50      	ldr	r3, [pc, #320]	; (80070c4 <_vfiprintf_r+0x214>)
 8006f82:	429c      	cmp	r4, r3
 8006f84:	d101      	bne.n	8006f8a <_vfiprintf_r+0xda>
 8006f86:	68b4      	ldr	r4, [r6, #8]
 8006f88:	e7a2      	b.n	8006ed0 <_vfiprintf_r+0x20>
 8006f8a:	4b4f      	ldr	r3, [pc, #316]	; (80070c8 <_vfiprintf_r+0x218>)
 8006f8c:	429c      	cmp	r4, r3
 8006f8e:	bf08      	it	eq
 8006f90:	68f4      	ldreq	r4, [r6, #12]
 8006f92:	e79d      	b.n	8006ed0 <_vfiprintf_r+0x20>
 8006f94:	4621      	mov	r1, r4
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7fe faa8 	bl	80054ec <__swsetup_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d09d      	beq.n	8006edc <_vfiprintf_r+0x2c>
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	b01d      	add	sp, #116	; 0x74
 8006fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006faa:	46a8      	mov	r8, r5
 8006fac:	e7a2      	b.n	8006ef4 <_vfiprintf_r+0x44>
 8006fae:	4a44      	ldr	r2, [pc, #272]	; (80070c0 <_vfiprintf_r+0x210>)
 8006fb0:	1a80      	subs	r0, r0, r2
 8006fb2:	fa0b f000 	lsl.w	r0, fp, r0
 8006fb6:	4318      	orrs	r0, r3
 8006fb8:	9004      	str	r0, [sp, #16]
 8006fba:	4645      	mov	r5, r8
 8006fbc:	e7be      	b.n	8006f3c <_vfiprintf_r+0x8c>
 8006fbe:	9a03      	ldr	r2, [sp, #12]
 8006fc0:	1d11      	adds	r1, r2, #4
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	9103      	str	r1, [sp, #12]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	db01      	blt.n	8006fce <_vfiprintf_r+0x11e>
 8006fca:	9207      	str	r2, [sp, #28]
 8006fcc:	e004      	b.n	8006fd8 <_vfiprintf_r+0x128>
 8006fce:	4252      	negs	r2, r2
 8006fd0:	f043 0302 	orr.w	r3, r3, #2
 8006fd4:	9207      	str	r2, [sp, #28]
 8006fd6:	9304      	str	r3, [sp, #16]
 8006fd8:	f898 3000 	ldrb.w	r3, [r8]
 8006fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8006fde:	d10e      	bne.n	8006ffe <_vfiprintf_r+0x14e>
 8006fe0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe6:	d138      	bne.n	800705a <_vfiprintf_r+0x1aa>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	1d1a      	adds	r2, r3, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	9203      	str	r2, [sp, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bfb8      	it	lt
 8006ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ff8:	f108 0802 	add.w	r8, r8, #2
 8006ffc:	9305      	str	r3, [sp, #20]
 8006ffe:	4d33      	ldr	r5, [pc, #204]	; (80070cc <_vfiprintf_r+0x21c>)
 8007000:	f898 1000 	ldrb.w	r1, [r8]
 8007004:	2203      	movs	r2, #3
 8007006:	4628      	mov	r0, r5
 8007008:	f7f9 f8ea 	bl	80001e0 <memchr>
 800700c:	b140      	cbz	r0, 8007020 <_vfiprintf_r+0x170>
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	1b40      	subs	r0, r0, r5
 8007012:	fa03 f000 	lsl.w	r0, r3, r0
 8007016:	9b04      	ldr	r3, [sp, #16]
 8007018:	4303      	orrs	r3, r0
 800701a:	f108 0801 	add.w	r8, r8, #1
 800701e:	9304      	str	r3, [sp, #16]
 8007020:	f898 1000 	ldrb.w	r1, [r8]
 8007024:	482a      	ldr	r0, [pc, #168]	; (80070d0 <_vfiprintf_r+0x220>)
 8007026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800702a:	2206      	movs	r2, #6
 800702c:	f108 0701 	add.w	r7, r8, #1
 8007030:	f7f9 f8d6 	bl	80001e0 <memchr>
 8007034:	2800      	cmp	r0, #0
 8007036:	d037      	beq.n	80070a8 <_vfiprintf_r+0x1f8>
 8007038:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <_vfiprintf_r+0x224>)
 800703a:	bb1b      	cbnz	r3, 8007084 <_vfiprintf_r+0x1d4>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	3307      	adds	r3, #7
 8007040:	f023 0307 	bic.w	r3, r3, #7
 8007044:	3308      	adds	r3, #8
 8007046:	9303      	str	r3, [sp, #12]
 8007048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704a:	444b      	add	r3, r9
 800704c:	9309      	str	r3, [sp, #36]	; 0x24
 800704e:	e750      	b.n	8006ef2 <_vfiprintf_r+0x42>
 8007050:	fb05 3202 	mla	r2, r5, r2, r3
 8007054:	2001      	movs	r0, #1
 8007056:	4688      	mov	r8, r1
 8007058:	e78a      	b.n	8006f70 <_vfiprintf_r+0xc0>
 800705a:	2300      	movs	r3, #0
 800705c:	f108 0801 	add.w	r8, r8, #1
 8007060:	9305      	str	r3, [sp, #20]
 8007062:	4619      	mov	r1, r3
 8007064:	250a      	movs	r5, #10
 8007066:	4640      	mov	r0, r8
 8007068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800706c:	3a30      	subs	r2, #48	; 0x30
 800706e:	2a09      	cmp	r2, #9
 8007070:	d903      	bls.n	800707a <_vfiprintf_r+0x1ca>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0c3      	beq.n	8006ffe <_vfiprintf_r+0x14e>
 8007076:	9105      	str	r1, [sp, #20]
 8007078:	e7c1      	b.n	8006ffe <_vfiprintf_r+0x14e>
 800707a:	fb05 2101 	mla	r1, r5, r1, r2
 800707e:	2301      	movs	r3, #1
 8007080:	4680      	mov	r8, r0
 8007082:	e7f0      	b.n	8007066 <_vfiprintf_r+0x1b6>
 8007084:	ab03      	add	r3, sp, #12
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	4622      	mov	r2, r4
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <_vfiprintf_r+0x228>)
 800708c:	a904      	add	r1, sp, #16
 800708e:	4630      	mov	r0, r6
 8007090:	f3af 8000 	nop.w
 8007094:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007098:	4681      	mov	r9, r0
 800709a:	d1d5      	bne.n	8007048 <_vfiprintf_r+0x198>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	065b      	lsls	r3, r3, #25
 80070a0:	f53f af7e 	bmi.w	8006fa0 <_vfiprintf_r+0xf0>
 80070a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070a6:	e77d      	b.n	8006fa4 <_vfiprintf_r+0xf4>
 80070a8:	ab03      	add	r3, sp, #12
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	4622      	mov	r2, r4
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <_vfiprintf_r+0x228>)
 80070b0:	a904      	add	r1, sp, #16
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 f888 	bl	80071c8 <_printf_i>
 80070b8:	e7ec      	b.n	8007094 <_vfiprintf_r+0x1e4>
 80070ba:	bf00      	nop
 80070bc:	08007c30 	.word	0x08007c30
 80070c0:	08007d7c 	.word	0x08007d7c
 80070c4:	08007c50 	.word	0x08007c50
 80070c8:	08007c10 	.word	0x08007c10
 80070cc:	08007d82 	.word	0x08007d82
 80070d0:	08007d86 	.word	0x08007d86
 80070d4:	00000000 	.word	0x00000000
 80070d8:	08006e8b 	.word	0x08006e8b

080070dc <_printf_common>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	4691      	mov	r9, r2
 80070e2:	461f      	mov	r7, r3
 80070e4:	688a      	ldr	r2, [r1, #8]
 80070e6:	690b      	ldr	r3, [r1, #16]
 80070e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070ec:	4293      	cmp	r3, r2
 80070ee:	bfb8      	it	lt
 80070f0:	4613      	movlt	r3, r2
 80070f2:	f8c9 3000 	str.w	r3, [r9]
 80070f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070fa:	4606      	mov	r6, r0
 80070fc:	460c      	mov	r4, r1
 80070fe:	b112      	cbz	r2, 8007106 <_printf_common+0x2a>
 8007100:	3301      	adds	r3, #1
 8007102:	f8c9 3000 	str.w	r3, [r9]
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	0699      	lsls	r1, r3, #26
 800710a:	bf42      	ittt	mi
 800710c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007110:	3302      	addmi	r3, #2
 8007112:	f8c9 3000 	strmi.w	r3, [r9]
 8007116:	6825      	ldr	r5, [r4, #0]
 8007118:	f015 0506 	ands.w	r5, r5, #6
 800711c:	d107      	bne.n	800712e <_printf_common+0x52>
 800711e:	f104 0a19 	add.w	sl, r4, #25
 8007122:	68e3      	ldr	r3, [r4, #12]
 8007124:	f8d9 2000 	ldr.w	r2, [r9]
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	42ab      	cmp	r3, r5
 800712c:	dc28      	bgt.n	8007180 <_printf_common+0xa4>
 800712e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	3300      	adds	r3, #0
 8007136:	bf18      	it	ne
 8007138:	2301      	movne	r3, #1
 800713a:	0692      	lsls	r2, r2, #26
 800713c:	d42d      	bmi.n	800719a <_printf_common+0xbe>
 800713e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007142:	4639      	mov	r1, r7
 8007144:	4630      	mov	r0, r6
 8007146:	47c0      	blx	r8
 8007148:	3001      	adds	r0, #1
 800714a:	d020      	beq.n	800718e <_printf_common+0xb2>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	68e5      	ldr	r5, [r4, #12]
 8007150:	f8d9 2000 	ldr.w	r2, [r9]
 8007154:	f003 0306 	and.w	r3, r3, #6
 8007158:	2b04      	cmp	r3, #4
 800715a:	bf08      	it	eq
 800715c:	1aad      	subeq	r5, r5, r2
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	bf0c      	ite	eq
 8007164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007168:	2500      	movne	r5, #0
 800716a:	4293      	cmp	r3, r2
 800716c:	bfc4      	itt	gt
 800716e:	1a9b      	subgt	r3, r3, r2
 8007170:	18ed      	addgt	r5, r5, r3
 8007172:	f04f 0900 	mov.w	r9, #0
 8007176:	341a      	adds	r4, #26
 8007178:	454d      	cmp	r5, r9
 800717a:	d11a      	bne.n	80071b2 <_printf_common+0xd6>
 800717c:	2000      	movs	r0, #0
 800717e:	e008      	b.n	8007192 <_printf_common+0xb6>
 8007180:	2301      	movs	r3, #1
 8007182:	4652      	mov	r2, sl
 8007184:	4639      	mov	r1, r7
 8007186:	4630      	mov	r0, r6
 8007188:	47c0      	blx	r8
 800718a:	3001      	adds	r0, #1
 800718c:	d103      	bne.n	8007196 <_printf_common+0xba>
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007196:	3501      	adds	r5, #1
 8007198:	e7c3      	b.n	8007122 <_printf_common+0x46>
 800719a:	18e1      	adds	r1, r4, r3
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	2030      	movs	r0, #48	; 0x30
 80071a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071a4:	4422      	add	r2, r4
 80071a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071ae:	3302      	adds	r3, #2
 80071b0:	e7c5      	b.n	800713e <_printf_common+0x62>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4622      	mov	r2, r4
 80071b6:	4639      	mov	r1, r7
 80071b8:	4630      	mov	r0, r6
 80071ba:	47c0      	blx	r8
 80071bc:	3001      	adds	r0, #1
 80071be:	d0e6      	beq.n	800718e <_printf_common+0xb2>
 80071c0:	f109 0901 	add.w	r9, r9, #1
 80071c4:	e7d8      	b.n	8007178 <_printf_common+0x9c>
	...

080071c8 <_printf_i>:
 80071c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071d0:	460c      	mov	r4, r1
 80071d2:	7e09      	ldrb	r1, [r1, #24]
 80071d4:	b085      	sub	sp, #20
 80071d6:	296e      	cmp	r1, #110	; 0x6e
 80071d8:	4617      	mov	r7, r2
 80071da:	4606      	mov	r6, r0
 80071dc:	4698      	mov	r8, r3
 80071de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e0:	f000 80b3 	beq.w	800734a <_printf_i+0x182>
 80071e4:	d822      	bhi.n	800722c <_printf_i+0x64>
 80071e6:	2963      	cmp	r1, #99	; 0x63
 80071e8:	d036      	beq.n	8007258 <_printf_i+0x90>
 80071ea:	d80a      	bhi.n	8007202 <_printf_i+0x3a>
 80071ec:	2900      	cmp	r1, #0
 80071ee:	f000 80b9 	beq.w	8007364 <_printf_i+0x19c>
 80071f2:	2958      	cmp	r1, #88	; 0x58
 80071f4:	f000 8083 	beq.w	80072fe <_printf_i+0x136>
 80071f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007200:	e032      	b.n	8007268 <_printf_i+0xa0>
 8007202:	2964      	cmp	r1, #100	; 0x64
 8007204:	d001      	beq.n	800720a <_printf_i+0x42>
 8007206:	2969      	cmp	r1, #105	; 0x69
 8007208:	d1f6      	bne.n	80071f8 <_printf_i+0x30>
 800720a:	6820      	ldr	r0, [r4, #0]
 800720c:	6813      	ldr	r3, [r2, #0]
 800720e:	0605      	lsls	r5, r0, #24
 8007210:	f103 0104 	add.w	r1, r3, #4
 8007214:	d52a      	bpl.n	800726c <_printf_i+0xa4>
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	da03      	bge.n	8007226 <_printf_i+0x5e>
 800721e:	222d      	movs	r2, #45	; 0x2d
 8007220:	425b      	negs	r3, r3
 8007222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007226:	486f      	ldr	r0, [pc, #444]	; (80073e4 <_printf_i+0x21c>)
 8007228:	220a      	movs	r2, #10
 800722a:	e039      	b.n	80072a0 <_printf_i+0xd8>
 800722c:	2973      	cmp	r1, #115	; 0x73
 800722e:	f000 809d 	beq.w	800736c <_printf_i+0x1a4>
 8007232:	d808      	bhi.n	8007246 <_printf_i+0x7e>
 8007234:	296f      	cmp	r1, #111	; 0x6f
 8007236:	d020      	beq.n	800727a <_printf_i+0xb2>
 8007238:	2970      	cmp	r1, #112	; 0x70
 800723a:	d1dd      	bne.n	80071f8 <_printf_i+0x30>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	f043 0320 	orr.w	r3, r3, #32
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	e003      	b.n	800724e <_printf_i+0x86>
 8007246:	2975      	cmp	r1, #117	; 0x75
 8007248:	d017      	beq.n	800727a <_printf_i+0xb2>
 800724a:	2978      	cmp	r1, #120	; 0x78
 800724c:	d1d4      	bne.n	80071f8 <_printf_i+0x30>
 800724e:	2378      	movs	r3, #120	; 0x78
 8007250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007254:	4864      	ldr	r0, [pc, #400]	; (80073e8 <_printf_i+0x220>)
 8007256:	e055      	b.n	8007304 <_printf_i+0x13c>
 8007258:	6813      	ldr	r3, [r2, #0]
 800725a:	1d19      	adds	r1, r3, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6011      	str	r1, [r2, #0]
 8007260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007268:	2301      	movs	r3, #1
 800726a:	e08c      	b.n	8007386 <_printf_i+0x1be>
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6011      	str	r1, [r2, #0]
 8007270:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007274:	bf18      	it	ne
 8007276:	b21b      	sxthne	r3, r3
 8007278:	e7cf      	b.n	800721a <_printf_i+0x52>
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	6825      	ldr	r5, [r4, #0]
 800727e:	1d18      	adds	r0, r3, #4
 8007280:	6010      	str	r0, [r2, #0]
 8007282:	0628      	lsls	r0, r5, #24
 8007284:	d501      	bpl.n	800728a <_printf_i+0xc2>
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	e002      	b.n	8007290 <_printf_i+0xc8>
 800728a:	0668      	lsls	r0, r5, #25
 800728c:	d5fb      	bpl.n	8007286 <_printf_i+0xbe>
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	4854      	ldr	r0, [pc, #336]	; (80073e4 <_printf_i+0x21c>)
 8007292:	296f      	cmp	r1, #111	; 0x6f
 8007294:	bf14      	ite	ne
 8007296:	220a      	movne	r2, #10
 8007298:	2208      	moveq	r2, #8
 800729a:	2100      	movs	r1, #0
 800729c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072a0:	6865      	ldr	r5, [r4, #4]
 80072a2:	60a5      	str	r5, [r4, #8]
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	f2c0 8095 	blt.w	80073d4 <_printf_i+0x20c>
 80072aa:	6821      	ldr	r1, [r4, #0]
 80072ac:	f021 0104 	bic.w	r1, r1, #4
 80072b0:	6021      	str	r1, [r4, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d13d      	bne.n	8007332 <_printf_i+0x16a>
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	f040 808e 	bne.w	80073d8 <_printf_i+0x210>
 80072bc:	4665      	mov	r5, ip
 80072be:	2a08      	cmp	r2, #8
 80072c0:	d10b      	bne.n	80072da <_printf_i+0x112>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	07db      	lsls	r3, r3, #31
 80072c6:	d508      	bpl.n	80072da <_printf_i+0x112>
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	bfde      	ittt	le
 80072d0:	2330      	movle	r3, #48	; 0x30
 80072d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072da:	ebac 0305 	sub.w	r3, ip, r5
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	f8cd 8000 	str.w	r8, [sp]
 80072e4:	463b      	mov	r3, r7
 80072e6:	aa03      	add	r2, sp, #12
 80072e8:	4621      	mov	r1, r4
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7ff fef6 	bl	80070dc <_printf_common>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d14d      	bne.n	8007390 <_printf_i+0x1c8>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	b005      	add	sp, #20
 80072fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072fe:	4839      	ldr	r0, [pc, #228]	; (80073e4 <_printf_i+0x21c>)
 8007300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007304:	6813      	ldr	r3, [r2, #0]
 8007306:	6821      	ldr	r1, [r4, #0]
 8007308:	1d1d      	adds	r5, r3, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6015      	str	r5, [r2, #0]
 800730e:	060a      	lsls	r2, r1, #24
 8007310:	d50b      	bpl.n	800732a <_printf_i+0x162>
 8007312:	07ca      	lsls	r2, r1, #31
 8007314:	bf44      	itt	mi
 8007316:	f041 0120 	orrmi.w	r1, r1, #32
 800731a:	6021      	strmi	r1, [r4, #0]
 800731c:	b91b      	cbnz	r3, 8007326 <_printf_i+0x15e>
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	f022 0220 	bic.w	r2, r2, #32
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	2210      	movs	r2, #16
 8007328:	e7b7      	b.n	800729a <_printf_i+0xd2>
 800732a:	064d      	lsls	r5, r1, #25
 800732c:	bf48      	it	mi
 800732e:	b29b      	uxthmi	r3, r3
 8007330:	e7ef      	b.n	8007312 <_printf_i+0x14a>
 8007332:	4665      	mov	r5, ip
 8007334:	fbb3 f1f2 	udiv	r1, r3, r2
 8007338:	fb02 3311 	mls	r3, r2, r1, r3
 800733c:	5cc3      	ldrb	r3, [r0, r3]
 800733e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007342:	460b      	mov	r3, r1
 8007344:	2900      	cmp	r1, #0
 8007346:	d1f5      	bne.n	8007334 <_printf_i+0x16c>
 8007348:	e7b9      	b.n	80072be <_printf_i+0xf6>
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	6825      	ldr	r5, [r4, #0]
 800734e:	6961      	ldr	r1, [r4, #20]
 8007350:	1d18      	adds	r0, r3, #4
 8007352:	6010      	str	r0, [r2, #0]
 8007354:	0628      	lsls	r0, r5, #24
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	d501      	bpl.n	800735e <_printf_i+0x196>
 800735a:	6019      	str	r1, [r3, #0]
 800735c:	e002      	b.n	8007364 <_printf_i+0x19c>
 800735e:	066a      	lsls	r2, r5, #25
 8007360:	d5fb      	bpl.n	800735a <_printf_i+0x192>
 8007362:	8019      	strh	r1, [r3, #0]
 8007364:	2300      	movs	r3, #0
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	4665      	mov	r5, ip
 800736a:	e7b9      	b.n	80072e0 <_printf_i+0x118>
 800736c:	6813      	ldr	r3, [r2, #0]
 800736e:	1d19      	adds	r1, r3, #4
 8007370:	6011      	str	r1, [r2, #0]
 8007372:	681d      	ldr	r5, [r3, #0]
 8007374:	6862      	ldr	r2, [r4, #4]
 8007376:	2100      	movs	r1, #0
 8007378:	4628      	mov	r0, r5
 800737a:	f7f8 ff31 	bl	80001e0 <memchr>
 800737e:	b108      	cbz	r0, 8007384 <_printf_i+0x1bc>
 8007380:	1b40      	subs	r0, r0, r5
 8007382:	6060      	str	r0, [r4, #4]
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2300      	movs	r3, #0
 800738a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738e:	e7a7      	b.n	80072e0 <_printf_i+0x118>
 8007390:	6923      	ldr	r3, [r4, #16]
 8007392:	462a      	mov	r2, r5
 8007394:	4639      	mov	r1, r7
 8007396:	4630      	mov	r0, r6
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d0aa      	beq.n	80072f4 <_printf_i+0x12c>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	079b      	lsls	r3, r3, #30
 80073a2:	d413      	bmi.n	80073cc <_printf_i+0x204>
 80073a4:	68e0      	ldr	r0, [r4, #12]
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	4298      	cmp	r0, r3
 80073aa:	bfb8      	it	lt
 80073ac:	4618      	movlt	r0, r3
 80073ae:	e7a3      	b.n	80072f8 <_printf_i+0x130>
 80073b0:	2301      	movs	r3, #1
 80073b2:	464a      	mov	r2, r9
 80073b4:	4639      	mov	r1, r7
 80073b6:	4630      	mov	r0, r6
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d09a      	beq.n	80072f4 <_printf_i+0x12c>
 80073be:	3501      	adds	r5, #1
 80073c0:	68e3      	ldr	r3, [r4, #12]
 80073c2:	9a03      	ldr	r2, [sp, #12]
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	42ab      	cmp	r3, r5
 80073c8:	dcf2      	bgt.n	80073b0 <_printf_i+0x1e8>
 80073ca:	e7eb      	b.n	80073a4 <_printf_i+0x1dc>
 80073cc:	2500      	movs	r5, #0
 80073ce:	f104 0919 	add.w	r9, r4, #25
 80073d2:	e7f5      	b.n	80073c0 <_printf_i+0x1f8>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ac      	bne.n	8007332 <_printf_i+0x16a>
 80073d8:	7803      	ldrb	r3, [r0, #0]
 80073da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e2:	e76c      	b.n	80072be <_printf_i+0xf6>
 80073e4:	08007d8d 	.word	0x08007d8d
 80073e8:	08007d9e 	.word	0x08007d9e

080073ec <_scanf_chars>:
 80073ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f0:	4615      	mov	r5, r2
 80073f2:	688a      	ldr	r2, [r1, #8]
 80073f4:	4680      	mov	r8, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b932      	cbnz	r2, 8007408 <_scanf_chars+0x1c>
 80073fa:	698a      	ldr	r2, [r1, #24]
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	bf14      	ite	ne
 8007400:	f04f 32ff 	movne.w	r2, #4294967295
 8007404:	2201      	moveq	r2, #1
 8007406:	608a      	str	r2, [r1, #8]
 8007408:	6822      	ldr	r2, [r4, #0]
 800740a:	06d1      	lsls	r1, r2, #27
 800740c:	bf5f      	itttt	pl
 800740e:	681a      	ldrpl	r2, [r3, #0]
 8007410:	1d11      	addpl	r1, r2, #4
 8007412:	6019      	strpl	r1, [r3, #0]
 8007414:	6817      	ldrpl	r7, [r2, #0]
 8007416:	2600      	movs	r6, #0
 8007418:	69a3      	ldr	r3, [r4, #24]
 800741a:	b1db      	cbz	r3, 8007454 <_scanf_chars+0x68>
 800741c:	2b01      	cmp	r3, #1
 800741e:	d107      	bne.n	8007430 <_scanf_chars+0x44>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	6962      	ldr	r2, [r4, #20]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	5cd3      	ldrb	r3, [r2, r3]
 8007428:	b9a3      	cbnz	r3, 8007454 <_scanf_chars+0x68>
 800742a:	2e00      	cmp	r6, #0
 800742c:	d132      	bne.n	8007494 <_scanf_chars+0xa8>
 800742e:	e006      	b.n	800743e <_scanf_chars+0x52>
 8007430:	2b02      	cmp	r3, #2
 8007432:	d007      	beq.n	8007444 <_scanf_chars+0x58>
 8007434:	2e00      	cmp	r6, #0
 8007436:	d12d      	bne.n	8007494 <_scanf_chars+0xa8>
 8007438:	69a3      	ldr	r3, [r4, #24]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d12a      	bne.n	8007494 <_scanf_chars+0xa8>
 800743e:	2001      	movs	r0, #1
 8007440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007444:	f7fe fd74 	bl	8005f30 <__locale_ctype_ptr>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	4418      	add	r0, r3
 800744e:	7843      	ldrb	r3, [r0, #1]
 8007450:	071b      	lsls	r3, r3, #28
 8007452:	d4ef      	bmi.n	8007434 <_scanf_chars+0x48>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	06da      	lsls	r2, r3, #27
 8007458:	bf5e      	ittt	pl
 800745a:	682b      	ldrpl	r3, [r5, #0]
 800745c:	781b      	ldrbpl	r3, [r3, #0]
 800745e:	703b      	strbpl	r3, [r7, #0]
 8007460:	682a      	ldr	r2, [r5, #0]
 8007462:	686b      	ldr	r3, [r5, #4]
 8007464:	f102 0201 	add.w	r2, r2, #1
 8007468:	602a      	str	r2, [r5, #0]
 800746a:	68a2      	ldr	r2, [r4, #8]
 800746c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007470:	f102 32ff 	add.w	r2, r2, #4294967295
 8007474:	606b      	str	r3, [r5, #4]
 8007476:	f106 0601 	add.w	r6, r6, #1
 800747a:	bf58      	it	pl
 800747c:	3701      	addpl	r7, #1
 800747e:	60a2      	str	r2, [r4, #8]
 8007480:	b142      	cbz	r2, 8007494 <_scanf_chars+0xa8>
 8007482:	2b00      	cmp	r3, #0
 8007484:	dcc8      	bgt.n	8007418 <_scanf_chars+0x2c>
 8007486:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800748a:	4629      	mov	r1, r5
 800748c:	4640      	mov	r0, r8
 800748e:	4798      	blx	r3
 8007490:	2800      	cmp	r0, #0
 8007492:	d0c1      	beq.n	8007418 <_scanf_chars+0x2c>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	f013 0310 	ands.w	r3, r3, #16
 800749a:	d105      	bne.n	80074a8 <_scanf_chars+0xbc>
 800749c:	68e2      	ldr	r2, [r4, #12]
 800749e:	3201      	adds	r2, #1
 80074a0:	60e2      	str	r2, [r4, #12]
 80074a2:	69a2      	ldr	r2, [r4, #24]
 80074a4:	b102      	cbz	r2, 80074a8 <_scanf_chars+0xbc>
 80074a6:	703b      	strb	r3, [r7, #0]
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	441e      	add	r6, r3
 80074ac:	6126      	str	r6, [r4, #16]
 80074ae:	2000      	movs	r0, #0
 80074b0:	e7c6      	b.n	8007440 <_scanf_chars+0x54>
	...

080074b4 <_scanf_i>:
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	469a      	mov	sl, r3
 80074ba:	4b74      	ldr	r3, [pc, #464]	; (800768c <_scanf_i+0x1d8>)
 80074bc:	460c      	mov	r4, r1
 80074be:	4683      	mov	fp, r0
 80074c0:	4616      	mov	r6, r2
 80074c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074c6:	b087      	sub	sp, #28
 80074c8:	ab03      	add	r3, sp, #12
 80074ca:	68a7      	ldr	r7, [r4, #8]
 80074cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80074d0:	4b6f      	ldr	r3, [pc, #444]	; (8007690 <_scanf_i+0x1dc>)
 80074d2:	69a1      	ldr	r1, [r4, #24]
 80074d4:	4a6f      	ldr	r2, [pc, #444]	; (8007694 <_scanf_i+0x1e0>)
 80074d6:	2903      	cmp	r1, #3
 80074d8:	bf08      	it	eq
 80074da:	461a      	moveq	r2, r3
 80074dc:	1e7b      	subs	r3, r7, #1
 80074de:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80074e2:	bf84      	itt	hi
 80074e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80074e8:	60a3      	strhi	r3, [r4, #8]
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	9200      	str	r2, [sp, #0]
 80074ee:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80074f2:	bf88      	it	hi
 80074f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80074f8:	f104 091c 	add.w	r9, r4, #28
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bf8c      	ite	hi
 8007500:	197f      	addhi	r7, r7, r5
 8007502:	2700      	movls	r7, #0
 8007504:	464b      	mov	r3, r9
 8007506:	f04f 0800 	mov.w	r8, #0
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	6831      	ldr	r1, [r6, #0]
 800750e:	ab03      	add	r3, sp, #12
 8007510:	2202      	movs	r2, #2
 8007512:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007516:	7809      	ldrb	r1, [r1, #0]
 8007518:	f7f8 fe62 	bl	80001e0 <memchr>
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	b330      	cbz	r0, 800756e <_scanf_i+0xba>
 8007520:	f1b8 0f01 	cmp.w	r8, #1
 8007524:	d15a      	bne.n	80075dc <_scanf_i+0x128>
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	b92a      	cbnz	r2, 8007536 <_scanf_i+0x82>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	2108      	movs	r1, #8
 800752e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007532:	6061      	str	r1, [r4, #4]
 8007534:	6022      	str	r2, [r4, #0]
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800753c:	6022      	str	r2, [r4, #0]
 800753e:	68a2      	ldr	r2, [r4, #8]
 8007540:	1e51      	subs	r1, r2, #1
 8007542:	60a1      	str	r1, [r4, #8]
 8007544:	b19a      	cbz	r2, 800756e <_scanf_i+0xba>
 8007546:	6832      	ldr	r2, [r6, #0]
 8007548:	1c51      	adds	r1, r2, #1
 800754a:	6031      	str	r1, [r6, #0]
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	1c5d      	adds	r5, r3, #1
 8007552:	6873      	ldr	r3, [r6, #4]
 8007554:	3b01      	subs	r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	6073      	str	r3, [r6, #4]
 800755a:	dc07      	bgt.n	800756c <_scanf_i+0xb8>
 800755c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007560:	4631      	mov	r1, r6
 8007562:	4658      	mov	r0, fp
 8007564:	4798      	blx	r3
 8007566:	2800      	cmp	r0, #0
 8007568:	f040 8086 	bne.w	8007678 <_scanf_i+0x1c4>
 800756c:	462b      	mov	r3, r5
 800756e:	f108 0801 	add.w	r8, r8, #1
 8007572:	f1b8 0f03 	cmp.w	r8, #3
 8007576:	d1c8      	bne.n	800750a <_scanf_i+0x56>
 8007578:	6862      	ldr	r2, [r4, #4]
 800757a:	b90a      	cbnz	r2, 8007580 <_scanf_i+0xcc>
 800757c:	220a      	movs	r2, #10
 800757e:	6062      	str	r2, [r4, #4]
 8007580:	6862      	ldr	r2, [r4, #4]
 8007582:	4945      	ldr	r1, [pc, #276]	; (8007698 <_scanf_i+0x1e4>)
 8007584:	6960      	ldr	r0, [r4, #20]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	1a89      	subs	r1, r1, r2
 800758a:	f000 f899 	bl	80076c0 <__sccl>
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	f04f 0800 	mov.w	r8, #0
 8007594:	461d      	mov	r5, r3
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d03a      	beq.n	8007614 <_scanf_i+0x160>
 800759e:	6831      	ldr	r1, [r6, #0]
 80075a0:	6960      	ldr	r0, [r4, #20]
 80075a2:	f891 c000 	ldrb.w	ip, [r1]
 80075a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d032      	beq.n	8007614 <_scanf_i+0x160>
 80075ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80075b2:	d121      	bne.n	80075f8 <_scanf_i+0x144>
 80075b4:	0510      	lsls	r0, r2, #20
 80075b6:	d51f      	bpl.n	80075f8 <_scanf_i+0x144>
 80075b8:	f108 0801 	add.w	r8, r8, #1
 80075bc:	b117      	cbz	r7, 80075c4 <_scanf_i+0x110>
 80075be:	3301      	adds	r3, #1
 80075c0:	3f01      	subs	r7, #1
 80075c2:	60a3      	str	r3, [r4, #8]
 80075c4:	6873      	ldr	r3, [r6, #4]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	6073      	str	r3, [r6, #4]
 80075cc:	dd1b      	ble.n	8007606 <_scanf_i+0x152>
 80075ce:	6833      	ldr	r3, [r6, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	6033      	str	r3, [r6, #0]
 80075d4:	68a3      	ldr	r3, [r4, #8]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	60a3      	str	r3, [r4, #8]
 80075da:	e7dc      	b.n	8007596 <_scanf_i+0xe2>
 80075dc:	f1b8 0f02 	cmp.w	r8, #2
 80075e0:	d1ad      	bne.n	800753e <_scanf_i+0x8a>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80075e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80075ec:	d1bf      	bne.n	800756e <_scanf_i+0xba>
 80075ee:	2110      	movs	r1, #16
 80075f0:	6061      	str	r1, [r4, #4]
 80075f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075f6:	e7a1      	b.n	800753c <_scanf_i+0x88>
 80075f8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	780b      	ldrb	r3, [r1, #0]
 8007600:	702b      	strb	r3, [r5, #0]
 8007602:	3501      	adds	r5, #1
 8007604:	e7de      	b.n	80075c4 <_scanf_i+0x110>
 8007606:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800760a:	4631      	mov	r1, r6
 800760c:	4658      	mov	r0, fp
 800760e:	4798      	blx	r3
 8007610:	2800      	cmp	r0, #0
 8007612:	d0df      	beq.n	80075d4 <_scanf_i+0x120>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	05d9      	lsls	r1, r3, #23
 8007618:	d50c      	bpl.n	8007634 <_scanf_i+0x180>
 800761a:	454d      	cmp	r5, r9
 800761c:	d908      	bls.n	8007630 <_scanf_i+0x17c>
 800761e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007626:	4632      	mov	r2, r6
 8007628:	4658      	mov	r0, fp
 800762a:	4798      	blx	r3
 800762c:	1e6f      	subs	r7, r5, #1
 800762e:	463d      	mov	r5, r7
 8007630:	454d      	cmp	r5, r9
 8007632:	d029      	beq.n	8007688 <_scanf_i+0x1d4>
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	f012 0210 	ands.w	r2, r2, #16
 800763a:	d113      	bne.n	8007664 <_scanf_i+0x1b0>
 800763c:	702a      	strb	r2, [r5, #0]
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	9e00      	ldr	r6, [sp, #0]
 8007642:	4649      	mov	r1, r9
 8007644:	4658      	mov	r0, fp
 8007646:	47b0      	blx	r6
 8007648:	f8da 3000 	ldr.w	r3, [sl]
 800764c:	6821      	ldr	r1, [r4, #0]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	f8ca 2000 	str.w	r2, [sl]
 8007654:	f011 0f20 	tst.w	r1, #32
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	d010      	beq.n	800767e <_scanf_i+0x1ca>
 800765c:	6018      	str	r0, [r3, #0]
 800765e:	68e3      	ldr	r3, [r4, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60e3      	str	r3, [r4, #12]
 8007664:	eba5 0509 	sub.w	r5, r5, r9
 8007668:	44a8      	add	r8, r5
 800766a:	6925      	ldr	r5, [r4, #16]
 800766c:	4445      	add	r5, r8
 800766e:	6125      	str	r5, [r4, #16]
 8007670:	2000      	movs	r0, #0
 8007672:	b007      	add	sp, #28
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	f04f 0800 	mov.w	r8, #0
 800767c:	e7ca      	b.n	8007614 <_scanf_i+0x160>
 800767e:	07ca      	lsls	r2, r1, #31
 8007680:	bf4c      	ite	mi
 8007682:	8018      	strhmi	r0, [r3, #0]
 8007684:	6018      	strpl	r0, [r3, #0]
 8007686:	e7ea      	b.n	800765e <_scanf_i+0x1aa>
 8007688:	2001      	movs	r0, #1
 800768a:	e7f2      	b.n	8007672 <_scanf_i+0x1be>
 800768c:	08007b50 	.word	0x08007b50
 8007690:	08005401 	.word	0x08005401
 8007694:	0800783d 	.word	0x0800783d
 8007698:	08007dbf 	.word	0x08007dbf

0800769c <_read_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4c07      	ldr	r4, [pc, #28]	; (80076bc <_read_r+0x20>)
 80076a0:	4605      	mov	r5, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	6022      	str	r2, [r4, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7fa f958 	bl	8001960 <_read>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_read_r+0x1e>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_read_r+0x1e>
 80076b8:	602b      	str	r3, [r5, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	200003b8 	.word	0x200003b8

080076c0 <__sccl>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	780b      	ldrb	r3, [r1, #0]
 80076c4:	2b5e      	cmp	r3, #94	; 0x5e
 80076c6:	bf13      	iteet	ne
 80076c8:	1c4a      	addne	r2, r1, #1
 80076ca:	1c8a      	addeq	r2, r1, #2
 80076cc:	784b      	ldrbeq	r3, [r1, #1]
 80076ce:	2100      	movne	r1, #0
 80076d0:	bf08      	it	eq
 80076d2:	2101      	moveq	r1, #1
 80076d4:	1e44      	subs	r4, r0, #1
 80076d6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80076da:	f804 1f01 	strb.w	r1, [r4, #1]!
 80076de:	42ac      	cmp	r4, r5
 80076e0:	d1fb      	bne.n	80076da <__sccl+0x1a>
 80076e2:	b913      	cbnz	r3, 80076ea <__sccl+0x2a>
 80076e4:	3a01      	subs	r2, #1
 80076e6:	4610      	mov	r0, r2
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	f081 0401 	eor.w	r4, r1, #1
 80076ee:	54c4      	strb	r4, [r0, r3]
 80076f0:	1c51      	adds	r1, r2, #1
 80076f2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80076f6:	2d2d      	cmp	r5, #45	; 0x2d
 80076f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80076fc:	460a      	mov	r2, r1
 80076fe:	d006      	beq.n	800770e <__sccl+0x4e>
 8007700:	2d5d      	cmp	r5, #93	; 0x5d
 8007702:	d0f0      	beq.n	80076e6 <__sccl+0x26>
 8007704:	b90d      	cbnz	r5, 800770a <__sccl+0x4a>
 8007706:	4632      	mov	r2, r6
 8007708:	e7ed      	b.n	80076e6 <__sccl+0x26>
 800770a:	462b      	mov	r3, r5
 800770c:	e7ef      	b.n	80076ee <__sccl+0x2e>
 800770e:	780e      	ldrb	r6, [r1, #0]
 8007710:	2e5d      	cmp	r6, #93	; 0x5d
 8007712:	d0fa      	beq.n	800770a <__sccl+0x4a>
 8007714:	42b3      	cmp	r3, r6
 8007716:	dcf8      	bgt.n	800770a <__sccl+0x4a>
 8007718:	3301      	adds	r3, #1
 800771a:	429e      	cmp	r6, r3
 800771c:	54c4      	strb	r4, [r0, r3]
 800771e:	dcfb      	bgt.n	8007718 <__sccl+0x58>
 8007720:	3102      	adds	r1, #2
 8007722:	e7e6      	b.n	80076f2 <__sccl+0x32>

08007724 <strncmp>:
 8007724:	b510      	push	{r4, lr}
 8007726:	b16a      	cbz	r2, 8007744 <strncmp+0x20>
 8007728:	3901      	subs	r1, #1
 800772a:	1884      	adds	r4, r0, r2
 800772c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007730:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007734:	4293      	cmp	r3, r2
 8007736:	d103      	bne.n	8007740 <strncmp+0x1c>
 8007738:	42a0      	cmp	r0, r4
 800773a:	d001      	beq.n	8007740 <strncmp+0x1c>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f5      	bne.n	800772c <strncmp+0x8>
 8007740:	1a98      	subs	r0, r3, r2
 8007742:	bd10      	pop	{r4, pc}
 8007744:	4610      	mov	r0, r2
 8007746:	e7fc      	b.n	8007742 <strncmp+0x1e>

08007748 <_strtoul_l.isra.0>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	4680      	mov	r8, r0
 800774e:	4689      	mov	r9, r1
 8007750:	4692      	mov	sl, r2
 8007752:	461e      	mov	r6, r3
 8007754:	460f      	mov	r7, r1
 8007756:	463d      	mov	r5, r7
 8007758:	9808      	ldr	r0, [sp, #32]
 800775a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800775e:	f7fe fbe3 	bl	8005f28 <__locale_ctype_ptr_l>
 8007762:	4420      	add	r0, r4
 8007764:	7843      	ldrb	r3, [r0, #1]
 8007766:	f013 0308 	ands.w	r3, r3, #8
 800776a:	d130      	bne.n	80077ce <_strtoul_l.isra.0+0x86>
 800776c:	2c2d      	cmp	r4, #45	; 0x2d
 800776e:	d130      	bne.n	80077d2 <_strtoul_l.isra.0+0x8a>
 8007770:	787c      	ldrb	r4, [r7, #1]
 8007772:	1cbd      	adds	r5, r7, #2
 8007774:	2101      	movs	r1, #1
 8007776:	2e00      	cmp	r6, #0
 8007778:	d05c      	beq.n	8007834 <_strtoul_l.isra.0+0xec>
 800777a:	2e10      	cmp	r6, #16
 800777c:	d109      	bne.n	8007792 <_strtoul_l.isra.0+0x4a>
 800777e:	2c30      	cmp	r4, #48	; 0x30
 8007780:	d107      	bne.n	8007792 <_strtoul_l.isra.0+0x4a>
 8007782:	782b      	ldrb	r3, [r5, #0]
 8007784:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007788:	2b58      	cmp	r3, #88	; 0x58
 800778a:	d14e      	bne.n	800782a <_strtoul_l.isra.0+0xe2>
 800778c:	786c      	ldrb	r4, [r5, #1]
 800778e:	2610      	movs	r6, #16
 8007790:	3502      	adds	r5, #2
 8007792:	f04f 32ff 	mov.w	r2, #4294967295
 8007796:	2300      	movs	r3, #0
 8007798:	fbb2 f2f6 	udiv	r2, r2, r6
 800779c:	fb06 fc02 	mul.w	ip, r6, r2
 80077a0:	ea6f 0c0c 	mvn.w	ip, ip
 80077a4:	4618      	mov	r0, r3
 80077a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80077aa:	2f09      	cmp	r7, #9
 80077ac:	d817      	bhi.n	80077de <_strtoul_l.isra.0+0x96>
 80077ae:	463c      	mov	r4, r7
 80077b0:	42a6      	cmp	r6, r4
 80077b2:	dd23      	ble.n	80077fc <_strtoul_l.isra.0+0xb4>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	db1e      	blt.n	80077f6 <_strtoul_l.isra.0+0xae>
 80077b8:	4282      	cmp	r2, r0
 80077ba:	d31c      	bcc.n	80077f6 <_strtoul_l.isra.0+0xae>
 80077bc:	d101      	bne.n	80077c2 <_strtoul_l.isra.0+0x7a>
 80077be:	45a4      	cmp	ip, r4
 80077c0:	db19      	blt.n	80077f6 <_strtoul_l.isra.0+0xae>
 80077c2:	fb00 4006 	mla	r0, r0, r6, r4
 80077c6:	2301      	movs	r3, #1
 80077c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077cc:	e7eb      	b.n	80077a6 <_strtoul_l.isra.0+0x5e>
 80077ce:	462f      	mov	r7, r5
 80077d0:	e7c1      	b.n	8007756 <_strtoul_l.isra.0+0xe>
 80077d2:	2c2b      	cmp	r4, #43	; 0x2b
 80077d4:	bf04      	itt	eq
 80077d6:	1cbd      	addeq	r5, r7, #2
 80077d8:	787c      	ldrbeq	r4, [r7, #1]
 80077da:	4619      	mov	r1, r3
 80077dc:	e7cb      	b.n	8007776 <_strtoul_l.isra.0+0x2e>
 80077de:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80077e2:	2f19      	cmp	r7, #25
 80077e4:	d801      	bhi.n	80077ea <_strtoul_l.isra.0+0xa2>
 80077e6:	3c37      	subs	r4, #55	; 0x37
 80077e8:	e7e2      	b.n	80077b0 <_strtoul_l.isra.0+0x68>
 80077ea:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80077ee:	2f19      	cmp	r7, #25
 80077f0:	d804      	bhi.n	80077fc <_strtoul_l.isra.0+0xb4>
 80077f2:	3c57      	subs	r4, #87	; 0x57
 80077f4:	e7dc      	b.n	80077b0 <_strtoul_l.isra.0+0x68>
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295
 80077fa:	e7e5      	b.n	80077c8 <_strtoul_l.isra.0+0x80>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da09      	bge.n	8007814 <_strtoul_l.isra.0+0xcc>
 8007800:	2322      	movs	r3, #34	; 0x22
 8007802:	f8c8 3000 	str.w	r3, [r8]
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	f1ba 0f00 	cmp.w	sl, #0
 800780e:	d107      	bne.n	8007820 <_strtoul_l.isra.0+0xd8>
 8007810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007814:	b101      	cbz	r1, 8007818 <_strtoul_l.isra.0+0xd0>
 8007816:	4240      	negs	r0, r0
 8007818:	f1ba 0f00 	cmp.w	sl, #0
 800781c:	d0f8      	beq.n	8007810 <_strtoul_l.isra.0+0xc8>
 800781e:	b10b      	cbz	r3, 8007824 <_strtoul_l.isra.0+0xdc>
 8007820:	f105 39ff 	add.w	r9, r5, #4294967295
 8007824:	f8ca 9000 	str.w	r9, [sl]
 8007828:	e7f2      	b.n	8007810 <_strtoul_l.isra.0+0xc8>
 800782a:	2430      	movs	r4, #48	; 0x30
 800782c:	2e00      	cmp	r6, #0
 800782e:	d1b0      	bne.n	8007792 <_strtoul_l.isra.0+0x4a>
 8007830:	2608      	movs	r6, #8
 8007832:	e7ae      	b.n	8007792 <_strtoul_l.isra.0+0x4a>
 8007834:	2c30      	cmp	r4, #48	; 0x30
 8007836:	d0a4      	beq.n	8007782 <_strtoul_l.isra.0+0x3a>
 8007838:	260a      	movs	r6, #10
 800783a:	e7aa      	b.n	8007792 <_strtoul_l.isra.0+0x4a>

0800783c <_strtoul_r>:
 800783c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800783e:	4c06      	ldr	r4, [pc, #24]	; (8007858 <_strtoul_r+0x1c>)
 8007840:	4d06      	ldr	r5, [pc, #24]	; (800785c <_strtoul_r+0x20>)
 8007842:	6824      	ldr	r4, [r4, #0]
 8007844:	6a24      	ldr	r4, [r4, #32]
 8007846:	2c00      	cmp	r4, #0
 8007848:	bf08      	it	eq
 800784a:	462c      	moveq	r4, r5
 800784c:	9400      	str	r4, [sp, #0]
 800784e:	f7ff ff7b 	bl	8007748 <_strtoul_l.isra.0>
 8007852:	b003      	add	sp, #12
 8007854:	bd30      	pop	{r4, r5, pc}
 8007856:	bf00      	nop
 8007858:	2000000c 	.word	0x2000000c
 800785c:	20000070 	.word	0x20000070

08007860 <__submore>:
 8007860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	460c      	mov	r4, r1
 8007866:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800786c:	4299      	cmp	r1, r3
 800786e:	d11d      	bne.n	80078ac <__submore+0x4c>
 8007870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007874:	f7fc fbba 	bl	8003fec <_malloc_r>
 8007878:	b918      	cbnz	r0, 8007882 <__submore+0x22>
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007886:	63a3      	str	r3, [r4, #56]	; 0x38
 8007888:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800788c:	6360      	str	r0, [r4, #52]	; 0x34
 800788e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007892:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007896:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800789a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800789e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80078a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80078a6:	6020      	str	r0, [r4, #0]
 80078a8:	2000      	movs	r0, #0
 80078aa:	e7e8      	b.n	800787e <__submore+0x1e>
 80078ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80078ae:	0077      	lsls	r7, r6, #1
 80078b0:	463a      	mov	r2, r7
 80078b2:	f000 f858 	bl	8007966 <_realloc_r>
 80078b6:	4605      	mov	r5, r0
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d0de      	beq.n	800787a <__submore+0x1a>
 80078bc:	eb00 0806 	add.w	r8, r0, r6
 80078c0:	4601      	mov	r1, r0
 80078c2:	4632      	mov	r2, r6
 80078c4:	4640      	mov	r0, r8
 80078c6:	f7fc fb21 	bl	8003f0c <memcpy>
 80078ca:	f8c4 8000 	str.w	r8, [r4]
 80078ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80078d2:	e7e9      	b.n	80078a8 <__submore+0x48>

080078d4 <__ascii_wctomb>:
 80078d4:	b149      	cbz	r1, 80078ea <__ascii_wctomb+0x16>
 80078d6:	2aff      	cmp	r2, #255	; 0xff
 80078d8:	bf85      	ittet	hi
 80078da:	238a      	movhi	r3, #138	; 0x8a
 80078dc:	6003      	strhi	r3, [r0, #0]
 80078de:	700a      	strbls	r2, [r1, #0]
 80078e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80078e4:	bf98      	it	ls
 80078e6:	2001      	movls	r0, #1
 80078e8:	4770      	bx	lr
 80078ea:	4608      	mov	r0, r1
 80078ec:	4770      	bx	lr
	...

080078f0 <_fstat_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4c07      	ldr	r4, [pc, #28]	; (8007910 <_fstat_r+0x20>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4605      	mov	r5, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	f7fa f874 	bl	80019ea <_fstat>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d102      	bne.n	800790c <_fstat_r+0x1c>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	b103      	cbz	r3, 800790c <_fstat_r+0x1c>
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	bf00      	nop
 8007910:	200003b8 	.word	0x200003b8

08007914 <_isatty_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4c06      	ldr	r4, [pc, #24]	; (8007930 <_isatty_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4605      	mov	r5, r0
 800791c:	4608      	mov	r0, r1
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	f7fa f873 	bl	8001a0a <_isatty>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_isatty_r+0x1a>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	b103      	cbz	r3, 800792e <_isatty_r+0x1a>
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	200003b8 	.word	0x200003b8

08007934 <memmove>:
 8007934:	4288      	cmp	r0, r1
 8007936:	b510      	push	{r4, lr}
 8007938:	eb01 0302 	add.w	r3, r1, r2
 800793c:	d807      	bhi.n	800794e <memmove+0x1a>
 800793e:	1e42      	subs	r2, r0, #1
 8007940:	4299      	cmp	r1, r3
 8007942:	d00a      	beq.n	800795a <memmove+0x26>
 8007944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007948:	f802 4f01 	strb.w	r4, [r2, #1]!
 800794c:	e7f8      	b.n	8007940 <memmove+0xc>
 800794e:	4283      	cmp	r3, r0
 8007950:	d9f5      	bls.n	800793e <memmove+0xa>
 8007952:	1881      	adds	r1, r0, r2
 8007954:	1ad2      	subs	r2, r2, r3
 8007956:	42d3      	cmn	r3, r2
 8007958:	d100      	bne.n	800795c <memmove+0x28>
 800795a:	bd10      	pop	{r4, pc}
 800795c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007960:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007964:	e7f7      	b.n	8007956 <memmove+0x22>

08007966 <_realloc_r>:
 8007966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007968:	4607      	mov	r7, r0
 800796a:	4614      	mov	r4, r2
 800796c:	460e      	mov	r6, r1
 800796e:	b921      	cbnz	r1, 800797a <_realloc_r+0x14>
 8007970:	4611      	mov	r1, r2
 8007972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007976:	f7fc bb39 	b.w	8003fec <_malloc_r>
 800797a:	b922      	cbnz	r2, 8007986 <_realloc_r+0x20>
 800797c:	f7fc fae8 	bl	8003f50 <_free_r>
 8007980:	4625      	mov	r5, r4
 8007982:	4628      	mov	r0, r5
 8007984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007986:	f000 f814 	bl	80079b2 <_malloc_usable_size_r>
 800798a:	42a0      	cmp	r0, r4
 800798c:	d20f      	bcs.n	80079ae <_realloc_r+0x48>
 800798e:	4621      	mov	r1, r4
 8007990:	4638      	mov	r0, r7
 8007992:	f7fc fb2b 	bl	8003fec <_malloc_r>
 8007996:	4605      	mov	r5, r0
 8007998:	2800      	cmp	r0, #0
 800799a:	d0f2      	beq.n	8007982 <_realloc_r+0x1c>
 800799c:	4631      	mov	r1, r6
 800799e:	4622      	mov	r2, r4
 80079a0:	f7fc fab4 	bl	8003f0c <memcpy>
 80079a4:	4631      	mov	r1, r6
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7fc fad2 	bl	8003f50 <_free_r>
 80079ac:	e7e9      	b.n	8007982 <_realloc_r+0x1c>
 80079ae:	4635      	mov	r5, r6
 80079b0:	e7e7      	b.n	8007982 <_realloc_r+0x1c>

080079b2 <_malloc_usable_size_r>:
 80079b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b6:	1f18      	subs	r0, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfbc      	itt	lt
 80079bc:	580b      	ldrlt	r3, [r1, r0]
 80079be:	18c0      	addlt	r0, r0, r3
 80079c0:	4770      	bx	lr
	...

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
